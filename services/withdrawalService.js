const { Withdrawal, Item, User, UserInventory } = require('../models');
const winston = require('winston');
const SteamMarketService = require('./steamMarketService');
const SteamBot = require('./steamBotService');
const steamBotConfig = require('../config/steam_bot.js');

// –õ–æ–≥–≥–µ—Ä
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'steam-withdrawal.log' })
  ],
});

class SteamWithdrawalService {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam Market —Å–µ—Ä–≤–∏—Å
    this.steamMarket = new SteamMarketService(SteamMarketService.loadConfig());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–π–¥–æ–≤
    this.steamBot = new SteamBot(
      steamBotConfig.accountName,
      steamBotConfig.password,
      steamBotConfig.sharedSecret,
      steamBotConfig.identitySecret
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  async processWithdrawal(withdrawal) {
    try {
      logger.info(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏ #${withdrawal.id}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
      const fullWithdrawal = await this.getWithdrawalData(withdrawal.id);
      if (!fullWithdrawal) {
        return await this.failWithdrawal(withdrawal, '–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      const { user, items } = fullWithdrawal;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º trade URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user.steam_trade_url) {
        return await this.failWithdrawal(withdrawal, 'Trade URL –Ω–µ —É–∫–∞–∑–∞–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
      await withdrawal.update({
        status: 'processing',
        tracking_data: {
          ...withdrawal.tracking_data,
          processing_start: new Date().toISOString()
        }
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞—è–≤–∫–µ
      const processedItems = [];

      for (const userItem of items) {
        const item = userItem.item;
        logger.info(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.name}`);

        // –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ Steam Market
        const purchaseResult = await this.purchaseItemFromMarket(item);

        if (purchaseResult.success) {
          processedItems.push({
            item_id: item.id,
            purchase_result: purchaseResult,
            status: 'purchased'
          });

          logger.info(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç ${item.name} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ ${purchaseResult.item.purchasePrice}`);
        } else {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ ${item.name}: ${purchaseResult.message}`);

          // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
          return await this.failWithdrawal(withdrawal, `–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ${item.name}: ${purchaseResult.message}`);
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∫—É–ø–ª–µ–Ω—ã, –∂–¥–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥
      logger.info(`‚è±Ô∏è –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞...`);

      // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      await this.delay(30000);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const tradeResult = await this.sendTradeOffer(user.steam_trade_url, processedItems);

      if (tradeResult.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await withdrawal.update({
          status: 'direct_trade_sent',
          steam_trade_offer_id: tradeResult.tradeOfferId,
          steam_trade_status: 'sent',
          processing_date: new Date(),
          tracking_data: {
            ...withdrawal.tracking_data,
            purchased_items: processedItems,
            trade_offer_id: tradeResult.tradeOfferId,
            trade_sent_time: new Date().toISOString(),
            total_cost: processedItems.reduce((sum, item) => sum + item.purchase_result.item.purchasePrice, 0)
          }
        });

        // –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ UserInventory —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ 'withdrawn' –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

        logger.info(`‚úÖ –ó–∞—è–≤–∫–∞ #${withdrawal.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. Trade offer ID: ${tradeResult.tradeOfferId}`);
        return { success: true, trade_offer_id: tradeResult.tradeOfferId };
      } else {
        return await this.failWithdrawal(withdrawal, `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer: ${tradeResult.message}`);
      }

    } catch (error) {
      logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #${withdrawal.id}: ${error.message}`);
      return await this.failWithdrawal(withdrawal, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ Steam Market
   */
  async purchaseItemFromMarket(item) {
    try {
      const marketHashName = item.steam_market_hash_name || item.name;
      const maxPrice = item.price * 1.1; // –ú–∞–∫—Å–∏–º—É–º 110% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã

      logger.info(`üõí –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç ${marketHashName} (–º–∞–∫—Å. —Ü–µ–Ω–∞: ${maxPrice})`);

      const result = await this.steamMarket.purchaseItemFromMarket(marketHashName, maxPrice);

      if (result.success) {
        logger.info(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ ${result.item.purchasePrice}`);
      }

      return result;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${item.name}: ${error.message}`);
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendTradeOffer(userTradeUrl, purchasedItems) {
    try {
      logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!this.steamBot.isLoggedIn) {
        await this.steamBot.login();
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
      const botInventory = await this.steamBot.getInventory();
      if (!botInventory.success) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞'
        };
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
      const itemsToTrade = [];
      for (const purchasedItem of purchasedItems) {
        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–∫–∏
        const inventoryItem = this.findItemInInventory(botInventory.items, purchasedItem);
        if (inventoryItem) {
          itemsToTrade.push(inventoryItem);
        } else {
          logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞: ${purchasedItem.item_id}`);
        }
      }

      if (!itemsToTrade.length) {
        return {
          success: false,
          message: '–ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞'
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer
      const tradeOfferResult = await this.steamBot.sendTradeOffer(userTradeUrl, itemsToTrade, []);

      if (tradeOfferResult.success) {
        logger.info(`‚úÖ Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: ${tradeOfferResult.tradeOfferId}`);
        return {
          success: true,
          tradeOfferId: tradeOfferResult.tradeOfferId
        };
      } else {
        return {
          success: false,
          message: tradeOfferResult.message
        };
      }

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer: ${error.message}`);
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
   */
  findItemInInventory(botInventory, purchasedItem) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ asset_id, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç.–¥.
    return botInventory.find(invItem =>
      invItem.market_hash_name === purchasedItem.purchase_result.item.marketHashName
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
   */
  async getWithdrawalData(withdrawalId) {
    try {
      return await Withdrawal.findByPk(withdrawalId, {
        include: [
          {
            model: User,
            attributes: ['id', 'username', 'steam_trade_url'],
            as: 'user'
          },
          {
            model: UserInventory,
            attributes: ['id', 'item_id'],
            as: 'items',
            include: [
              {
                model: Item,
                attributes: ['id', 'name', 'steam_market_hash_name', 'price'],
                as: 'item'
              }
            ]
          }
        ]
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: ${error.message}`);
      return null;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–π
   */
  async failWithdrawal(withdrawal, reason) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await withdrawal.update({
        status: 'failed',
        failed_reason: reason,
        completion_date: new Date(),
        tracking_data: {
          ...withdrawal.tracking_data,
          failure_reason: reason,
          failure_time: new Date().toISOString()
        }
      });

      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      await UserInventory.update(
        {
          status: 'inventory',
          transaction_date: null,
          withdrawal_id: null
        },
        {
          where: {
            withdrawal_id: withdrawal.id,
            status: 'withdrawn'
          }
        }
      );

      logger.error(`‚ùå –ó–∞—è–≤–∫–∞ #${withdrawal.id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–∞—è: ${reason}`);
      logger.info(`üîÑ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç–∫–∞—á–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∑–∞—è–≤–∫–∏ #${withdrawal.id}`);

      return { success: false, message: reason };
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–π: ${error.message}`);
      return { success: false, message: reason };
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö trade offers
   */
  async checkTradeOfferStatuses() {
    try {
      logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö trade offers...');

      const sentWithdrawals = await Withdrawal.findAll({
        where: {
          status: 'direct_trade_sent',
          steam_trade_offer_id: { [require('sequelize').Op.ne]: null }
        },
        order: [['created_at', 'ASC']]
      });

      if (!sentWithdrawals.length) {
        logger.info('üìù –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö trade offers –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        return { success: true, checked: 0 };
      }

      logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${sentWithdrawals.length} trade offers –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      let completedCount = 0;
      let failedCount = 0;

      for (const withdrawal of sentWithdrawals) {
        try {
          const tradeStatus = await this.steamBot.getTradeOfferStatus(withdrawal.steam_trade_offer_id);

          if (tradeStatus.state === 'Accepted') {
            // Trade offer –ø—Ä–∏–Ω—è—Ç - –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            await withdrawal.update({
              status: 'completed',
              steam_trade_status: 'accepted',
              completion_date: new Date(),
              tracking_data: {
                ...withdrawal.tracking_data,
                completion_time: new Date().toISOString(),
                trade_accepted_time: new Date().toISOString()
              }
            });

            logger.info(`‚úÖ Trade offer ${withdrawal.steam_trade_offer_id} –ø—Ä–∏–Ω—è—Ç. –ó–∞—è–≤–∫–∞ #${withdrawal.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            completedCount++;

          } else if (tradeStatus.state === 'Declined' || tradeStatus.state === 'Canceled') {
            // Trade offer –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            await this.failWithdrawal(withdrawal, `Trade offer ${tradeStatus.state.toLowerCase()}: ${tradeStatus.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
            failedCount++;

          } else if (tradeStatus.state === 'Invalid') {
            // Trade offer –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            await this.failWithdrawal(withdrawal, `Trade offer –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${tradeStatus.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
            failedCount++;
          }
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Pending) - –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trade offer ${withdrawal.steam_trade_offer_id}: ${error.message}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        await this.delay(1000);
      }

      logger.info(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedCount}, –ù–µ —É–¥–∞–ª–æ—Å—å: ${failedCount}`);

      return {
        success: true,
        checked: sentWithdrawals.length,
        completed: completedCount,
        failed: failedCount
      };

    } catch (error) {
      logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trade offers: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
   */
  async processAllPendingWithdrawals() {
    try {
      logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫...');

      const pendingWithdrawals = await Withdrawal.findAll({
        where: { status: 'pending' },
        order: [['created_at', 'ASC']]
      });

      if (!pendingWithdrawals.length) {
        logger.info('üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫');
        return { success: true, processed: 0 };
      }

      logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingWithdrawals.length} –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      let successCount = 0;
      let errorCount = 0;

      for (const withdrawal of pendingWithdrawals) {
        const result = await this.processWithdrawal(withdrawal);

        if (result.success) {
          successCount++;
        } else {
          errorCount++;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞—è–≤–æ–∫
        await this.delay(5000);
      }

      logger.info(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);

      return {
        success: true,
        processed: pendingWithdrawals.length,
        successful: successCount,
        failed: errorCount
      };

    } catch (error) {
      logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫: ${error.message}`);
      return { success: false, message: error.message };
    }
  }
}

module.exports = SteamWithdrawalService;
