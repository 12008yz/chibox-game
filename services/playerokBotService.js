const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const winston = require('winston');
const path = require('path');
const fs = require('fs');

puppeteer.use(StealthPlugin());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'playerok-bot.log' })
  ],
});

class PlayerOkBot {
  constructor() {
    this.browser = null;
    this.page = null;
    this.isLoggedIn = false;
    this.cookiesPath = path.join(__dirname, '../config/playerok-cookies.json');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
   */
  async init() {
    try {
      logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlayerOk –±–æ—Ç–∞...');

      this.browser = await puppeteer.launch({
        headless: false, // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å true
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-blink-features=AutomationControlled',
          '--disable-features=IsolateOrigins,site-per-process'
        ],
      });

      this.page = await this.browser.newPage();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await this.page.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36'
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
      if (fs.existsSync(this.cookiesPath)) {
        const cookies = JSON.parse(fs.readFileSync(this.cookiesPath, 'utf8'));
        await this.page.setCookie(...cookies);
        logger.info('‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      } else {
        logger.warn('‚ö†Ô∏è –§–∞–π–ª —Å cookies –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await this.page.goto('https://playerok.com', { waitUntil: 'networkidle2' });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      this.isLoggedIn = await this.checkAuth();

      if (this.isLoggedIn) {
        logger.info('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      } else {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ cookies —É—Å—Ç–∞—Ä–µ–ª–∏');
      }

      return this.isLoggedIn;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async checkAuth() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userMenuExists = await this.page.evaluate(() => {
        return document.querySelector('[data-testid="user-menu"]') !== null ||
               document.querySelector('.user-profile') !== null ||
               document.querySelector('[href*="/profile"]') !== null;
      });

      return userMenuExists;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ PlayerOk
   * @param {string} itemName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "AK-47 | Redline (Field-Tested)")
   * @param {number} maxPrice - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  async searchItem(itemName, maxPrice = null) {
    try {
      logger.info(`üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞: "${itemName}" (–º–∞–∫—Å. —Ü–µ–Ω–∞: ${maxPrice || '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞'}‚ÇΩ)`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ CS2
      await this.page.goto('https://playerok.com/cs2/items', { waitUntil: 'networkidle2' });

      // –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–æ–∏—Å–∫
      const searchInputSelector = 'input[type="search"], input[placeholder*="–ü–æ–∏—Å–∫"], input[name="search"]';
      await this.page.waitForSelector(searchInputSelector, { timeout: 10000 });
      await this.page.type(searchInputSelector, itemName, { delay: 100 });

      // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.page.waitForTimeout(2000);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
      const offers = await this.page.evaluate((maxPrice) => {
        const items = [];
        const cards = document.querySelectorAll('[data-testid="item-card"], .item-card, .product-card');

        cards.forEach((card, index) => {
          try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            const priceElement = card.querySelector('[data-testid="price"], .price, .item-price');
            const priceText = priceElement ? priceElement.textContent.trim() : '';
            const price = parseFloat(priceText.replace(/[^\d.,]/g, '').replace(',', '.'));

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            const nameElement = card.querySelector('[data-testid="item-name"], .item-name, .product-name');
            const name = nameElement ? nameElement.textContent.trim() : '';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            const sellerElement = card.querySelector('[data-testid="seller"], .seller, .seller-name');
            const seller = sellerElement ? sellerElement.textContent.trim() : '';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
            const linkElement = card.querySelector('a[href*="/item/"], a[href*="/product/"]');
            const url = linkElement ? linkElement.href : '';

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
            if (maxPrice && price > maxPrice) {
              return;
            }

            if (price && url) {
              items.push({
                name,
                price,
                seller,
                url,
                index
              });
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏:', e);
          }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–µ—à–µ–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º)
        return items.sort((a, b) => a.price - b.price);
      }, maxPrice);

      logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      if (offers.length > 0) {
        logger.info(`üí∞ –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${offers[0].price}‚ÇΩ –æ—Ç ${offers[0].seller}`);
      }

      return offers;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      return [];
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω —Å Steam –∏ ChiBox
   * @param {number} playerokPrice - –¶–µ–Ω–∞ –Ω–∞ PlayerOk
   * @param {number} steamPrice - –¶–µ–Ω–∞ –≤ Steam (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞)
   * @param {number} chiboxPrice - –¶–µ–Ω–∞ –≤ ChiBox (–≤–∞—à–∞ —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä–µ—à–µ–Ω–∏–µ–º –æ –ø–æ–∫—É–ø–∫–µ
   */
  comparePrices(playerokPrice, steamPrice, chiboxPrice) {
    const playerokFee = playerokPrice * 0.05; // 5% –∫–æ–º–∏—Å—Å–∏—è PlayerOk
    const totalCost = playerokPrice + playerokFee;

    const result = {
      playerok_price: playerokPrice,
      playerok_fee: playerokFee,
      total_cost: totalCost,
      steam_price: steamPrice,
      chibox_price: chiboxPrice,
      is_profitable: false,
      is_cheaper_than_steam: false,
      is_cheaper_than_chibox: false,
      profit_vs_chibox: 0,
      margin_percent: 0,
      decision: 'reject',
      reason: ''
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ—à–µ–≤–ª–µ –ª–∏ Steam
    result.is_cheaper_than_steam = totalCost <= steamPrice;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ—à–µ–≤–ª–µ –ª–∏ ChiBox
    result.is_cheaper_than_chibox = totalCost <= chiboxPrice;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ChiBox
    result.profit_vs_chibox = chiboxPrice - totalCost;
    result.margin_percent = ((result.profit_vs_chibox / chiboxPrice) * 100).toFixed(2);

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
    // –ü–†–ê–í–ò–õ–û: –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ù–ï –¥–æ—Ä–æ–∂–µ Steam –ò –ù–ï –¥–æ—Ä–æ–∂–µ ChiBox
    if (result.is_cheaper_than_steam && result.is_cheaper_than_chibox) {
      result.is_profitable = true;
      result.decision = 'buy';
      result.reason = `–í—ã–≥–æ–¥–Ω–æ! –ü—Ä–∏–±—ã–ª—å: ${result.profit_vs_chibox.toFixed(2)}‚ÇΩ (${result.margin_percent}%)`;
    } else if (!result.is_cheaper_than_steam) {
      result.decision = 'reject';
      result.reason = `–î–æ—Ä–æ–∂–µ Steam –Ω–∞ ${(totalCost - steamPrice).toFixed(2)}‚ÇΩ`;
    } else if (!result.is_cheaper_than_chibox) {
      result.decision = 'reject';
      result.reason = `–î–æ—Ä–æ–∂–µ ChiBox –Ω–∞ ${(totalCost - chiboxPrice).toFixed(2)}‚ÇΩ`;
    }

    return result;
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ PlayerOk
   * @param {string} itemUrl - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–∞
   * @param {string} userTradeUrl - Steam Trade URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ
   */
  async purchaseItem(itemUrl, userTradeUrl) {
    try {
      logger.info(`üõí –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemUrl}`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
      await this.page.goto(itemUrl, { waitUntil: 'networkidle2' });

      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
      const buyButtonSelector = 'button[data-testid="buy-button"], button:contains("–ö—É–ø–∏—Ç—å"), .buy-button';
      await this.page.waitForSelector(buyButtonSelector, { timeout: 10000 });
      await this.page.click(buyButtonSelector);

      // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–∫—É–ø–∫–∏
      await this.page.waitForTimeout(2000);

      // –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è Steam Trade URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const tradeUrlInputExists = await this.page.evaluate(() => {
        return document.querySelector('input[name*="trade"], input[placeholder*="Trade URL"], input[placeholder*="—Ç—Ä–µ–π–¥"]') !== null;
      });

      if (tradeUrlInputExists) {
        const tradeUrlInputSelector = 'input[name*="trade"], input[placeholder*="Trade URL"], input[placeholder*="—Ç—Ä–µ–π–¥"]';
        await this.page.waitForSelector(tradeUrlInputSelector);

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º Trade URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.page.evaluate((selector) => {
          const input = document.querySelector(selector);
          if (input) input.value = '';
        }, tradeUrlInputSelector);

        await this.page.type(tradeUrlInputSelector, userTradeUrl, { delay: 50 });
        logger.info('‚úÖ Trade URL –≤–≤–µ–¥—ë–Ω –≤ —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏');
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
      const confirmButtonSelector = 'button[data-testid="confirm-purchase"], button:contains("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), .confirm-button';
      await this.page.waitForSelector(confirmButtonSelector, { timeout: 10000 });
      await this.page.click(confirmButtonSelector);

      // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
      await this.page.waitForTimeout(3000);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const orderNumber = await this.page.evaluate(() => {
        const orderElement = document.querySelector('[data-testid="order-number"], .order-number, .order-id');
        return orderElement ? orderElement.textContent.trim() : null;
      });

      logger.info(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: ${orderNumber || '–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);

      return {
        success: true,
        order_number: orderNumber,
        message: '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞'
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Trade URL –≤ —á–∞—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
   * @param {string} orderNumber - –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
   * @param {string} userTradeUrl - Steam Trade URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async sendTradeUrlToSeller(orderNumber, userTradeUrl) {
    try {
      logger.info(`üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ Trade URL –ø—Ä–æ–¥–∞–≤—Ü—É –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderNumber}`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–æ–≤
      await this.page.goto('https://playerok.com/orders', { waitUntil: 'networkidle2' });

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
      const orderSelector = `[data-order-id="${orderNumber}"], .order[data-id="${orderNumber}"]`;
      await this.page.waitForSelector(orderSelector, { timeout: 10000 });

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
      const chatButtonSelector = `${orderSelector} button[data-testid="open-chat"], ${orderSelector} .open-chat`;
      await this.page.click(chatButtonSelector);

      // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
      await this.page.waitForTimeout(2000);

      // –í–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Trade URL
      const messageInputSelector = 'textarea[data-testid="chat-input"], textarea[placeholder*="–°–æ–æ–±—â–µ–Ω–∏–µ"], .chat-input';
      await this.page.waitForSelector(messageInputSelector);

      const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç –º–æ–π Steam Trade URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:\n${userTradeUrl}`;
      await this.page.type(messageInputSelector, message, { delay: 50 });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sendButtonSelector = 'button[data-testid="send-message"], button[type="submit"], .send-button';
      await this.page.click(sendButtonSelector);

      logger.info('‚úÖ Trade URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É –≤ —á–∞—Ç');

      return { success: true };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Trade URL:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   * @param {string} orderNumber - –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
   * @returns {Object} –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
   */
  async monitorOrder(orderNumber) {
    try {
      logger.info(`üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–∞ ${orderNumber}`);

      await this.page.goto(`https://playerok.com/orders/${orderNumber}`, { waitUntil: 'networkidle2' });

      const status = await this.page.evaluate(() => {
        const statusElement = document.querySelector('[data-testid="order-status"], .order-status');
        return statusElement ? statusElement.textContent.trim() : 'unknown';
      });

      logger.info(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderNumber}: ${status}`);

      return {
        order_number: orderNumber,
        status,
        timestamp: new Date()
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞:', error);
      return null;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  async close() {
    if (this.browser) {
      await this.browser.close();
      logger.info('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
}

module.exports = PlayerOkBot;
