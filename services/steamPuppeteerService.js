const puppeteer = require('puppeteer');
const winston = require('winston');
const fs = require('fs');
const path = require('path');

// –õ–æ–≥–≥–µ—Ä
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'steam-puppeteer.log' })
  ],
});

class SteamPuppeteerService {
  constructor(steamConfig) {
    this.steamConfig = steamConfig;
    this.browser = null;
    this.page = null;
    this.isLoggedIn = false;
    this.sessionPath = path.join(__dirname, '../sessions/steam_session.json');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    this.config = {
      headless: true, // –í–∫–ª—é—á–∞–µ–º headless —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      slowMo: 100, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      timeout: 30000,
      viewport: { width: 1920, height: 1080 }
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
   */
  async initialize() {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer –±—Ä–∞—É–∑–µ—Ä–∞...');

      this.browser = await puppeteer.launch({
        headless: this.config.headless,
        slowMo: this.config.slowMo,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-background-networking',
          '--disable-ipc-flooding-protection',
          '--single-process',
          '--window-size=1920,1080'
        ],
        executablePath: process.env.CHROME_BIN || undefined
      });

      this.page = await this.browser.newPage();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
      await this.page.setViewport(this.config.viewport);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ User-Agent
      await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
      this.page.setDefaultTimeout(this.config.timeout);
      this.page.setDefaultNavigationTimeout(this.config.timeout);

      logger.info('‚úÖ Puppeteer –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      return true;

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Puppeteer: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Steam
   */
  async login() {
    try {
      if (this.isLoggedIn) {
        logger.info('‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Steam');
        return true;
      }

      logger.info('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Steam...');

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      if (await this.loadSession()) {
        logger.info('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
        return true;
      }

      // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ö–æ–¥–∞
      const loginUrls = [
        'https://steamcommunity.com/login',
        'https://steamcommunity.com/login/home/',
        'https://store.steampowered.com/login/'
      ];

      let loginSuccess = false;

      for (const loginUrl of loginUrls) {
        try {
          logger.info(`üåê –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑: ${loginUrl}`);

          await this.page.goto(loginUrl, {
            waitUntil: 'networkidle2',
            timeout: 15000
          });

          await this.delay(2000);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
          const usernameSelectors = [
            'input[name="username"]',
            'input[id="input_username"]',
            'input[class*="username"]',
            'input[placeholder*="–ª–æ–≥–∏–Ω"]',
            'input[placeholder*="Login"]',
            'input[placeholder*="–ò–º—è"]',
            'input[type="text"]:first-of-type'
          ];

          let usernameField = null;
          let usedSelector = null;

          for (const selector of usernameSelectors) {
            try {
              await this.page.waitForSelector(selector, { timeout: 3000 });
              usernameField = await this.page.$(selector);
              if (usernameField) {
                usedSelector = selector;
                logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞: ${selector}`);
                break;
              }
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }

          if (!usernameField) {
            logger.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞ ${loginUrl}`);
            continue;
          }

          // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
          await this.page.focus(usedSelector);
          await this.page.keyboard.down('Control');
          await this.page.keyboard.press('a');
          await this.page.keyboard.up('Control');
          await this.page.type(usedSelector, this.steamConfig.accountName, { delay: 100 });
          await this.delay(1000);

          // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
          const passwordSelectors = [
            'input[name="password"]',
            'input[id="input_password"]',
            'input[type="password"]',
            'input[class*="password"]'
          ];

          let passwordField = null;
          let passwordSelector = null;

          for (const selector of passwordSelectors) {
            try {
              passwordField = await this.page.$(selector);
              if (passwordField) {
                passwordSelector = selector;
                logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: ${selector}`);
                break;
              }
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }

          if (!passwordField) {
            logger.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–∞ ${loginUrl}`);
            continue;
          }

          // –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
          await this.page.focus(passwordSelector);
          await this.page.keyboard.down('Control');
          await this.page.keyboard.press('a');
          await this.page.keyboard.up('Control');
          await this.page.type(passwordSelector, this.steamConfig.password, { delay: 100 });
          await this.delay(1000);

          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
          const submitSelectors = [
            'button[type="submit"]',
            'input[type="submit"]',
            'button[class*="submit"]',
            'button[class*="login"]',
            '.login_btn',
            '.btn_signin',
            '.btn_medium'
          ];

          let submitButton = null;

          for (const selector of submitSelectors) {
            try {
              submitButton = await this.page.$(selector);
              if (submitButton) {
                const isVisible = await submitButton.isIntersectingViewport();
                if (isVisible) {
                  logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: ${selector}`);
                  break;
                }
              }
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }

          if (!submitButton) {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter
            logger.info('üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –¥–ª—è –≤—Ö–æ–¥–∞');
            await this.page.keyboard.press('Enter');
          } else {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            await submitButton.click();
          }

          // –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏–∏
          await this.delay(3000);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ 2FA –∫–æ–¥
          const authCodeSelectors = [
            'input[name="twofactorcode"]',
            'input[id="twofactorcode_entry"]',
            'input[placeholder*="–∫–æ–¥"]',
            'input[placeholder*="code"]'
          ];

          let needsMobileAuth = false;
          let authCodeField = null;

          for (const selector of authCodeSelectors) {
            try {
              authCodeField = await this.page.$(selector);
              if (authCodeField) {
                needsMobileAuth = true;
                logger.info(`üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ 2FA, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ: ${selector}`);
                break;
              }
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }

          if (needsMobileAuth && authCodeField) {
            logger.info('üì± –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ 2FA...');

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ 2FA
            const SteamTotp = require('steam-totp');
            const authCode = SteamTotp.generateAuthCode(this.steamConfig.sharedSecret);

            logger.info(`üî¢ –í–≤–æ–¥–∏–º 2FA –∫–æ–¥: ${authCode}`);

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –∫–æ–¥
            await authCodeField.focus();
            await authCodeField.click({ clickCount: 3 });
            await this.page.type('input[name="twofactorcode"], input[id="twofactorcode_entry"]', authCode, { delay: 100 });
            await this.delay(1000);

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA
            const confirmSelectors = [
              'button[type="submit"]',
              'input[type="submit"]',
              '.auth_button',
              '.btn_signin'
            ];

            let confirmButton = null;

            for (const selector of confirmSelectors) {
              try {
                confirmButton = await this.page.$(selector);
                if (confirmButton) {
                  const isVisible = await confirmButton.isIntersectingViewport();
                  if (isVisible) {
                    break;
                  }
                }
              } catch (e) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
              }
            }

            if (confirmButton) {
              await confirmButton.click();
            } else {
              await this.page.keyboard.press('Enter');
            }
          }

          // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
          await this.delay(5000);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –º—ã
          const isLoggedIn = await this.checkLoginStatus();

          if (isLoggedIn) {
            this.isLoggedIn = true;
            loginSuccess = true;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            await this.saveSession();

            logger.info('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Steam');
            break;
          } else {
            logger.warn(`‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ —á–µ—Ä–µ–∑ ${loginUrl}`);
          }

        } catch (error) {
          logger.warn(`–û—à–∏–±–∫–∞ –Ω–∞ ${loginUrl}: ${error.message}`);
          continue;
        }
      }

      if (!loginSuccess) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ö–æ–¥–∞');
      }

      return true;

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  async searchAndBuyItem(itemName, maxPrice = null) {
    try {
      logger.info(`üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemName}`);

      if (!this.isLoggedIn) {
        await this.login();
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Steam Market
      const marketUrl = `https://steamcommunity.com/market/listings/730/${encodeURIComponent(itemName)}`;
      logger.info(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${marketUrl}`);

      await this.page.goto(marketUrl, { waitUntil: 'networkidle2' });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
      await this.delay(3000);

      // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
      const listings = await this.page.$$('#searchResultsRows .market_listing_row');

      if (listings.length === 0) {
        return { success: false, message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }

      logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${listings.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const offers = [];

      for (let i = 0; i < Math.min(listings.length, 5); i++) {
        try {
          const listing = listings[i];

          // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
          const priceElement = await listing.$('.market_listing_price');
          if (!priceElement) continue;

          const priceText = await priceElement.evaluate(el => el.textContent.trim());
          const price = this.parsePrice(priceText);

          if (price > 0 && (!maxPrice || price <= maxPrice)) {
            // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
            const buyButton = await listing.$('.item_market_action_button');

            if (buyButton) {
              const buttonText = await buyButton.evaluate(el => el.textContent.trim());

              if (buttonText.includes('–ö—É–ø–∏—Ç—å')) {
                offers.push({
                  index: i,
                  price: price,
                  priceText: priceText,
                  element: listing,
                  buyButton: buyButton
                });

                logger.info(`üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${i + 1}: ${priceText} (${price} —Ä—É–±.)`);
              }
            }
          }
        } catch (err) {
          logger.warn(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ${i}: ${err.message}`);
        }
      }

      if (offers.length === 0) {
        return { success: false, message: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏' };
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –∏ –±–µ—Ä–µ–º —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ
      offers.sort((a, b) => a.price - b.price);
      const cheapestOffer = offers[0];

      logger.info(`üéØ –í—ã–±—Ä–∞–Ω–æ —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ: ${cheapestOffer.priceText}`);

      // –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
      const purchaseResult = await this.buyItem(cheapestOffer);

      if (purchaseResult.success) {
        return {
          success: true,
          item: {
            name: itemName,
            price: cheapestOffer.price,
            priceText: cheapestOffer.priceText,
            purchaseTime: new Date().toISOString()
          }
        };
      } else {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${purchaseResult.message}`
        };
      }

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞/–ø–æ–∫—É–ø–∫–∏: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  async buyItem(offer) {
    try {
      logger.info(`üí≥ –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∑–∞ ${offer.priceText}...`);

      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
      await offer.buyButton.click();

      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await this.delay(2000);

      // –ò—â–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∫—É–ø–∫–∏
      const dialogSelector = '.newmodal, .modal_frame, #BuyMarketListingDialog';
      await this.page.waitForSelector(dialogSelector, { timeout: 10000 });

      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
      const confirmButton = await this.page.$('#market_buynow_dialog_purchase');

      if (!confirmButton) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const altSelectors = [
          'input[value="–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"]',
          'button:contains("–ö—É–ø–∏—Ç—å")',
          '.btn_green_steamui'
        ];

        for (const selector of altSelectors) {
          const btn = await this.page.$(selector);
          if (btn) {
            confirmButton = btn;
            break;
          }
        }
      }

      if (!confirmButton) {
        throw new Error('–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      logger.info('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É...');

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
      await confirmButton.click();

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
      await this.delay(5000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const successMessage = await this.page.$('.market_dialog_success, .newmodal_content:contains("—É—Å–ø–µ—à–Ω–æ")');
      const errorMessage = await this.page.$('.market_dialog_error, .newmodal_content:contains("–æ—à–∏–±–∫–∞")');

      if (successMessage) {
        logger.info('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!');
        return { success: true };
      } else if (errorMessage) {
        const errorText = await errorMessage.evaluate(el => el.textContent);
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${errorText}`);
        return { success: false, message: errorText };
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        const insufficientFunds = await this.page.evaluate(() => {
          const errorElements = document.querySelectorAll('.market_dialog_error, .newmodal_content');
          return Array.from(errorElements).some(el => el.textContent.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'));
        });

        if (insufficientFunds) {
          return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Steam –∫–æ—à–µ–ª—å–∫–µ' };
        }

        logger.warn('‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏');
        return { success: false, message: '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏' };
      }

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer
   */
  async sendTradeOffer(tradeUrl, itemAssetIds = []) {
    try {
      logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer: ${tradeUrl}`);

      if (!this.isLoggedIn) {
        await this.login();
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
      await this.page.goto('https://steamcommunity.com/my/inventory/', {
        waitUntil: 'networkidle2'
      });

      await this.delay(3000);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –∏—Ö
      if (itemAssetIds.length > 0) {
        for (const assetId of itemAssetIds) {
          const itemSelector = `[data-id="${assetId}"]`;
          const item = await this.page.$(itemSelector);

          if (item) {
            await item.click();
            await this.delay(500);
            logger.info(`‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${assetId}`);
          } else {
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${assetId}`);
          }
        }
      } else {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        const items = await this.page.$$('.item.app730.context2');

        if (items.length > 0) {
          // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
          await items[0].click();
          await this.delay(500);
          logger.info('‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç');
        } else {
          return { success: false, message: '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' };
        }
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ trade URL
      await this.page.goto(tradeUrl, { waitUntil: 'networkidle2' });
      await this.delay(3000);

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã trade offer
      await this.page.waitForSelector('#trade_offer_create_dialog, .trade_area', { timeout: 15000 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å trade
      const readyToTrade = await this.page.$('.trade_offer_create_button');

      if (!readyToTrade) {
        return { success: false, message: '–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è trade offer –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer
      await readyToTrade.click();
      await this.delay(2000);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      const confirmButton = await this.page.$('.trade_offer_create_button:not([disabled])');

      if (confirmButton) {
        await confirmButton.click();
        await this.delay(3000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        const successUrl = this.page.url();

        if (successUrl.includes('tradeoffer')) {
          const tradeOfferId = successUrl.match(/tradeoffer\/(\d+)/);

          logger.info('‚úÖ Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

          return {
            success: true,
            tradeOfferId: tradeOfferId ? tradeOfferId[1] : null,
            url: successUrl
          };
        }
      }

      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É trade offer' };

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Steam –∫–æ—à–µ–ª—å–∫–∞
   */
  async checkWalletBalance() {
    try {
      logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Steam –∫–æ—à–µ–ª—å–∫–∞...');

      if (!this.isLoggedIn) {
        await this.login();
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–∫–∫–∞—É–Ω—Ç
      await this.page.goto('https://store.steampowered.com/account/', {
        waitUntil: 'networkidle2'
      });

      // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
      const balanceElement = await this.page.$('.accountData .price, .wallet_balance .price');

      if (balanceElement) {
        const balanceText = await balanceElement.evaluate(el => el.textContent.trim());
        const balance = this.parsePrice(balanceText);

        logger.info(`üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${balanceText} (${balance} —Ä—É–±.)`);

        return {
          success: true,
          balance: balance,
          balanceText: balanceText
        };
      } else {
        return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ' };
      }

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async checkLoginStatus() {
    try {
      const currentUrl = this.page.url();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (currentUrl.includes('steamcommunity.com') && !currentUrl.includes('login')) {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const authSelectors = [
          '.playerAvatar',
          '.account_pulldown',
          '.profile_small_header_avatar',
          '.user_avatar',
          '.global_header .playerAvatar',
          '.account_dropdown',
          '#account_pulldown'
        ];

        for (const selector of authSelectors) {
          try {
            const element = await this.page.$(selector);
            if (element) {
              logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${selector}`);
              return true;
            }
          } catch (e) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }
        }
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
      const loginSelectors = [
        'a[href*="login"]',
        '.login_btn',
        '.btn_signin'
      ];

      for (const selector of loginSelectors) {
        try {
          const loginElement = await this.page.$(selector);
          if (loginElement) {
            logger.info(`‚ùå –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: ${selector}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
            return false;
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }

      // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
      if (currentUrl.includes('/my/') || currentUrl.includes('/profiles/')) {
        logger.info('‚úÖ URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return true;
      }

      return false;
    } catch (error) {
      logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  async saveSession() {
    try {
      const sessionDir = path.dirname(this.sessionPath);
      if (!fs.existsSync(sessionDir)) {
        fs.mkdirSync(sessionDir, { recursive: true });
      }

      const cookies = await this.page.cookies();
      const sessionData = {
        cookies: cookies,
        timestamp: Date.now(),
        url: this.page.url()
      };

      fs.writeFileSync(this.sessionPath, JSON.stringify(sessionData, null, 2));
      logger.info('üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é: ${error.message}`);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async loadSession() {
    try {
      if (!fs.existsSync(this.sessionPath)) {
        return false;
      }

      const sessionData = JSON.parse(fs.readFileSync(this.sessionPath, 'utf8'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (24 —á–∞—Å–∞)
      const sessionAge = Date.now() - sessionData.timestamp;
      if (sessionAge > 24 * 60 * 60 * 1000) {
        logger.info('üïê –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        return false;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
      await this.page.setCookie(...sessionData.cookies);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Steam Community –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.page.goto('https://steamcommunity.com/', { waitUntil: 'networkidle2' });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã
      const isLoggedIn = await this.checkLoginStatus();

      if (isLoggedIn) {
        this.isLoggedIn = true;
        logger.info('‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        return true;
      } else {
        logger.info('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
        return false;
      }

    } catch (error) {
      logger.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: ${error.message}`);
      return false;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  parsePrice(priceText) {
    if (!priceText) return 0;

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
    const cleanText = priceText.replace(/[^\d,.-]/g, '');

    // –ò—â–µ–º —á–∏—Å–ª–∞
    const matches = cleanText.match(/(\d+(?:[,.]?\d+)?)/);

    if (matches) {
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø–∞—Ä—Å–∏–º
      const price = parseFloat(matches[1].replace(',', '.'));
      return isNaN(price) ? 0 : Math.round(price);
    }

    return 0;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  async takeScreenshot(name = 'debug') {
    try {
      const screenshotPath = path.join(__dirname, '../screenshots');
      if (!fs.existsSync(screenshotPath)) {
        fs.mkdirSync(screenshotPath, { recursive: true });
      }

      const filename = `${name}_${Date.now()}.png`;
      const filepath = path.join(screenshotPath, filename);

      await this.page.screenshot({ path: filepath, fullPage: true });
      logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);

      return filepath;
    } catch (error) {
      logger.warn(`–û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`);
      return null;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
   */
  async shutdown() {
    try {
      logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Puppeteer...');

      if (this.page) {
        await this.page.close();
      }

      if (this.browser) {
        await this.browser.close();
      }

      logger.info('‚úÖ Puppeteer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Puppeteer: ${error.message}`);
    }
  }
}

module.exports = SteamPuppeteerService;
