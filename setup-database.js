// –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–ª—è
require('dotenv').config();
const { Sequelize } = require('sequelize');
const { exec } = require('child_process');
const path = require('path');
const util = require('util');

const execAsync = util.promisify(exec);

console.log('üöÄ –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
console.log('='.repeat(50));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  username: String(process.env.DB_USERNAME || 'postgres'),
  password: String(process.env.DB_PASSWORD || ''),
  database: String(process.env.DB_DATABASE || 'chibox-game'),
  host: String(process.env.DB_HOST || '127.0.0.1'),
  dialect: String(process.env.DB_DIALECT || 'postgres')
};

console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.database}`);
console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbConfig.username}`);
console.log(`   –•–æ—Å—Ç: ${dbConfig.host}`);

async function setupDatabase() {
  try {
    console.log('\nüìù –®–∞–≥ 1: –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    await resetDatabase();

    console.log('\nüìù –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    await installDependencies();

    console.log('\nüìù –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π');
    await runMigrations();

    console.log('\nüìù –®–∞–≥ 4: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    await runSeeders();

    console.log('\nüìù –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü');
    await checkTables();

    console.log('\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–ê!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
    process.exit(1);
  }
}

async function resetDatabase() {
  console.log('   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');

  const adminDb = new Sequelize('postgres', dbConfig.username, dbConfig.password, {
    host: dbConfig.host,
    dialect: dbConfig.dialect,
    logging: false
  });

  try {
    await adminDb.authenticate();
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    try {
      await adminDb.query(`
        SELECT pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity
        WHERE pg_stat_activity.datname = '${dbConfig.database}'
        AND pid <> pg_backend_pid();
      `);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await adminDb.query(`DROP DATABASE IF EXISTS "${dbConfig.database}";`);
    console.log('   ‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await adminDb.query(`CREATE DATABASE "${dbConfig.database}";`);
    console.log('   ‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');

  } finally {
    await adminDb.close();
  }
}

async function installDependencies() {
  try {
    console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
    const { stdout } = await execAsync('npm list sequelize-cli', { cwd: process.cwd() });
    console.log('   ‚úÖ sequelize-cli —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.log('   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ sequelize-cli...');
    await execAsync('npm install -g sequelize-cli', { cwd: process.cwd() });
    console.log('   ‚úÖ sequelize-cli —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

async function runMigrations() {
  console.log('   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');

  try {
    const { stdout, stderr } = await execAsync('npx sequelize-cli db:migrate', {
      cwd: process.cwd(),
      env: { ...process.env }
    });

    console.log('   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    if (stdout) {
      console.log('   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', stdout.trim());
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    if (error.stdout) console.log('   üìÑ STDOUT:', error.stdout);
    if (error.stderr) console.log('   üìÑ STDERR:', error.stderr);
    throw error;
  }
}

async function runSeeders() {
  console.log('   –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

  try {
    const { stdout } = await execAsync('npx sequelize-cli db:seed:all', {
      cwd: process.cwd(),
      env: { ...process.env }
    });

    console.log('   ‚úÖ –°–∏–¥–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    if (stdout) {
      console.log('   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', stdout.trim());
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∏–¥–µ—Ä–æ–≤ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–¥–µ—Ä–æ–≤):', error.message);
    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–∏–¥–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  }
}

async function checkTables() {
  console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');

  const db = new Sequelize(dbConfig.database, dbConfig.username, dbConfig.password, {
    host: dbConfig.host,
    dialect: dbConfig.dialect,
    logging: false
  });

  try {
    const tables = await db.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `, { type: Sequelize.QueryTypes.SELECT });

    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    console.log('   üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:');

    tables.forEach((table, index) => {
      console.log(`      ${index + 1}. ${table.table_name}`);
    });

    if (tables.length === 0) {
      throw new Error('–¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.');
    }

  } finally {
    await db.close();
  }
}

// –ó–∞–ø—É—Å–∫
setupDatabase().catch(console.error);
