const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const db = require('../models');
const { logger } = require('../utils/logger');
const { createSteamLoginNotification } = require('../utils/notificationHelper');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Steam OAuth
const STEAM_API_KEY = process.env.STEAM_API_KEY;
const STEAM_RETURN_URL = process.env.STEAM_RETURN_URL || 'http://localhost:3000/api/v1/auth/steam/return';
const STEAM_REALM = process.env.STEAM_REALM || 'http://localhost:3000/';

if (!STEAM_API_KEY) {
  logger.warn('STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
}

// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–π
passport.serializeUser((user, done) => {
  // –î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Steam –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á
  if (user.isLinkingProcess) {
    done(null, 'linking_process');
  } else {
    done(null, user.id);
  }
});

passport.deserializeUser(async (id, done) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏ Steam
    if (id === 'linking_process') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
      return done(null, { isLinkingProcess: true });
    }

    // –û–±—ã—á–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findByPk(id, {
      attributes: { exclude: ['password'] }
    });
    done(null, user);
  } catch (error) {
    done(error, null);
  }
});

// Steam OAuth —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if (STEAM_API_KEY) {
  passport.use('steam', new SteamStrategy({
    returnURL: STEAM_RETURN_URL,
    realm: STEAM_REALM,
    apiKey: STEAM_API_KEY,
    passReqToCallback: true
  },
  async (req, identifier, profile, done) => {
    try {
      const steamId = identifier.split('/').pop();

      logger.info('Steam OAuth callback:', {
        steamId,
        displayName: profile.displayName,
        username: profile._json?.personaname,
        isLinking: !!req.session?.linkUserId
      });

      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Steam –≤ —Å–µ—Å—Å–∏–∏
      if (req.session && req.session.linkUserId) {
        req.session.steamLinkData = {
          steam_id: steamId,
          steam_profile: profile._json,
          steam_avatar: profile._json?.avatarfull || profile._json?.avatarmedium || profile._json?.avatar,
          steam_profile_url: profile._json?.profileurl
        };
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
        return done(null, { isLinkingProcess: true });
      }

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Steam ID
      let user = await db.User.findOne({
        where: { steam_id: steamId }
      });

      if (user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        const avatarUrl = profile._json?.avatarfull || profile._json?.avatarmedium || profile._json?.avatar;
        const newUsername = profile._json?.personaname || user.username;

        console.log('üîÑ Updating existing user Steam data:', {
          userId: user.id,
          currentUsername: user.username,
          newUsername: newUsername,
          steamId,
          avatarUrl,
          profileUrl: profile._json?.profileurl,
          displayName: profile.displayName,
          fullProfile: profile._json
        });

        const updateData = {
          username: newUsername,
          steam_profile: profile._json,
          steam_avatar: avatarUrl,
          steam_profile_url: profile._json?.profileurl,
          last_login_date: new Date()
        };

        console.log('üìù Update data:', updateData);

        await user.update(updateData);

        console.log('‚úÖ Steam data updated successfully');
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ Steam, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Steam
        try {
          await createSteamLoginNotification(user.id, user.username);
        } catch (notificationError) {
          logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Steam:', notificationError.message);
        }

        return done(null, user);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = profile._json?.personaname || `steam_user_${steamId.slice(-8)}`;
        const email = `${steamId}@steam.local`; // –í—Ä–µ–º–µ–Ω–Ω—ã–π email
        const avatarUrl = profile._json?.avatarfull || profile._json?.avatarmedium || profile._json?.avatar;

        console.log('Creating new Steam user:', {
          username,
          steamId,
          avatarUrl,
          profileUrl: profile._json?.profileurl,
          photos: profile.photos
        });

        user = await db.User.create({
          username: username,
          email: email,
          password: 'steam_oauth', // –ü–∞—Ä–æ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          steam_id: steamId,
          steam_profile: profile._json,
          steam_avatar: avatarUrl,
          steam_profile_url: profile._json?.profileurl,
          auth_provider: 'steam',
          is_email_verified: true, // Steam –∞–∫–∫–∞—É–Ω—Ç—ã —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
          last_login_date: new Date(),
          registration_date: new Date()
        });

        logger.info(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ Steam: ${username} (${steamId})`);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Steam –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await createSteamLoginNotification(user.id, user.username);
        } catch (notificationError) {
          logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Steam –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', notificationError.message);
        }

        return done(null, user);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ Steam OAuth:', error);
      return done(error, null);
    }
  }));

  // Steam OAuth —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  passport.use('steam-link', new SteamStrategy({
    returnURL: process.env.STEAM_LINK_RETURN_URL || 'http://localhost:3000/api/v1/auth/link-steam/return',
    realm: STEAM_REALM,
    apiKey: STEAM_API_KEY,
    passReqToCallback: true
  },
  async (req, identifier, profile, done) => {
    try {
      const steamId = identifier.split('/').pop();

      logger.info('Steam Link OAuth callback:', {
        steamId,
        displayName: profile.displayName,
        username: profile._json?.personaname,
        linkUserId: req.session?.linkUserId
      });

      // –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Steam –≤ —Å–µ—Å—Å–∏–∏
      if (req.session && req.session.linkUserId) {
        req.session.steamLinkData = {
          steam_id: steamId,
          steam_profile: profile._json,
          steam_avatar: profile._json?.avatarfull || profile._json?.avatarmedium || profile._json?.avatar,
          steam_profile_url: profile._json?.profileurl
        };
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
        return done(null, { isLinkingProcess: true });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç linkUserId –≤ —Å–µ—Å—Å–∏–∏, —ç—Ç–æ –æ—à–∏–±–∫–∞
        logger.error('Steam Link: linkUserId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏');
        return done(new Error('–°–µ—Å—Å–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∏—Å—Ç–µ–∫–ª–∞'), null);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ Steam Link OAuth:', error);
      return done(error, null);
    }
  }));
}

module.exports = passport;
