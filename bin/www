#!/usr/bin/env node
// ==== HTTPS + SOCKET.IO СТАРТЕР ДЛЯ EXPRESS ====

const fs = require('fs');
const https = require('https');
const path = require('path');
const socketIO = require('socket.io');
const app = require('../app');

// Получаем порт
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// === Определяем путь к ключу и сертификату ===
function getSSLOptions() {
  const certPath = process.env.SSL_CERT || path.join(__dirname, '../server.cert');
  const keyPath = process.env.SSL_KEY || path.join(__dirname, '../server.key');
  return {
    cert: fs.readFileSync(certPath),
    key: fs.readFileSync(keyPath),
  };
}
const sslOptions = getSSLOptions();

// === Создаём HTTPS сервер ===
const server = https.createServer(sslOptions, app);

// === Подключаем socket.io ===
const io = socketIO(server);
io.on('connection', (socket) => {
  console.log('Socket.IO: Пользователь подключился');
   socket.emit('hello', { message: 'Привет через WebSocket!' });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// === Служебные функции ===
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' требует повышенных привилегий');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' уже используется');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'порт ' + addr.port;
  console.log('HTTPS сервер запущен на ' + bind);
  console.log('Socket.IO готов.');
  console.log('Для боевого ssl просто поменяй сертификаты/пути через ENV переменные (SSL_KEY, SSL_CERT) — код менять не потребуется!');
}