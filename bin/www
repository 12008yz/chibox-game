#!/usr/bin/env node
// ==== HTTPS + SOCKET.IO СТАРТЕР ДЛЯ EXPRESS ====

const fs = require('fs');
const http = require('http');
const path = require('path');
const socketIO = require('socket.io');
const app = require('../app');

// Получаем порт
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// === Определяем путь к ключу и сертификату ===
function getSSLOptions() {
  const certPath = process.env.SSL_CERT || path.join(__dirname, '../server.cert');
  const keyPath = process.env.SSL_KEY || path.join(__dirname, '../server.key');
  return {
    cert: fs.readFileSync(certPath),
    key: fs.readFileSync(keyPath),
  };
}
const sslOptions = getSSLOptions();

// === Создаём HTTP сервер (временно, для упрощения туннелирования) ===
const server = http.createServer(app);

// === Подключаем socket.io ===
const io = socketIO(server, {
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? ['https://your-domain.com'] 
      : ['http://localhost:5173', 'http://localhost:3000', 'http://127.0.0.1:5173'],
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// Улучшенная система подсчета онлайн пользователей
const userSessions = new Map(); // Хранит все сессии пользователей
const userConnections = new Map(); // Хранит активные подключения для каждого пользователя

// Функция для отправки обновления количества пользователей всем подключенным клиентам
function broadcastOnlineUsers() {
  const onlineUsers = userSessions.size;
  io.emit('onlineUsersUpdate', { count: onlineUsers });
  console.log(`Уникальных пользователей онлайн: ${onlineUsers}`);
}

// Функция для отправки живого падения всем подключенным клиентам
function broadcastLiveDrop(dropData) {
  io.emit('liveDrop', dropData);
  console.log(`Live Drop отправлен: ${dropData.user.username} получил ${dropData.item.name}`);
}

// Функция для получения уникального идентификатора пользователя
function getUserId(socket) {
  // Пытаемся получить user ID из сессии
  const session = socket.request.session;
  if (session && session.user && session.user.id) {
    return `user_${session.user.id}`;
  }
  
  // Если нет авторизованного пользователя, используем IP + User-Agent
  const ip = socket.handshake.address;
  const userAgent = socket.handshake.headers['user-agent'] || 'unknown';
  const fingerprint = require('crypto').createHash('md5').update(ip + userAgent).digest('hex');
  return `guest_${fingerprint}`;
}

io.on('connection', (socket) => {
  const userId = getUserId(socket);
  
  // Проверяем, первое ли это подключение пользователя
  let isNewUser = false;
  if (!userSessions.has(userId)) {
    userSessions.set(userId, {
      id: userId,
      firstConnectedAt: new Date(),
      lastActivity: new Date()
    });
    isNewUser = true;
  } else {
    // Обновляем время последней активности
    userSessions.get(userId).lastActivity = new Date();
  }
  
  // Добавляем подключение в список активных подключений пользователя
  if (!userConnections.has(userId)) {
    userConnections.set(userId, new Set());
  }
  userConnections.get(userId).add(socket.id);
  
  if (isNewUser) {
    console.log(`Socket.IO: Новый пользователь подключился (${userId}). Уникальных онлайн: ${userSessions.size}`);
  } else {
    console.log(`Socket.IO: Пользователь переподключился (${userId}). Соединений: ${userConnections.get(userId).size}`);
  }
  
  // Отправляем приветственное сообщение новому пользователю
  socket.emit('hello', { message: 'Привет через WebSocket!' });
  
  // Отправляем текущее количество пользователей
  if (isNewUser) {
    broadcastOnlineUsers();
  } else {
    // Для переподключений отправляем только текущему сокету
    socket.emit('onlineUsersUpdate', { count: userSessions.size });
  }

  // Обработка отключения
  socket.on('disconnect', (reason) => {
    const connections = userConnections.get(userId);
    if (connections) {
      connections.delete(socket.id);
      
      // Если у пользователя больше нет активных подключений
      if (connections.size === 0) {
        userConnections.delete(userId);
        userSessions.delete(userId);
        console.log(`Socket.IO: Пользователь полностью отключился (${userId}, ${reason}). Уникальных онлайн: ${userSessions.size}`);
        broadcastOnlineUsers();
      } else {
        console.log(`Socket.IO: Одно из подключений пользователя закрыто (${userId}, ${reason}). Активных соединений: ${connections.size}`);
      }
    }
  });

  // Обработка ошибок подключения
  socket.on('error', (error) => {
    console.error('Socket.IO error:', error);
  });
});

// Очистка неактивных пользователей каждые 5 минут
setInterval(() => {
  const now = new Date();
  const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
  
  let cleanedUsers = 0;
  for (const [userId, userData] of userSessions.entries()) {
    if (userData.lastActivity < fiveMinutesAgo) {
      userSessions.delete(userId);
      userConnections.delete(userId);
      cleanedUsers++;
    }
  }
  
  if (cleanedUsers > 0) {
    console.log(`Очищено неактивных пользователей: ${cleanedUsers}. Онлайн: ${userSessions.size}`);
    broadcastOnlineUsers();
  }
}, 5 * 60 * 1000);

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

// === Служебные функции ===
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' требует повышенных привилегий');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' уже используется');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'порт ' + addr.port;
  console.log('HTTP сервер запущен на ' + bind);
  console.log('Socket.IO готов.');
  console.log('Для боевого ssl просто поменяй сертификаты/пути через ENV переменные (SSL_KEY, SSL_CERT) — код менять не потребуется!');
}

// Инициализируем LiveDrop сервис
const { initLiveDropService } = require('../services/liveDropService');
initLiveDropService(broadcastLiveDrop);

// Экспортируем io и функцию для использования в других модулях
module.exports = { io, broadcastLiveDrop };