#!/usr/bin/env node

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Steam withdrawal —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 */

const SteamWithdrawalService = require('../services/steamWithdrawalService');
const SteamMarketService = require('../services/steamMarketService');
const { Withdrawal } = require('../models');
const winston = require('winston');
const cron = require('node-cron');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    }),
    new winston.transports.File({
      filename: 'steam-withdrawal-processor.log',
      format: winston.format.json()
    })
  ],
});

class SteamWithdrawalProcessor {
  constructor() {
    this.withdrawalService = new SteamWithdrawalService();
    this.isProcessing = false;
    this.lastProcessTime = null;
    this.stats = {
      totalProcessed: 0,
      successfulWithdrawals: 0,
      failedWithdrawals: 0,
      totalCost: 0
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal
   */
  async processWithdrawals() {
    if (this.isProcessing) {
      logger.warn('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    this.isProcessing = true;
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Steam withdrawal...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending withdrawal
      const pendingWithdrawals = await this.getPendingWithdrawals();

      if (!pendingWithdrawals.length) {
        logger.info('üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }

      logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingWithdrawals.length} withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É
      for (const withdrawal of pendingWithdrawals) {
        await this.processSingleWithdrawal(withdrawal);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        await this.delay(10000); // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É withdrawal
      }

      logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö withdrawal –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.lastProcessTime = new Date();

    } catch (error) {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ withdrawal
   */
  async processSingleWithdrawal(withdrawal) {
    const startTime = Date.now();
    logger.info(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal #${withdrawal.id}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ withdrawal
      const withdrawalData = await this.getWithdrawalDetails(withdrawal.id);

      if (!withdrawalData) {
        await this.markWithdrawalFailed(withdrawal, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ withdrawal');
        return;
      }

      const { user, items } = withdrawalData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º trade URL
      if (!user.steam_trade_url) {
        await this.markWithdrawalFailed(withdrawal, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trade URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await withdrawal.update({
        status: 'processing',
        tracking_data: {
          ...withdrawal.tracking_data,
          processing_start: new Date().toISOString(),
          processor_version: '2.0'
        }
      });

      // –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
      const purchaseResults = await this.purchaseItems(items);

      if (!purchaseResults.success) {
        await this.markWithdrawalFailed(withdrawal, purchaseResults.message);
        return;
      }

      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      logger.info('‚è±Ô∏è –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ...');
      await this.delay(30000); // 30 —Å–µ–∫—É–Ω–¥

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer
      const tradeResult = await this.sendTradeOffer(user.steam_trade_url, purchaseResults.items);

      if (tradeResult.success) {
        // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω trade
        await withdrawal.update({
          status: 'trade_sent',
          tracking_data: {
            ...withdrawal.tracking_data,
            trade_offer_id: tradeResult.tradeOfferId,
            trade_sent_time: new Date().toISOString(),
            purchase_results: purchaseResults,
            processing_time_ms: Date.now() - startTime
          }
        });

        this.stats.successfulWithdrawals++;
        this.stats.totalCost += purchaseResults.totalCost;

        logger.info(`‚úÖ Withdrawal #${withdrawal.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. Trade ID: ${tradeResult.tradeOfferId}`);
      } else {
        await this.markWithdrawalFailed(withdrawal, `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade: ${tradeResult.message}`);
      }

    } catch (error) {
      logger.error(`üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal #${withdrawal.id}:`, error);
      await this.markWithdrawalFailed(withdrawal, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }

    this.stats.totalProcessed++;
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è withdrawal
   */
  async purchaseItems(items) {
    logger.info(`üõí –ü–æ–∫—É–ø–∞–µ–º ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤...`);

    const purchasedItems = [];
    let totalCost = 0;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam Market —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
      const config = await SteamMarketService.loadConfigFromBot();
      const steamMarket = new SteamMarketService(config);

      for (const userItem of items) {
        const item = userItem.item;
        const marketHashName = item.steam_market_hash_name || item.name;
        const maxPrice = item.price * 1.2; // –ú–∞–∫—Å–∏–º—É–º 120% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã

        logger.info(`üîç –ü–æ–∫—É–ø–∞–µ–º: ${marketHashName} (–º–∞–∫—Å. ${maxPrice} —Ä—É–±.)`);

        const purchaseResult = await steamMarket.purchaseItemFromMarket(marketHashName, maxPrice);

        if (purchaseResult.success) {
          purchasedItems.push({
            item_id: item.id,
            market_hash_name: marketHashName,
            purchase_price: purchaseResult.item.purchasePrice,
            purchase_time: purchaseResult.item.purchaseTime,
            asset_id: purchaseResult.item.assetId
          });

          totalCost += purchaseResult.item.purchasePrice;
          logger.info(`‚úÖ ${marketHashName} –∫—É–ø–ª–µ–Ω –∑–∞ ${purchaseResult.item.purchasePrice} —Ä—É–±.`);
        } else {
          logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ${marketHashName}: ${purchaseResult.message}`);
          return {
            success: false,
            message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ${marketHashName}: ${purchaseResult.message}`
          };
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        await this.delay(5000);
      }

      return {
        success: true,
        items: purchasedItems,
        totalCost: totalCost,
        count: purchasedItems.length
      };

    } catch (error) {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
      return {
        success: false,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error.message}`
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer
   */
  async sendTradeOffer(tradeUrl, purchasedItems) {
    try {
      logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withdrawal service –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ trade
      const result = await this.withdrawalService.sendTradeOffer(tradeUrl, purchasedItems);

      return result;

    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer:', error);
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ pending withdrawal
   */
  async getPendingWithdrawals() {
    try {
      return await Withdrawal.findAll({
        where: {
          status: 'pending',
          withdrawal_type: 'steam'
        },
        order: [['created_at', 'ASC']],
        limit: 10 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞ —Ä–∞–∑
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending withdrawal:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ withdrawal
   */
  async getWithdrawalDetails(withdrawalId) {
    try {
      const { User, UserInventory, Item } = require('../models');

      return await Withdrawal.findByPk(withdrawalId, {
        include: [
          {
            model: User,
            attributes: ['id', 'username', 'steam_trade_url'],
            as: 'user'
          },
          {
            model: UserInventory,
            attributes: ['id', 'item_id'],
            as: 'items',
            include: [
              {
                model: Item,
                attributes: ['id', 'name', 'steam_market_hash_name', 'price'],
                as: 'item'
              }
            ]
          }
        ]
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö withdrawal ${withdrawalId}:`, error);
      return null;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ withdrawal –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ
   */
  async markWithdrawalFailed(withdrawal, reason) {
    try {
      await withdrawal.update({
        status: 'failed',
        tracking_data: {
          ...withdrawal.tracking_data,
          failure_reason: reason,
          failure_time: new Date().toISOString()
        }
      });

      this.stats.failedWithdrawals++;
      logger.error(`‚ùå Withdrawal #${withdrawal.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π: ${reason}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ withdrawal #${withdrawal.id}:`, error);
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      ...this.stats,
      lastProcessTime: this.lastProcessTime,
      isProcessing: this.isProcessing
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  startScheduler() {
    logger.info('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ withdrawal (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)...');

    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    cron.schedule('*/5 * * * *', async () => {
      logger.info('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö withdrawal...');
      await this.processWithdrawals();
    });

    // –ö–∞–∂–¥—ã–π —á–∞—Å –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cron.schedule('0 * * * *', () => {
      const stats = this.getStats();
      logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ withdrawal –∑–∞ —á–∞—Å:', stats);
    });

    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  async shutdown() {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã withdrawal processor...');

    if (this.withdrawalService && this.withdrawalService.steamBot) {
      await this.withdrawalService.steamBot.shutdown();
    }

    logger.info('‚úÖ Withdrawal processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function processOnce() {
  const processor = new SteamWithdrawalProcessor();

  try {
    await processor.processWithdrawals();
    logger.info('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', processor.getStats());
  } catch (error) {
    logger.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
  } finally {
    await processor.shutdown();
    process.exit(0);
  }
}

async function startScheduler() {
  const processor = new SteamWithdrawalProcessor();

  try {
    processor.startScheduler();

    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await processor.processWithdrawals();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      logger.info('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      await processor.shutdown();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      logger.info('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      await processor.shutdown();
      process.exit(0);
    });

    logger.info('üéØ Withdrawal processor –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞');

  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    await processor.shutdown();
    process.exit(1);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const command = process.argv[2];

  switch (command) {
    case 'once':
      processOnce();
      break;
    case 'daemon':
    case 'scheduler':
      startScheduler();
      break;
    default:
      logger.info('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      logger.info('  node process-steam-withdrawals-improved.js once     - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
      logger.info('  node process-steam-withdrawals-improved.js daemon   - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞');
      process.exit(1);
  }
}

module.exports = SteamWithdrawalProcessor;
