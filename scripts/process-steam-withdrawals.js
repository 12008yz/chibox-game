#!/usr/bin/env node

/**
 * –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Steam Market
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π CS.Money –ø–æ–¥—Ö–æ–¥
 */

const SteamWithdrawalService = require('../services/steamWithdrawalService');
const winston = require('winston');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'steam-withdrawal-processor.log' })
  ],
});

// Lock —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
const LOCK_FILE = path.join(__dirname, '../.lock-steam-withdrawals');

class SteamWithdrawalProcessor {
  constructor() {
    this.withdrawalService = new SteamWithdrawalService();
    this.isProcessing = false;
    this.startTime = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞
   */
  checkLockFile() {
    if (fs.existsSync(LOCK_FILE)) {
      const lockData = fs.readFileSync(LOCK_FILE, 'utf8');
      const lockTime = new Date(lockData);
      const now = new Date();

      // –ï—Å–ª–∏ lock —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (now - lockTime > 30 * 60 * 1000) {
        logger.warn('–£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª');
        fs.unlinkSync(LOCK_FILE);
        return false;
      }

      return true;
    }
    return false;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ lock —Ñ–∞–π–ª–∞
   */
  createLockFile() {
    fs.writeFileSync(LOCK_FILE, new Date().toISOString());
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ lock —Ñ–∞–π–ª–∞
   */
  removeLockFile() {
    if (fs.existsSync(LOCK_FILE)) {
      fs.unlinkSync(LOCK_FILE);
      logger.info('Lock —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
   */
  formatDuration(startTime, endTime) {
    const duration = (endTime - startTime) / 1000;
    return `${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processWithdrawals() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª
    if (this.checkLockFile()) {
      logger.warn('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫');
      return false;
    }

    // –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
    this.createLockFile();
    this.isProcessing = true;
    this.startTime = new Date();

    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ Steam Market...');
      logger.info(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${this.startTime.toISOString()}`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
      const result = await this.withdrawalService.processAllPendingWithdrawals();

      const endTime = new Date();
      const duration = this.formatDuration(this.startTime, endTime);

      if (result.success) {
        logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        logger.info(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: ${result.processed}`);
        logger.info(`   - –£—Å–ø–µ—à–Ω–æ: ${result.successful}`);
        logger.info(`   - –° –æ—à–∏–±–∫–∞–º–∏: ${result.failed}`);
        logger.info(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}`);

        // –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if (result.failed > 0) {
          logger.warn(`‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ Steam Market. –° –æ—à–∏–±–∫–∞–º–∏: ${result.failed} –∏–∑ ${result.processed}`);
        } else {
          logger.info(`üéâ –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
        }

        return true;
      } else {
        logger.error('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
        logger.error(`üí• –û—à–∏–±–∫–∞: ${result.message}`);
        logger.error(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}`);

        logger.error('üö® –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï [ERROR]: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ Steam Market');

        return false;
      }

    } catch (error) {
      const endTime = new Date();
      const duration = this.formatDuration(this.startTime, endTime);

      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:', error);
      logger.error(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${duration}`);
      logger.error('üö® –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï [CRITICAL]: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ withdrawal');

      return false;

    } finally {
      this.isProcessing = false;
      this.removeLockFile();

      const endTime = new Date();
      logger.info('üìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
      logger.info(`    –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${this.startTime.toISOString()}`);
      logger.info(`    –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${endTime.toISOString()}`);
      logger.info(`    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.formatDuration(this.startTime, endTime)}`);
    }
  }

  /**
   * Graceful shutdown
   */
  setupGracefulShutdown() {
    const signals = ['SIGTERM', 'SIGINT'];

    signals.forEach(signal => {
      process.on(signal, () => {
        logger.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);

        if (this.isProcessing) {
          logger.info('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
          // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
          setTimeout(() => {
            this.removeLockFile();
            process.exit(0);
          }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ graceful shutdown
        } else {
          this.removeLockFile();
          process.exit(0);
        }
      });
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async function runOnce() {
  const processor = new SteamWithdrawalProcessor();
  processor.setupGracefulShutdown();

  const success = await processor.processWithdrawals();
  process.exit(success ? 0 : 1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç)
async function runMonitoring(intervalMinutes = 5) {
  logger.info(`üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ withdrawal (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes} –º–∏–Ω—É—Ç)`);

  const processor = new SteamWithdrawalProcessor();
  processor.setupGracefulShutdown();

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
  await processor.processWithdrawals();

  // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  setInterval(async () => {
    if (!processor.isProcessing) {
      await processor.processWithdrawals();
    } else {
      logger.info('‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }, intervalMinutes * 60 * 1000);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
const args = process.argv.slice(2);

if (args.includes('--monitor')) {
  const interval = parseInt(args[args.indexOf('--monitor') + 1]) || 5;
  runMonitoring(interval);
} else if (args.includes('--help')) {
  console.log('üîß Steam Withdrawal Processor');
  console.log('');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node process-steam-withdrawals.js           # –†–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫');
  console.log('  node process-steam-withdrawals.js --monitor [–º–∏–Ω—É—Ç—ã]  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  console.log('');
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node process-steam-withdrawals.js --monitor 10   # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
  console.log('  node process-steam-withdrawals.js --monitor       # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
} else {
  runOnce();
}
