/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏–≥—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * –¶–µ–ª—å: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ 20-25%
 */

const ProfitabilityCalculator = require('../utils/profitabilityCalculator');
const fs = require('fs');
const path = require('path');

class EconomyAnalyzer {
  constructor() {
    this.calculator = new ProfitabilityCalculator(0.225); // 22.5% —Ü–µ–ª–µ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏–∫–∏
   */
  analyzeEconomy() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –≠–ö–û–ù–û–ú–ò–ö–ò –ò–ì–†–´');
    console.log('=' * 50);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const analysis = this.calculator.analyzeCurrentEconomy();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.printSubscriptionAnalysis(analysis.subscriptions);
    this.printCaseAnalysis(analysis.cases);
    this.printFreeActivitiesAnalysis(analysis.freeActivities);
    this.printTradingAnalysis(analysis.trading);
    this.printOverallAnalysis(analysis.overall);

    return analysis;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  generateOptimizationPlan() {
    console.log('\nüìã –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–õ–Ø 20-25% –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò');
    console.log('=' * 50);

    const plan = this.calculator.generateOptimizationPlan();

    this.printOptimizationPlan(plan);

    return plan;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  printSubscriptionAnalysis(subscriptions) {
    console.log('\nüí∞ –ê–ù–ê–õ–ò–ó –ü–û–î–ü–ò–°–û–ö');
    console.log('-' * 30);

    for (const [tier, data] of Object.entries(subscriptions)) {
      console.log(`\n${tier.toUpperCase()}:`);
      console.log(`  –¶–µ–Ω–∞: ${data.monthlyPrice}‚ÇΩ/–º–µ—Å—è—Ü`);
      console.log(`  –ó–∞—Ç—Ä–∞—Ç—ã: ${data.monthlyCosts.toFixed(2)}‚ÇΩ/–º–µ—Å—è—Ü`);
      console.log(`    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–µ–π—Å—ã: ${data.dailyCaseCost.toFixed(2)}‚ÇΩ/–¥–µ–Ω—å √ó 30 = ${(data.dailyCaseCost * 30).toFixed(2)}‚ÇΩ`);
      console.log(`    - –ë–æ–Ω—É—Å –æ—Ç –¥—Ä–æ–ø–æ–≤: ${data.bonusValue.toFixed(2)}‚ÇΩ`);
      console.log(`    - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${data.freeActivitiesCost.toFixed(2)}‚ÇΩ`);
      console.log(`  –ü—Ä–∏–±—ã–ª—å: ${data.profit.toFixed(2)}‚ÇΩ`);
      console.log(`  –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(data.profitMargin * 100).toFixed(1)}%`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${data.isOptimal ? '‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò'}`);
      console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${data.recommendation}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤
   */
  printCaseAnalysis(cases) {
    console.log('\nüì¶ –ê–ù–ê–õ–ò–ó –ö–ï–ô–°–û–í');
    console.log('-' * 30);

    for (const [type, data] of Object.entries(cases)) {
      console.log(`\n${type.toUpperCase()}:`);
      console.log(`  –¶–µ–Ω–∞: ${data.price}‚ÇΩ`);
      console.log(`  –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data.expectedValue}‚ÇΩ`);
      console.log(`  –ü—Ä–∏–±—ã–ª—å: ${data.profit.toFixed(2)}‚ÇΩ`);
      console.log(`  –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(data.profitMargin * 100).toFixed(1)}%`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${data.isOptimal ? '‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò'}`);
      console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${data.recommendation}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   */
  printFreeActivitiesAnalysis(freeActivities) {
    console.log('\nüéÆ –ê–ù–ê–õ–ò–ó –ë–ï–°–ü–õ–ê–¢–ù–´–• –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô');
    console.log('-' * 30);

    for (const [activity, data] of Object.entries(freeActivities)) {
      console.log(`\n${activity.toUpperCase()}:`);
      console.log(`  –ß–∞—Å—Ç–æ—Ç–∞: ${data.frequency}`);
      if (data.maxReward) console.log(`  –ú–∞–∫—Å. –Ω–∞–≥—Ä–∞–¥–∞: ${data.maxReward}`);
      if (data.reward) console.log(`  –ù–∞–≥—Ä–∞–¥–∞: ${data.reward}`);
      if (data.winRate) console.log(`  –í–∏–Ω—Ä–µ–π—Ç: ${data.winRate}`);
      console.log(`  –î–Ω–µ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: ~${data.dailyCost.toFixed(2)}‚ÇΩ`);
      console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${data.recommendation}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  printTradingAnalysis(trading) {
    console.log('\nüí± –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´');
    console.log('-' * 30);

    console.log('\n–ü–†–û–î–ê–ñ–ê –ü–†–ï–î–ú–ï–¢–û–í:');
    console.log(`  –ö—É—Ä—Å: ${(trading.itemSales.sellRate * 100)}% –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π`);
    console.log(`  –ú–∞—Ä–∂–∞: ${(trading.itemSales.profitMargin * 100)}%`);
    console.log(`  –°—Ç–∞—Ç—É—Å: ${trading.itemSales.isOptimal ? '‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò'}`);
    console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${trading.itemSales.recommendation}`);

    console.log('\n–û–ë–ú–ï–ù –ù–ê –ü–û–î–ü–ò–°–ö–£:');
    console.log(`  Tier 1-2: ${trading.itemExchange.tier1_2.pricePerDay}‚ÇΩ/–¥–µ–Ω—å`);
    console.log(`  Tier 3: ${trading.itemExchange.tier3.pricePerDay}‚ÇΩ/–¥–µ–Ω—å`);
    console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${trading.itemExchange.recommendation}`);

    console.log('\n–ê–ü–ì–†–ï–ô–î–´:');
    console.log(`  –®–∞–Ω—Å—ã —É—Å–ø–µ—Ö–∞: ${trading.upgrades.averageSuccessRate}`);
    console.log(`  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${trading.upgrades.recommendation}`);
  }

  /**
   * –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
   */
  printOverallAnalysis(overall) {
    console.log('\nüìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò');
    console.log('-' * 30);

    console.log(`–¢–µ–∫—É—â–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(overall.currentProfitMargin * 100).toFixed(1)}%`);
    console.log(`–¶–µ–ª–µ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(overall.targetProfitMargin * 100).toFixed(1)}%`);
    console.log(`–†–∞–∑—Ä—ã–≤: ${(overall.gap * 100).toFixed(1)}% ${overall.gap > 0 ? '(–Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å)' : '(–º–æ–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å)'}`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${overall.isOptimal ? '‚úÖ –ë–õ–ò–ó–ö–û –ö –¶–ï–õ–ò' : '‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø'}`);
    console.log(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${overall.recommendation}`);
  }

  /**
   * –í—ã–≤–æ–¥ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  printOptimizationPlan(plan) {
    console.log(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${plan.priority}`);
    console.log(`–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: ${plan.estimatedImpact}\n`);

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    console.log('üí∞ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–û–î–ü–ò–°–û–ö:');
    const sub = plan.changes.subscriptions;

    console.log('\n–¶–µ–Ω—ã:');
    for (const [tier, data] of Object.entries(sub.prices)) {
      const change = ((data.recommended - data.current) / data.current * 100).toFixed(1);
      console.log(`  ${tier}: ${data.current}‚ÇΩ ‚Üí ${data.recommended}‚ÇΩ (${change > 0 ? '+' : ''}${change}%)`);
      console.log(`    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${data.reasoning}`);
    }

    console.log('\n–ë–æ–Ω—É—Å—ã:');
    console.log(`  –¢–µ–∫—É—â–∏–µ: ${sub.bonuses.current}`);
    console.log(`  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: ${sub.bonuses.recommended}`);
    console.log(`  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${sub.bonuses.reasoning}`);

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–µ–π—Å–∞—Ö
    console.log('\nüì¶ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–ï–ô–°–û–í:');
    const cases = plan.changes.cases;

    console.log('\n–û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:');
    for (const [type, data] of Object.entries(cases.expectedValues)) {
      const change = ((data.currentEV - data.recommendedEV) / data.currentEV * 100).toFixed(1);
      console.log(`  ${type}: ${data.currentEV}‚ÇΩ ‚Üí ${data.recommendedEV}‚ÇΩ (-${change}%)`);
      console.log(`    ${data.priceChange}`);
    }

    console.log('\n–í–µ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:');
    console.log(`  –î–æ—Ä–æ–≥–∏–µ: ${cases.dropWeights.expensive}`);
    console.log(`  –î–µ—à–µ–≤—ã–µ: ${cases.dropWeights.cheap}`);

    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüéÆ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ï–°–ü–õ–ê–¢–ù–´–• –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô:');
    const free = plan.changes.freeActivities;

    for (const [activity, data] of Object.entries(free)) {
      console.log(`\n${activity.toUpperCase()}:`);
      console.log(`  –¢–µ–∫—É—â–µ–µ: ${data.current}`);
      console.log(`  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ: ${data.recommended}`);
      console.log(`  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${data.reasoning}`);
    }

    // –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    console.log('\nüí± –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´:');
    const trading = plan.changes.trading;

    console.log('\n–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:');
    console.log(`  –¢–µ–∫—É—â–∏–π: ${(trading.sellRate.current * 100)}%`);
    console.log(`  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: ${(trading.sellRate.recommended * 100)}%`);
    console.log(`  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${trading.sellRate.reasoning}`);

    console.log('\n–û–±–º–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:');
    for (const [tier, data] of Object.entries(trading.exchangeRates)) {
      console.log(`  ${tier}: ${data.current}‚ÇΩ ‚Üí ${data.recommended}‚ÇΩ`);
      console.log(`    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${data.reasoning}`);
    }

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    console.log('\nüé≤ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô:');
    const prob = plan.changes.probabilities;

    console.log('\n–í–µ—Å–∞ –¥—Ä–æ–ø–æ–≤:');
    for (const [category, data] of Object.entries(prob.dropWeights)) {
      const change = ((data.recommended - data.current) / data.current * 100).toFixed(1);
      console.log(`  ${category}: ${data.current} ‚Üí ${data.recommended} (${change > 0 ? '+' : ''}${change}%)`);
    }

    console.log('\n–õ–∏–º–∏—Ç—ã –±–æ–Ω—É—Å–æ–≤:');
    console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${prob.bonusLimits.maxBonus.current} ‚Üí ${prob.bonusLimits.maxBonus.recommended}`);
    console.log(`  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${prob.bonusLimits.maxBonus.reasoning}`);

    // –≠—Ç–∞–ø—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
    console.log('\nüöÄ –≠–¢–ê–ü–´ –í–ù–ï–î–†–ï–ù–ò–Ø:');
    for (const step of plan.implementation) {
      console.log(`\n${step.step}. ${step.title}`);
      console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${step.priority}`);
      console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${step.effort}`);
      console.log(`   –§–∞–π–ª—ã: ${step.files.join(', ')}`);
      console.log(`   –í–ª–∏—è–Ω–∏–µ: ${step.impact}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
   */
  saveResults(analysis, plan) {
    const results = {
      timestamp: new Date().toISOString(),
      analysis: analysis,
      optimizationPlan: plan,
      summary: {
        currentProfitability: analysis.overall.currentProfitMargin,
        targetProfitability: analysis.overall.targetProfitMargin,
        gap: analysis.overall.gap,
        priorityChanges: plan.implementation.filter(step => step.priority === '–ö–†–ò–¢–ò–ß–ù–û' || step.priority === '–í–´–°–û–ö–ò–ô')
      }
    };

    const outputPath = path.join(__dirname, '../.same/economy-analysis.json');
    fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));

    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);

    return results;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
   */
  generateFileChanges(plan) {
    const changes = [];

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ buySubscription.js
    changes.push({
      file: 'controllers/user/buySubscription.js',
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫',
      changes: [
        {
          line: '10-12',
          current: `1: { days: 30, max_daily_cases: 1, bonus_percentage: 3.0, name: '–°—Ç–∞—Ç—É—Å', price: 1210 },
  2: { days: 30, max_daily_cases: 1, bonus_percentage: 5.0, name: '–°—Ç–∞—Ç—É—Å+', price: 2890 },
  3: { days: 30, max_daily_cases: 1, bonus_percentage: 8.0, name: '–°—Ç–∞—Ç—É—Å++', price: 6819 }`,
          recommended: `1: { days: 30, max_daily_cases: 1, bonus_percentage: 2.0, name: '–°—Ç–∞—Ç—É—Å', price: 1450 },
  2: { days: 30, max_daily_cases: 1, bonus_percentage: 3.0, name: '–°—Ç–∞—Ç—É—Å+', price: 3200 },
  3: { days: 30, max_daily_cases: 1, bonus_percentage: 5.0, name: '–°—Ç–∞—Ç—É—Å++', price: 6819 }`
        }
      ]
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ sellItem.js
    changes.push({
      file: 'controllers/user/sellItem.js',
      description: '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
      changes: [
        {
          line: '63',
          current: 'const sellPrice = Math.round(itemPrice * 0.7);',
          recommended: 'const sellPrice = Math.round(itemPrice * 0.65);'
        }
      ]
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ exchangeItemForSubscription.js
    changes.push({
      file: 'controllers/user/exchangeItemForSubscription.js',
      description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –æ–±–º–µ–Ω–µ',
      changes: [
        {
          line: '47-51',
          current: `if (currentTier === 3) {
      pricePerDay = 300; // 300‚ÇΩ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–°—Ç–∞—Ç—É—Å++"
    } else {
      pricePerDay = 150; // 150‚ÇΩ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ "–°—Ç–∞—Ç—É—Å" –∏ "–°—Ç–∞—Ç—É—Å+"
    }`,
          recommended: `if (currentTier === 3) {
      pricePerDay = 350; // 350‚ÇΩ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–°—Ç–∞—Ç—É—Å++"
    } else {
      pricePerDay = 200; // 200‚ÇΩ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ "–°—Ç–∞—Ç—É—Å" –∏ "–°—Ç–∞—Ç—É—Å+"
    }`
        }
      ]
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ playRoulette.js
    changes.push({
      file: 'controllers/user/playRoulette.js',
      description: '–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –≤ —Ä—É–ª–µ—Ç–∫–µ',
      changes: [
        {
          line: '5-15',
          current: `const ROULETTE_SEGMENTS = [
  { id: 0, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 1, type: 'sub_1_day', value: 1, weight: 8 },   // 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ)
  { id: 2, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 3, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 4, type: 'sub_2_days', value: 2, weight: 4 },  // 2 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ä–µ–¥–∫–æ)
  { id: 5, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 6, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 7, type: 'empty', value: 0, weight: 15 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 8, type: 'empty', value: 0, weight: 15 }       // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
];`,
          recommended: `const ROULETTE_SEGMENTS = [
  { id: 0, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 1, type: 'sub_1_day', value: 1, weight: 5 },   // 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (—Ä–µ–∂–µ)
  { id: 2, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 3, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 4, type: 'sub_1_day', value: 1, weight: 2 },   // 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (—Ä–µ–¥–∫–æ)
  { id: 5, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 6, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 7, type: 'empty', value: 0, weight: 20 },      // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
  { id: 8, type: 'empty', value: 0, weight: 20 }       // –ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è
];`
        },
        {
          line: '21',
          current: 'const ROULETTE_COOLDOWN = 6 * 60 * 1000;',
          recommended: 'const ROULETTE_COOLDOWN = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤'
        }
      ]
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ playSlot.js
    changes.push({
      file: 'controllers/user/playSlot.js',
      description: '–°–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –¥–æ—Ä–æ–≥–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ —Å–ª–æ—Ç–∞—Ö',
      changes: [
        {
          line: '18-22',
          current: `const SLOT_OUTCOME_WEIGHTS = {
  'cheap_win': 60,      // 60% —à–∞–Ω—Å - –≤—ã–∏–≥—Ä—ã—à –¥–µ—à–µ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (1-12‚ÇΩ)
  'lose': 30,           // 30% —à–∞–Ω—Å - –ø—Ä–æ–∏–≥—Ä—ã—à (–ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
  'expensive_win': 10   // 10% —à–∞–Ω—Å - –≤—ã–∏–≥—Ä—ã—à –¥–æ—Ä–æ–≥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (12-5000‚ÇΩ)
};`,
          recommended: `const SLOT_OUTCOME_WEIGHTS = {
  'cheap_win': 70,      // 70% —à–∞–Ω—Å - –≤—ã–∏–≥—Ä—ã—à –¥–µ—à–µ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (1-12‚ÇΩ)
  'lose': 25,           // 25% —à–∞–Ω—Å - –ø—Ä–æ–∏–≥—Ä—ã—à (–ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
  'expensive_win': 5    // 5% —à–∞–Ω—Å - –≤—ã–∏–≥—Ä—ã—à –¥–æ—Ä–æ–≥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (12-5000‚ÇΩ)
};`
        }
      ]
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ dropWeightCalculator.js
    changes.push({
      file: 'utils/dropWeightCalculator.js',
      description: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–∞–º',
      changes: [
        {
          line: '32-44',
          current: `  if (price >= 50000) return 0.005;     // 0.5% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
  if (price >= 30000) return 0.008;     // 0.8% - –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ
  if (price >= 20000) return 0.015;     // 1.5% - —ç–ø–∏—á–µ—Å–∫–∏–µ
  if (price >= 15000) return 0.025;     // 2.5% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ
  if (price >= 10000) return 0.04;      // 4% - —Ä–µ–¥–∫–∏–µ
  if (price >= 8000) return 0.06;       // 6% - –Ω–µ–æ–±—ã—á–Ω—ã–µ+
  if (price >= 5000) return 0.1;        // 10% - –Ω–µ–æ–±—ã—á–Ω—ã–µ
  if (price >= 3000) return 0.2;        // 20% - –æ–±—ã—á–Ω—ã–µ+
  if (price >= 1000) return 0.35;       // 35% - –æ–±—ã—á–Ω—ã–µ
  if (price >= 500) return 0.5;         // 50% - —á–∞—Å—Ç—ã–µ
  if (price >= 100) return 0.7;         // 70% - –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–µ
  return 1.0;                           // 100% - –±–∞–∑–æ–≤—ã–µ/–¥–µ—à–µ–≤—ã–µ`,
          recommended: `  if (price >= 50000) return 0.003;     // 0.3% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
  if (price >= 30000) return 0.006;     // 0.6% - –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ
  if (price >= 20000) return 0.01;      // 1% - —ç–ø–∏—á–µ—Å–∫–∏–µ
  if (price >= 15000) return 0.02;      // 2% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ
  if (price >= 10000) return 0.03;      // 3% - —Ä–µ–¥–∫–∏–µ
  if (price >= 8000) return 0.05;       // 5% - –Ω–µ–æ–±—ã—á–Ω—ã–µ+
  if (price >= 5000) return 0.08;       // 8% - –Ω–µ–æ–±—ã—á–Ω—ã–µ
  if (price >= 3000) return 0.15;       // 15% - –æ–±—ã—á–Ω—ã–µ+
  if (price >= 1000) return 0.3;        // 30% - –æ–±—ã—á–Ω—ã–µ
  if (price >= 500) return 0.4;         // 40% - —á–∞—Å—Ç—ã–µ
  if (price >= 100) return 0.8;         // 80% - –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–µ
  return 1.2;                           // 120% - –±–∞–∑–æ–≤—ã–µ/–¥–µ—à–µ–≤—ã–µ`
        }
      ]
    });

    return changes;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const analyzer = new EconomyAnalyzer();

  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –≠–ö–û–ù–û–ú–ò–ö–ò –ò–ì–†–´');
    console.log('–¶–µ–ª—å: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 20-25%\n');

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const analysis = analyzer.analyzeEconomy();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const plan = analyzer.generateOptimizationPlan();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = analyzer.saveResults(analysis, plan);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const fileChanges = analyzer.generateFileChanges(plan);

    console.log('\nüîß –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –§–ê–ô–õ–ê–•:');
    console.log('=' * 50);

    for (const change of fileChanges) {
      console.log(`\nüìÅ ${change.file}`);
      console.log(`üìù ${change.description}`);

      for (const edit of change.changes) {
        console.log(`\n  –°—Ç—Ä–æ–∫–∏ ${edit.line}:`);
        console.log(`  –¢–ï–ö–£–©–ï–ï:`);
        console.log(`    ${edit.current.split('\n').join('\n    ')}`);
        console.log(`  –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï:`);
        console.log(`    ${edit.recommended.split('\n').join('\n    ')}`);
      }
    }

    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log(`üìä –¢–µ–∫—É—â–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(results.summary.currentProfitability * 100).toFixed(1)}%`);
    console.log(`üéØ –¶–µ–ª–µ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(results.summary.targetProfitability * 100).toFixed(1)}%`);
    console.log(`üìà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ${(Math.abs(results.summary.gap) * 100).toFixed(1)}%`);
    console.log(`üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${results.summary.priorityChanges.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { EconomyAnalyzer };
