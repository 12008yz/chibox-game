/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤ –∫ drop_weight
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
 */

const { sequelize } = require('../config/database');
const db = require('../models');
const {
    calculateModifiedDropWeights,
    selectItemWithModifiedWeights,
    getWeightDistributionStats
} = require('../utils/dropWeightCalculator');
const {
    updateUserBonuses,
    getUserBonusInfo
} = require('../utils/userBonusCalculator');

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
 */
async function testDropWeightCalculation() {
    console.log('\nüß™ –¢–ï–°–¢: –†–∞—Å—á–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤');
    console.log('=' .repeat(50));

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const testItems = [
        { id: 1, name: '–î–µ—à–µ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç', price: 50, drop_weight: 1.0 },
        { id: 2, name: '–û–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç', price: 1500, drop_weight: 0.25 },
        { id: 3, name: '–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', price: 12000, drop_weight: 0.02 },
        { id: 4, name: '–≠–ø–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', price: 25000, drop_weight: 0.005 },
        { id: 5, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç', price: 60000, drop_weight: 0.001 }
    ];

    const bonusLevels = [0, 1, 5, 10, 15];

    for (const bonus of bonusLevels) {
        console.log(`\nüìä –ë–æ–Ω—É—Å: +${bonus}%`);
        const stats = getWeightDistributionStats(testItems, bonus);

        console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤–µ—Å–∞: ${stats.weightChange}%`);

        Object.entries(stats.categories).forEach(([category, data]) => {
            if (data.count > 0) {
                console.log(`   ${category}: ${data.originalPercentage}% ‚Üí ${data.modifiedPercentage}% (${data.changePercentage > 0 ? '+' : ''}${data.changePercentage}%)`);
            }
        });
    }
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
 */
async function simulateCaseOpenings() {
    console.log('\nüé≤ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ 10000 –∫–µ–π—Å–æ–≤');
    console.log('=' .repeat(50));

    const testItems = [
        { id: 1, name: '–î–µ—à–µ–≤—ã–π', price: 50, drop_weight: 1.0, rarity: 'common' },
        { id: 2, name: '–û–±—ã—á–Ω—ã–π', price: 1500, drop_weight: 0.25, rarity: 'uncommon' },
        { id: 3, name: '–†–µ–¥–∫–∏–π', price: 12000, drop_weight: 0.02, rarity: 'rare' },
        { id: 4, name: '–≠–ø–∏—á–µ—Å–∫–∏–π', price: 25000, drop_weight: 0.005, rarity: 'epic' },
        { id: 5, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', price: 60000, drop_weight: 0.001, rarity: 'legendary' }
    ];

    const simulations = [
        { bonus: 0, label: '–ë–µ–∑ –±–æ–Ω—É—Å–∞' },
        { bonus: 5, label: '–ë–æ–Ω—É—Å +5%' },
        { bonus: 10, label: '–ë–æ–Ω—É—Å +10%' },
        { bonus: 20, label: '–ë–æ–Ω—É—Å +20%' }
    ];

    for (const sim of simulations) {
        console.log(`\nüéØ ${sim.label}`);

        const results = {};
        const totalValue = { total: 0, count: 0 };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        testItems.forEach(item => {
            results[item.name] = { count: 0, totalValue: 0 };
        });

        // –°–∏–º—É–ª–∏—Ä—É–µ–º 10000 –æ—Ç–∫—Ä—ã—Ç–∏–π
        for (let i = 0; i < 10000; i++) {
            const modifiedItems = calculateModifiedDropWeights(testItems, sim.bonus);
            const selectedItem = selectItemWithModifiedWeights(modifiedItems);

            results[selectedItem.name].count++;
            results[selectedItem.name].totalValue += selectedItem.price;
            totalValue.total += selectedItem.price;
            totalValue.count++;
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        testItems.forEach(item => {
            const result = results[item.name];
            const percentage = (result.count / 10000 * 100).toFixed(2);
            const avgValue = result.count > 0 ? (result.totalValue / result.count).toFixed(0) : 0;

            console.log(`   ${item.name}: ${result.count} —Ä–∞–∑ (${percentage}%) | –°—Ä. —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${avgValue}‚ÇΩ`);
        });

        const overallAvgValue = (totalValue.total / totalValue.count).toFixed(0);
        console.log(`   üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–∞–≤—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞: ${overallAvgValue}‚ÇΩ`);
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function testUserBonusCalculation() {
    console.log('\nüë§ –¢–ï–°–¢: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    console.log('=' .repeat(50));

    try {
        // –ù–∞–π–¥–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const user = await db.User.findOne();
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${user.username} (ID: ${user.id})`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö
        const currentBonus = await getUserBonusInfo(user.id);
        console.log('\nüìä –¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã:');
        console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${currentBonus.level}`);
        console.log(`   –ü–æ–¥–ø–∏—Å–∫–∞: ${currentBonus.subscriptionTier}`);
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${currentBonus.bonusBreakdown.achievements}`);
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç —É—Ä–æ–≤–Ω—è: ${currentBonus.bonusBreakdown.level}`);
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: ${currentBonus.bonusBreakdown.subscription}`);
        console.log(`   üéØ –û–±—â–∏–π –±–æ–Ω—É—Å: ${currentBonus.bonusBreakdown.total}`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
        console.log('\nüîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã...');
        const updatedBonus = await updateUserBonuses(user.id);

        console.log('‚úÖ –ë–æ–Ω—É—Å—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã:');
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: +${updatedBonus.achievementsBonus.toFixed(1)}%`);
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç —É—Ä–æ–≤–Ω—è: +${updatedBonus.levelBonus.toFixed(1)}%`);
        console.log(`   –ë–æ–Ω—É—Å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: +${updatedBonus.subscriptionBonus.toFixed(1)}%`);
        console.log(`   üéØ –û–±—â–∏–π –±–æ–Ω—É—Å: +${updatedBonus.totalBonus.toFixed(1)}%`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function testWithRealItems() {
    console.log('\nüéÆ –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏');
    console.log('=' .repeat(50));

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const items = await db.Item.findAll({
            limit: 20,
            order: sequelize.random()
        });

        if (items.length === 0) {
            console.log('‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –±–æ–Ω—É—Å–∞
        const bonusLevels = [0, 5, 10, 15];

        for (const bonus of bonusLevels) {
            console.log(`\nüéØ –ë–æ–Ω—É—Å +${bonus}%:`);

            const modifiedItems = calculateModifiedDropWeights(items, bonus);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const priceCategories = {
                '–î–µ—à–µ–≤—ã–µ (<1000‚ÇΩ)': [],
                '–°—Ä–µ–¥–Ω–∏–µ (1000-10000‚ÇΩ)': [],
                '–î–æ—Ä–æ–≥–∏–µ (10000-30000‚ÇΩ)': [],
                '–û—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ (30000‚ÇΩ+)': []
            };

            modifiedItems.forEach(item => {
                const price = parseFloat(item.price) || 0;
                if (price < 1000) {
                    priceCategories['–î–µ—à–µ–≤—ã–µ (<1000‚ÇΩ)'].push(item);
                } else if (price < 10000) {
                    priceCategories['–°—Ä–µ–¥–Ω–∏–µ (1000-10000‚ÇΩ)'].push(item);
                } else if (price < 30000) {
                    priceCategories['–î–æ—Ä–æ–≥–∏–µ (10000-30000‚ÇΩ)'].push(item);
                } else {
                    priceCategories['–û—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ (30000‚ÇΩ+)'].push(item);
                }
            });

            Object.entries(priceCategories).forEach(([category, categoryItems]) => {
                if (categoryItems.length > 0) {
                    const totalOriginalWeight = categoryItems.reduce((sum, item) => sum + (item.drop_weight || 1), 0);
                    const totalModifiedWeight = categoryItems.reduce((sum, item) => sum + item.modified_drop_weight, 0);
                    const change = ((totalModifiedWeight - totalOriginalWeight) / totalOriginalWeight * 100).toFixed(1);

                    console.log(`   ${category}: ${categoryItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: ${change > 0 ? '+' : ''}${change}%`);
                }
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:', error.message);
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
    try {
        console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í –ö DROP_WEIGHT');
        console.log('=' .repeat(60));

        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await testDropWeightCalculation();
        await simulateCaseOpenings();
        await testUserBonusCalculation();
        await testWithRealItems();

        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('=' .repeat(60));

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    } finally {
        await sequelize.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runTests();
}

module.exports = {
    testDropWeightCalculation,
    simulateCaseOpenings,
    testUserBonusCalculation,
    testWithRealItems,
    runTests
};
