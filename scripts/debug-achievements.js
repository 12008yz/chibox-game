const db = require('../models');

async function debugAchievements() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
    const totalAchievements = await db.Achievement.findAll({
      where: { is_active: true }
    });
    console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalAchievements.length}`);

    totalAchievements.forEach(ach => {
      console.log(`  - ${ach.name} (${ach.requirement_type}: ${ach.requirement_value})`);
    });
    console.log('');

    // 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–µ–π—Å–∞–º–∏
    const usersWithCases = await db.User.findAll({
      where: {
        total_cases_opened: { [db.Sequelize.Op.gt]: 0 }
      },
      attributes: ['id', 'username', 'email', 'total_cases_opened'],
      order: [['total_cases_opened', 'DESC']],
      limit: 5
    });

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–µ–π—Å–∞–º–∏ (—Ç–æ–ø 5):`);
    for (const user of usersWithCases) {
      console.log(`  - ${user.username} (${user.email}): ${user.total_cases_opened} –∫–µ–π—Å–æ–≤`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userAchievements = await db.UserAchievement.findAll({
        where: { user_id: user.id },
        include: [{
          model: db.Achievement,
          as: 'achievement',
          attributes: ['name', 'requirement_type', 'requirement_value']
        }]
      });

      if (userAchievements.length === 0) {
        console.log(`    ‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ –∑–∞–ø–∏—Å–µ–π –≤ user_achievements`);
      } else {
        console.log(`    ‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userAchievements.length} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`);
        userAchievements.forEach(ua => {
          const ach = ua.achievement;
          console.log(`      - ${ach.name}: ${ua.current_progress}/${ach.requirement_value} (${ua.is_completed ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'})`);
        });
      }
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–æ–≤–∏—á–æ–∫" (cases_opened: 10)
    const noviceAchievement = await db.Achievement.findOne({
      where: {
        requirement_type: 'cases_opened',
        requirement_value: 10
      }
    });

    if (noviceAchievement) {
      console.log(`üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–æ–≤–∏—á–æ–∫" –Ω–∞–π–¥–µ–Ω–æ: ${noviceAchievement.name}`);

      const usersWithProgress = await db.UserAchievement.findAll({
        where: { achievement_id: noviceAchievement.id },
        include: [{
          model: db.User,
          as: 'user',
          attributes: ['username', 'total_cases_opened']
        }],
        order: [['current_progress', 'DESC']],
        limit: 10
      });

      console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é "–ù–æ–≤–∏—á–æ–∫":`);
      if (usersWithProgress.length === 0) {
        console.log(`    ‚ùå –ù–ï–¢ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ù–æ–≤–∏—á–æ–∫"`);
      } else {
        usersWithProgress.forEach(ua => {
          console.log(`    - ${ua.user.username}: ${ua.current_progress}/10 (total_cases_opened: ${ua.user.total_cases_opened})`);
        });
      }
    }
    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–µ–π—Å—ã
    const recentCases = await db.Case.findAll({
      where: { is_opened: true },
      include: [{
        model: db.User,
        as: 'user',
        attributes: ['username', 'total_cases_opened']
      }],
      order: [['opened_date', 'DESC']],
      limit: 5
    });

    console.log(`üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–µ–π—Å—ã:`);
    recentCases.forEach(case_ => {
      console.log(`    - ${case_.user.username}: –∫–µ–π—Å #${case_.id} –æ—Ç–∫—Ä—ã—Ç ${case_.opened_date} (–≤—Å–µ–≥–æ –∫–µ–π—Å–æ–≤: ${case_.user.total_cases_opened})`);
    });
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ updateUserAchievementProgress
    console.log(`üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateUserAchievementProgress...`);
    if (usersWithCases.length > 0) {
      const testUser = usersWithCases[0];
      console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${testUser.username} (${testUser.total_cases_opened} –∫–µ–π—Å–æ–≤)`);

      try {
        const { updateUserAchievementProgress } = require('../services/achievementService');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ù–æ–≤–∏—á–æ–∫"
        const existingProgress = await db.UserAchievement.findOne({
          where: {
            user_id: testUser.id,
            achievement_id: noviceAchievement?.id
          }
        });

        if (!existingProgress && noviceAchievement) {
          console.log(`   –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ù–æ–≤–∏—á–æ–∫"...`);
          await updateUserAchievementProgress(testUser.id, 'cases_opened', testUser.total_cases_opened);

          const newProgress = await db.UserAchievement.findOne({
            where: {
              user_id: testUser.id,
              achievement_id: noviceAchievement.id
            }
          });

          if (newProgress) {
            console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–æ–≥—Ä–µ—Å—Å: ${newProgress.current_progress}/${noviceAchievement.requirement_value}`);
          } else {
            console.log(`   ‚ùå –ó–∞–ø–∏—Å—å –ù–ï —Å–æ–∑–¥–∞–Ω–∞`);
          }
        } else {
          console.log(`   ‚ÑπÔ∏è  –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingProgress?.current_progress || 0}/${noviceAchievement?.requirement_value || 'N/A'}`);
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  debugAchievements().then(() => {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { debugAchievements };
