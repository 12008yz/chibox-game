#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ withdrawal - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç—Å—è –∏ —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏
 */

const { Withdrawal, User, UserInventory, Item } = require('../models');
const SteamBot = require('../services/steamBotService');
const steamBotConfig = require('../config/steam_bot.js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam –±–æ—Ç–∞
const steamBot = new SteamBot(
  steamBotConfig.accountName,
  steamBotConfig.password,
  steamBotConfig.sharedSecret,
  steamBotConfig.identitySecret,
  steamBotConfig.steamApiKey
);

async function debugWithdrawal() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ withdrawal...\n');

    // –ü–æ–ª—É—á–∞–µ–º pending withdrawal
    const withdrawals = await Withdrawal.findAll({
      where: { status: 'pending' },
      attributes: ['id', 'user_id', 'status', 'steam_trade_url', 'tracking_data'],
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'username', 'steam_trade_url']
        },
        {
          model: UserInventory,
          as: 'items',
          include: [
            {
              model: Item,
              as: 'item',
              attributes: ['id', 'name', 'steam_market_hash_name', 'exterior']
            }
          ]
        }
      ]
    });

    if (withdrawals.length === 0) {
      console.log('‚ùå –ù–µ—Ç pending withdrawal');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${withdrawals.length} pending withdrawal:\n`);

    for (const withdrawal of withdrawals) {
      console.log(`üéØ Withdrawal ID: ${withdrawal.id}`);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.user.username} (ID: ${withdrawal.user.id})`);
      console.log(`üîó Trade URL –≤ withdrawal: ${withdrawal.steam_trade_url || '–ù–ï–¢'}`);
      console.log(`üîó Trade URL –≤ user: ${withdrawal.user.steam_trade_url || '–ù–ï–¢'}`);
      console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ withdrawal: ${withdrawal.items.length}`);

      console.log('\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã –≤ withdrawal:');
      for (const userItem of withdrawal.items) {
        const item = userItem.item;
        console.log(`  - ID: ${item.id}`);
        console.log(`  - –ù–∞–∑–≤–∞–Ω–∏–µ: ${item.name}`);
        console.log(`  - Market Hash Name: ${item.steam_market_hash_name}`);
        console.log(`  - Exterior: ${item.exterior || '–ù–ï–¢'}`);
        console.log(`  - –ü–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ${item.steam_market_hash_name}${item.exterior ? ` (${item.exterior})` : ''}`);
        console.log('');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Steam –±–æ—Ç–∞...');
    await steamBot.login();
    console.log('‚úÖ Steam –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n');

    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞...');
    const botInventory = await steamBot.getInventory(730, 2, true);
    console.log(`üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞ ${botInventory.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n`);

    for (const [index, item] of botInventory.entries()) {
      console.log(`${index + 1}. ${item.market_hash_name} (Asset ID: ${item.assetid})`);
    }

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:');
    for (const withdrawal of withdrawals) {
      console.log(`\nWithdrawal #${withdrawal.id}:`);
      for (const userItem of withdrawal.items) {
        const item = userItem.item;
        const searchName = item.steam_market_hash_name;

        const found = botInventory.find(botItem =>
          botItem.market_hash_name === searchName
        );

        if (found) {
          console.log(`  ‚úÖ –ù–ê–ô–î–ï–ù: ${searchName} -> ${found.assetid}`);
        } else {
          console.log(`  ‚ùå –ù–ï –ù–ê–ô–î–ï–ù: ${searchName}`);
          console.log(`     –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:`);

          // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
          const similar = botInventory.filter(botItem =>
            botItem.market_hash_name.toLowerCase().includes(searchName.toLowerCase().split(' ')[0])
          );

          if (similar.length > 0) {
            similar.forEach(s => console.log(`       - ${s.market_hash_name}`));
          } else {
            console.log(`       –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
          }
        }
      }
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  process.exit(0);
}

debugWithdrawal();
