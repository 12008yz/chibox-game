const { sequelize } = require('../config/database');
const db = require('../models');

async function fixWeightsFromEqual() {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const items = await db.Item.findAll({
      order: [['price', 'DESC']]
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –≤–µ—Å = 1
    const equalWeightItems = items.filter(item => item.drop_weight === 1);
    console.log(`‚öñÔ∏è  –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–µ—Å–æ–º = 1: ${equalWeightItems.length}`);

    if (equalWeightItems.length === items.length) {
      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–µ—Å = 1');
    }

    // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ 20% –¥–ª—è —Å–∞–π—Ç–∞
    // –í–µ—Å–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ 15%
    function calculateCorrectWeight(price) {
      price = parseFloat(price) || 0;

      // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      // –ü—Ä–∏ –±–æ–Ω—É—Å–µ 15% —à–∞–Ω—Å—ã –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–∞—Ç—Å—è, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      if (price >= 50000) return 0.005;     // 0.5% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (–±—ã–ª–æ 0.1%)
      if (price >= 30000) return 0.008;     // 0.8% - –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ (–±—ã–ª–æ 0.2%)
      if (price >= 20000) return 0.015;     // 1.5% - —ç–ø–∏—á–µ—Å–∫–∏–µ (–±—ã–ª–æ 0.5%)
      if (price >= 15000) return 0.025;     // 2.5% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ (–±—ã–ª–æ 1%)
      if (price >= 10000) return 0.04;      // 4% - —Ä–µ–¥–∫–∏–µ (–±—ã–ª–æ 2%)
      if (price >= 8000) return 0.06;       // 6% - –Ω–µ–æ–±—ã—á–Ω—ã–µ+ (–±—ã–ª–æ 4%)
      if (price >= 5000) return 0.1;        // 10% - –Ω–µ–æ–±—ã—á–Ω—ã–µ (–±—ã–ª–æ 8%)
      if (price >= 3000) return 0.2;        // 20% - –æ–±—ã—á–Ω—ã–µ+ (–±—ã–ª–æ 15%)
      if (price >= 1000) return 0.35;       // 35% - –æ–±—ã—á–Ω—ã–µ (–±—ã–ª–æ 25%)
      if (price >= 500) return 0.5;         // 50% - —á–∞—Å—Ç—ã–µ (–±—ã–ª–æ 40%)
      if (price >= 100) return 0.7;         // 70% - –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–µ (–±—ã–ª–æ 60%)
      return 1.0;                           // 100% - –±–∞–∑–æ–≤—ã–µ/–¥–µ—à–µ–≤—ã–µ
    }

    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω...');

    let updatedCount = 0;
    const significantChanges = [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for (const item of items) {
      const price = parseFloat(item.price) || 0;
      const correctWeight = calculateCorrectWeight(price);

      await item.update({ drop_weight: correctWeight });
      updatedCount++;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (price > 5000) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        significantChanges.push({
          name: item.name,
          price: price,
          oldWeight: 1,
          newWeight: correctWeight,
          oldChance: (1 * 100).toFixed(4),
          newChance: (correctWeight * 100).toFixed(4)
        });
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${updatedCount}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (significantChanges.length > 0) {
      console.log('üíé –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–õ–Ø –î–û–†–û–ì–ò–• –ü–†–ï–î–ú–ï–¢–û–í:');

      significantChanges.sort((a, b) => b.price - a.price).slice(0, 15).forEach((change, index) => {
        console.log(`${index + 1}. ${change.name}`);
        console.log(`   üí∞ –¶–µ–Ω–∞: ${change.price.toLocaleString()}‚ÇΩ`);
        console.log(`   üìä –ë—ã–ª–æ: ${change.oldWeight} (${change.oldChance}%)`);
        console.log(`   üìâ –°—Ç–∞–ª–æ: ${change.newWeight} (${change.newChance}%)`);
        console.log(`   üéØ –°–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –≤ ${(1/change.newWeight).toFixed(0)} —Ä–∞–∑\n`);
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const updatedItems = await db.Item.findAll();

    const priceCategories = {
      '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (50000‚ÇΩ+)': { items: [], totalWeight: 0 },
      '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ (30000-49999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–≠–ø–∏—á–µ—Å–∫–∏–µ (20000-29999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ (15000-19999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–†–µ–¥–∫–∏–µ (10000-14999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–ù–µ–æ–±—ã—á–Ω—ã–µ+ (8000-9999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–ù–µ–æ–±—ã—á–Ω—ã–µ (5000-7999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–û–±—ã—á–Ω—ã–µ+ (3000-4999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–û–±—ã—á–Ω—ã–µ (1000-2999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–ß–∞—Å—Ç—ã–µ (500-999‚ÇΩ)': { items: [], totalWeight: 0 },
      '–û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ (100-499‚ÇΩ)': { items: [], totalWeight: 0 },
      '–î–µ—à–µ–≤—ã–µ (<100‚ÇΩ)': { items: [], totalWeight: 0 }
    };

    updatedItems.forEach(item => {
      const price = parseFloat(item.price) || 0;
      const weight = parseFloat(item.drop_weight) || 0;

      if (price >= 50000) {
        priceCategories['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (50000‚ÇΩ+)'].items.push(item);
        priceCategories['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (50000‚ÇΩ+)'].totalWeight += weight;
      } else if (price >= 30000) {
        priceCategories['–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ (30000-49999‚ÇΩ)'].items.push(item);
        priceCategories['–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ (30000-49999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 20000) {
        priceCategories['–≠–ø–∏—á–µ—Å–∫–∏–µ (20000-29999‚ÇΩ)'].items.push(item);
        priceCategories['–≠–ø–∏—á–µ—Å–∫–∏–µ (20000-29999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 15000) {
        priceCategories['–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ (15000-19999‚ÇΩ)'].items.push(item);
        priceCategories['–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ (15000-19999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 10000) {
        priceCategories['–†–µ–¥–∫–∏–µ (10000-14999‚ÇΩ)'].items.push(item);
        priceCategories['–†–µ–¥–∫–∏–µ (10000-14999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 8000) {
        priceCategories['–ù–µ–æ–±—ã—á–Ω—ã–µ+ (8000-9999‚ÇΩ)'].items.push(item);
        priceCategories['–ù–µ–æ–±—ã—á–Ω—ã–µ+ (8000-9999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 5000) {
        priceCategories['–ù–µ–æ–±—ã—á–Ω—ã–µ (5000-7999‚ÇΩ)'].items.push(item);
        priceCategories['–ù–µ–æ–±—ã—á–Ω—ã–µ (5000-7999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 3000) {
        priceCategories['–û–±—ã—á–Ω—ã–µ+ (3000-4999‚ÇΩ)'].items.push(item);
        priceCategories['–û–±—ã—á–Ω—ã–µ+ (3000-4999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 1000) {
        priceCategories['–û–±—ã—á–Ω—ã–µ (1000-2999‚ÇΩ)'].items.push(item);
        priceCategories['–û–±—ã—á–Ω—ã–µ (1000-2999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 500) {
        priceCategories['–ß–∞—Å—Ç—ã–µ (500-999‚ÇΩ)'].items.push(item);
        priceCategories['–ß–∞—Å—Ç—ã–µ (500-999‚ÇΩ)'].totalWeight += weight;
      } else if (price >= 100) {
        priceCategories['–û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ (100-499‚ÇΩ)'].items.push(item);
        priceCategories['–û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ (100-499‚ÇΩ)'].totalWeight += weight;
      } else {
        priceCategories['–î–µ—à–µ–≤—ã–µ (<100‚ÇΩ)'].items.push(item);
        priceCategories['–î–µ—à–µ–≤—ã–µ (<100‚ÇΩ)'].totalWeight += weight;
      }
    });

    const totalWeight = updatedItems.reduce((sum, item) => sum + (parseFloat(item.drop_weight) || 0), 0);

    console.log('üìä –ò–¢–û–ì–û–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ï–î–ö–û–°–¢–ò:');
    Object.entries(priceCategories).forEach(([category, data]) => {
      if (data.items.length > 0) {
        const avgWeight = data.totalWeight / data.items.length;
        const categoryChance = (data.totalWeight / totalWeight * 100);
        const avgIndividualChance = (avgWeight / totalWeight * 100);

        console.log(`${category}:`);
        console.log(`   üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${data.items.length}`);
        console.log(`   üéØ –®–∞–Ω—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryChance.toFixed(2)}%`);
        console.log(`   üìà –°—Ä–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø—Ä–µ–¥–º–µ—Ç–∞: ${avgIndividualChance.toFixed(4)}%`);
        console.log(`   üíé –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${(data.items.reduce((sum, item) => sum + parseFloat(item.price), 0) / data.items.length).toLocaleString()}‚ÇΩ\n`);
      }
    });

    console.log(`‚öñÔ∏è  –û–±—â–∏–π –≤–µ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalWeight.toFixed(6)}`);
    console.log(`\nüìä –°–ò–°–¢–ï–ú–ê –ë–û–ù–£–°–û–í:`);
    console.log(`   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 15%`);
    console.log(`   üìà –ü–æ–¥–ø–∏—Å–∫–∞: –¥–æ 8% (—É—Ä–æ–≤–µ–Ω—å 3 = –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);
    console.log(`   üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –¥–æ 5%`);
    console.log(`   üìä –£—Ä–æ–≤–µ–Ω—å: –¥–æ 2% (0.02% –∑–∞ —É—Ä–æ–≤–µ–Ω—å)`);
    console.log(`   üí∞ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: 20% –¥–ª—è —Å–∞–π—Ç–∞, 80% –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤`);
    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –î–†–û–ü–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('üí∞ –¢–µ–ø–µ—Ä—å –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–ø–∞–¥–∞—é—Ç –ù–ê–ú–ù–û–ì–û —Ä–µ–∂–µ –¥–µ—à–µ–≤—ã—Ö');
    console.log('üé≤ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ —á–µ—Å—Ç–Ω–æ–π –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await sequelize.close();
  }
}

fixWeightsFromEqual();