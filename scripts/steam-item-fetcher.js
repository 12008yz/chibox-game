const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Steam
const STEAM_CONFIG = {
  baseURL: 'https://steamcommunity.com/market/priceoverview/',
  timeout: 15000,
  retries: 2,
  retryDelay: 5000,
  baseDelay: 2000  // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
};

// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–µ —Å Steam Market
async function getSteamItemData(marketHashName, retryCount = 0) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    if (retryCount === 0) {
      await delay(STEAM_CONFIG.baseDelay);
    }

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Steam –¥–ª—è: ${marketHashName}`);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ Steam Market API
    const params = {
      appid: 730, // CS2 app ID
      currency: 1, // USD
      market_hash_name: marketHashName
    };

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Steam Market API
    const response = await axios.get(STEAM_CONFIG.baseURL, {
      params,
      timeout: STEAM_CONFIG.timeout,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Referer': 'https://steamcommunity.com/'
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (response.status !== 200) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = response.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
    if (!data.success) {
      console.warn(`‚ö†Ô∏è  Steam API –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è: ${marketHashName}`);
      return {
        price_usd: 0.10, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        price_text: '$0.10',
        item_info: {
          icon_url: null,
          icon_url_large: null
        },
        error: 'Steam API returned success: false'
      };
    }

    // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "$1.23" -> 1.23)
    let priceUsd = 0.10;
    if (data.lowest_price) {
      const priceMatch = data.lowest_price.match(/\$?(\d+\.?\d*)/);
      if (priceMatch) {
        priceUsd = parseFloat(priceMatch[1]);
      }
    } else if (data.median_price) {
      const priceMatch = data.median_price.match(/\$?(\d+\.?\d*)/);
      if (priceMatch) {
        priceUsd = parseFloat(priceMatch[1]);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∫–æ–Ω–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemInfo = await getItemIcon(marketHashName);

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${marketHashName} - $${priceUsd}`);

    return {
      price_usd: priceUsd,
      price_text: data.lowest_price || data.median_price || `$${priceUsd}`,
      volume: data.volume || '0',
      item_info: itemInfo,
      error: null
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${marketHashName}:`, error.message);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 429 Too Many Requests
    if (error.response && error.response.status === 429) {
      const retryAfter = error.response.headers['retry-after'];
      const delayMs = retryAfter ? parseInt(retryAfter) * 1000 : Math.random() * 10000 + 10000;
      console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 429 Too Many Requests. –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: ${delayMs} –º—Å`);

      if (retryCount < STEAM_CONFIG.retries) {
        await delay(delayMs);
        return getSteamItemData(marketHashName, retryCount + 1);
      }
    }

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
    if (retryCount < STEAM_CONFIG.retries && (!error.response || error.response.status !== 429)) {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è ${marketHashName} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${STEAM_CONFIG.retries})`);
      await delay(STEAM_CONFIG.retryDelay * (retryCount + 1));
      return getSteamItemData(marketHashName, retryCount + 1);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    return {
      price_usd: 0.10,
      price_text: '$0.10',
      volume: '0',
      item_info: {
        icon_url: null,
        icon_url_large: null
      },
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
async function getItemIcon(marketHashName, retryCount = 0) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –∏–∫–æ–Ω–∫–∏
    const inspectURL = `https://steamcommunity.com/market/listings/730/${encodeURIComponent(marketHashName)}`;

    const response = await axios.get(inspectURL, {
      timeout: STEAM_CONFIG.timeout,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache'
      }
    });

    // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    const html = response.data;

    // –ò—â–µ–º URL –∏–∫–æ–Ω–∫–∏ –≤ HTML
    const iconMatch = html.match(/https:\/\/community\.cloudflare\.steamstatic\.com\/economy\/image\/[^"']+/);
    const iconUrl = iconMatch ? iconMatch[0] : null;

    return {
      icon_url: iconUrl,
      icon_url_large: iconUrl ? iconUrl.replace('/62fx62f', '/256fx256f') : null
    };

  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è ${marketHashName}:`, error.message);

    if (retryCount < 1) {
      await delay(1000);
      return getItemIcon(marketHashName, retryCount + 1);
    }

    return {
      icon_url: null,
      icon_url_large: null
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
async function getSteamItemsBatch(marketHashNames, batchSize = 5, delayBetweenBatches = 3000) {
  console.log(`üöÄ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${marketHashNames.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ ${batchSize}`);

  const results = [];

  for (let i = 0; i < marketHashNames.length; i += batchSize) {
    const batch = marketHashNames.slice(i, i + batchSize);
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}/${Math.ceil(marketHashNames.length/batchSize)}`);

    const batchPromises = batch.map(async (name, index) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –±–∞—Ç—á–µ
      await delay(index * 500);
      return getSteamItemData(name);
    });

    const batchResults = await Promise.allSettled(batchPromises);

    batchResults.forEach((result, index) => {
      if (result.status === 'fulfilled') {
        results.push({
          marketHashName: batch[index],
          data: result.value
        });
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ –¥–ª—è ${batch[index]}:`, result.reason);
        results.push({
          marketHashName: batch[index],
          data: {
            price_usd: 0.10,
            error: result.reason.message
          }
        });
      }
    });

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + batchSize < marketHashNames.length) {
      console.log(`‚è≥ –ñ–¥–µ–º ${delayBetweenBatches/1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...`);
      await delay(delayBetweenBatches);
    }
  }

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Steam Market API
async function testSteamAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Steam Market API...');

  try {
    const testItem = 'AK-47 | Redline (Field-Tested)';
    const result = await getSteamItemData(testItem);

    if (result.error) {
      console.warn(`‚ö†Ô∏è  –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: ${result.error}`);
      return false;
    } else {
      console.log(`‚úÖ Steam API —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${testItem} - $${result.price_usd}`);
      return true;
    }
  } catch (error) {
    console.error('‚ùå Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

module.exports = {
  getSteamItemData,
  getSteamItemsBatch,
  getItemIcon,
  testSteamAPI
};
