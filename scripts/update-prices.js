const db = require('../models');
const SteamPriceService = require('../services/steamPriceService');
const ProfitabilityCalculator = require('../utils/profitabilityCalculator');
const logger = require('../utils/logger');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const steamPriceService = new SteamPriceService(process.env.STEAM_API_KEY);
const profitabilityCalculator = new ProfitabilityCalculator(0.2);

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ Steam Market
 */
async function updateAllPrices() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∏—Ö market_hash_name
    const items = await db.Item.findAll({
      where: {
        steam_market_hash_name: {
          [db.Sequelize.Op.ne]: null
        },
        is_available: true
      },
      attributes: ['id', 'steam_market_hash_name', 'price', 'rarity', 'price_last_updated']
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    let updatedCount = 0;
    let errorCount = 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –±–∞—Ç—á–∞–º–∏
    const batchSize = 50;
    for (let i = 0; i < items.length; i += batchSize) {
      const batch = items.slice(i, i + batchSize);
      console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(items.length / batchSize)}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1.5 —Å–µ–∫—É–Ω–¥—ã
      for (let j = 0; j < batch.length; j++) {
        const item = batch[j];
        try {
          const priceData = await steamPriceService.getItemPrice(item.steam_market_hash_name);

          if (priceData.success && priceData.price_rub > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            const updates = {
              actual_price_rub: priceData.price_rub,
              price_last_updated: new Date(),
              price_source: 'steam_api'
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
            const priceDiff = Math.abs(item.price - priceData.price_rub) / item.price;
            if (priceDiff > 0.1) { // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
              updates.price = priceData.price_rub;
              console.log(`üí∞ ${item.steam_market_hash_name}: —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ ${item.price} ‚Üí ${priceData.price_rub} –ö–†`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (item.rarity !== priceData.category) {
              updates.rarity = priceData.category;
              console.log(`üìù ${item.steam_market_hash_name}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ ${item.rarity} ‚Üí ${priceData.category}`);
            }

            await db.Item.update(updates, {
              where: { id: item.id }
            });

            updatedCount++;
            console.log(`‚úÖ ${item.steam_market_hash_name}: ‚ÇΩ${priceData.price_rub}`);
          } else {
            console.log(`‚ö†Ô∏è ${item.steam_market_hash_name}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
          }
        } catch (error) {
          errorCount++;
          console.error(`‚ùå ${item.steam_market_hash_name}: ${error.message}`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –±–∞—Ç—á–µ)
        if (j < batch.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1500));
        }
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < items.length) {
        console.log('‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((updatedCount / items.length) * 100).toFixed(1)}%`);

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
    console.log('\n‚öñÔ∏è –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –∫–µ–π—Å–æ–≤...');
    await recalculateCaseWeights();

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
    console.log('\nüèÜ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const bestItemsResult = await recalculateUserBestItems();
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${bestItemsResult.updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –û—á–∏—â–∞–µ–º –∫—ç—à
    steamPriceService.cleanExpiredCache();

    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return {
      updated: updatedCount,
      errors: errorCount,
      total: items.length,
      bestItemsUpdated: bestItemsResult.updated
    };

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error);
    throw error;
  }
}

/**
 * –ü–µ—Ä–µ—Å—á–µ—Ç –≤–µ—Å–æ–≤ –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
 */
async function recalculateCaseWeights() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ origin (—Ç–∏–ø—É –∫–µ–π—Å–∞)
    const items = await db.Item.findAll({
      where: {
        is_available: true,
        origin: {
          [db.Sequelize.Op.ne]: null
        }
      }
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–µ–π—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const itemsByCase = {};
    for (const item of items) {
      const caseType = item.origin.replace('_case', '');
      if (!itemsByCase[caseType]) {
        itemsByCase[caseType] = {};
      }
      if (!itemsByCase[caseType][item.rarity]) {
        itemsByCase[caseType][item.rarity] = [];
      }
      itemsByCase[caseType][item.rarity].push(item);
    }

    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–æ–≤
    const caseConfigs = {
      purchase: { price: 99, name: '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å' },
      premium: { price: 499, name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å' }
    };

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤
    for (const [caseType, config] of Object.entries(caseConfigs)) {
      if (itemsByCase[caseType]) {
        console.log(`üéØ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è: ${config.name}`);

        const optimization = profitabilityCalculator.calculateOptimalWeights(
          itemsByCase[caseType],
          config.price
        );

        if (optimization.isOptimal) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await updateWeightsInDatabase(itemsByCase[caseType], optimization.weights);
          console.log(`‚úÖ –í–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${config.name} (—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(optimization.profitMargin * 100).toFixed(1)}%)`);
        } else {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å–∞ –¥–ª—è ${config.name}`);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤–µ—Å–æ–≤:', error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function updateWeightsInDatabase(itemsByCategory, weights) {
  for (const [category, items] of Object.entries(itemsByCategory)) {
    const baseWeight = weights[category] || 1;

    for (const item of items) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤ –≤–µ—Å–∞ (¬±5%)
      const variation = (Math.random() - 0.5) * 0.1;
      const finalWeight = Math.max(0.01, baseWeight * (1 + variation));

      await db.Item.update(
        { drop_weight: Math.round(finalWeight * 100) / 100 },
        { where: { id: item.id } }
      );
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤)
 */
async function updateOutdatedPrices() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ü–µ–Ω—ã (—Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤)...\n');

  const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);

  const outdatedItems = await db.Item.findAll({
    where: {
      steam_market_hash_name: {
        [db.Sequelize.Op.ne]: null
      },
      is_available: true,
      [db.Sequelize.Op.or]: [
        { price_last_updated: null },
        { price_last_updated: { [db.Sequelize.Op.lt]: sixHoursAgo } }
      ]
    },
    attributes: ['id', 'steam_market_hash_name', 'price', 'rarity', 'price_last_updated']
  });

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${outdatedItems.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

  if (outdatedItems.length === 0) {
    console.log('‚úÖ –í—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!');
    return { updated: 0, errors: 0, total: 0 };
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  return await updateSpecificItems(outdatedItems);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 */
async function updateSpecificItems(items) {
  let updatedCount = 0;
  let errorCount = 0;

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    try {
      const priceData = await steamPriceService.getItemPrice(item.steam_market_hash_name);

      if (priceData.success && priceData.price_rub > 0) {
        const updates = {
          actual_price_rub: priceData.price_rub,
          price_last_updated: new Date(),
          price_source: 'steam_api'
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
        const priceDiff = Math.abs(item.price - priceData.price_rub) / item.price;
        if (priceDiff > 0.1) {
          updates.price = priceData.price_rub;
          console.log(`üí∞ ${item.steam_market_hash_name}: —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ ${item.price} ‚Üí ${priceData.price_rub} –ö–†`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (item.rarity !== priceData.category) {
          updates.rarity = priceData.category;
          console.log(`üìù ${item.steam_market_hash_name}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ ${item.rarity} ‚Üí ${priceData.category}`);
        }

        await db.Item.update(updates, {
          where: { id: item.id }
        });

        updatedCount++;
        console.log(`‚úÖ ${item.steam_market_hash_name}: ‚ÇΩ${priceData.price_rub}`);
      } else {
        errorCount++;
        console.log(`‚ùå ${item.steam_market_hash_name}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      }
    } catch (error) {
      errorCount++;
      console.error(`‚ùå ${item.steam_market_hash_name}: ${error.message}`);
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞)
    if (i < items.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
  }

  return { updated: updatedCount, errors: errorCount, total: items.length };
}

/**
 * –ü–µ—Ä–µ—Å—á–µ—Ç –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function recalculateUserBestItems() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
    const usersWithItems = await db.sequelize.query(`
      SELECT DISTINCT ui.user_id
      FROM user_inventory ui
      INNER JOIN items i ON ui.item_id = i.id
      WHERE i.price IS NOT NULL
    `, { type: db.Sequelize.QueryTypes.SELECT });

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${usersWithItems.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏`);

    let updatedCount = 0;

    for (const userRow of usersWithItems) {
      const userId = userRow.user_id;

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userItems = await db.UserInventory.findAll({
          where: { user_id: userId },
          include: [{
            model: db.Item,
            as: 'item',
            attributes: ['price']
          }]
        });

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        let maxPrice = 0;
        let totalValue = 0;

        userItems.forEach(inventoryItem => {
          if (inventoryItem.item && inventoryItem.item.price) {
            const price = parseFloat(inventoryItem.item.price);
            totalValue += price;
            if (price > maxPrice) {
              maxPrice = price;
            }
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (maxPrice > 0) {
          await db.User.update({
            best_item_value: maxPrice,
            total_items_value: totalValue
          }, {
            where: { id: userId }
          });

          updatedCount++;

          if (updatedCount % 10 === 0) {
            console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updatedCount}/${usersWithItems.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          }
        }

      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userError.message);
      }
    }

    console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return { updated: updatedCount, total: usersWithItems.length };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    return { updated: 0, total: 0 };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º
 */
async function getPriceStatistics() {
  const stats = await db.Item.findAll({
    attributes: [
      'price_source',
      [db.Sequelize.fn('COUNT', db.Sequelize.col('*')), 'count'],
      [db.Sequelize.fn('AVG', db.Sequelize.col('actual_price_rub')), 'avg_price'],
      [db.Sequelize.fn('MAX', db.Sequelize.col('price_last_updated')), 'latest_update']
    ],
    where: {
      is_available: true
    },
    group: 'price_source',
    raw: true
  });

  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ï–ù:');
  for (const stat of stats) {
    console.log(`${stat.price_source}: ${stat.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚ÇΩ${parseFloat(stat.avg_price || 0).toFixed(2)}`);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
  const cacheStats = steamPriceService.getCacheStats();
  console.log('\nüóÑÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê:');
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${cacheStats.totalEntries}`);
  console.log(`–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: ${cacheStats.validEntries}`);
  console.log(`–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: ${cacheStats.expiredEntries}`);
  console.log(`–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤: ${cacheStats.queueLength}`);
  console.log(`–¢–µ–∫—É—â–∏–π rate limit: ${cacheStats.currentRateLimit}ms`);
}

module.exports = {
  updateAllPrices,
  updateOutdatedPrices,
  recalculateCaseWeights,
  recalculateUserBestItems,
  getPriceStatistics,
  steamPriceService,
  profitabilityCalculator
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2] || 'outdated';

  console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...');
  console.log(`üìä Steam API –∫–ª—é—á: ${process.env.STEAM_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
  console.log(`‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞: ${command}\n`);

  let updatePromise;

  switch (command) {
    case 'all':
      updatePromise = updateAllPrices();
      break;
    case 'outdated':
      updatePromise = updateOutdatedPrices();
      break;
    case 'stats':
      updatePromise = getPriceStatistics();
      break;
    default:
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: all, outdated, stats');
      process.exit(1);
  }

  updatePromise
    .then((result) => {
      if (result) {
        console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}/${result.total}`);
      }
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error);
      process.exit(1);
    });
}
