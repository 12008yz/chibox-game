const { sequelize, Item, CaseTemplate } = require('../models');
const { Op } = require('sequelize');

// ===============================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –ò–ó–ú–ï–ù–ò–¢–ï –ó–î–ï–°–¨
// ===============================

const CONFIG = {
  // ID —à–∞–±–ª–æ–Ω–∞ –∫–µ–π—Å–∞ (–Ω–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ case_templates)
  caseTemplateId: '5a476068-a566-41db-bbc5-e95b0137b649', // –ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ linkItems-complete.js
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ: consumer, industrial, milspec, restricted, classified, covert, contraband, exotic
  category: 'consumer',

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  itemCount: 20,

  // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
  // 'add' - –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
  // 'replace' - –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–µ–π—Å–µ
  mode: 'add'
};

// ===============================

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const CATEGORY_TO_RARITY_MAP = {
  'consumer': 'consumer',
  'industrial': 'industrial',
  'milspec': 'milspec',
  'restricted': 'restricted',
  'classified': 'classified',
  'covert': 'covert',
  'contraband': 'contraband',
  'exotic': 'exotic'
};

// –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
const CATEGORY_PRICE_RANGES = {
  'consumer': { min: 0, max: 50 },
  'industrial': { min: 10, max: 200 },
  'milspec': { min: 50, max: 1000 },
  'restricted': { min: 200, max: 5000 },
  'classified': { min: 1000, max: 15000 },
  'covert': { min: 5000, max: 50000 },
  'contraband': { min: 10000, max: 150000 },
  'exotic': { min: 50000, max: 500000 }
};

async function updateCaseItemPool() {
  try {
    console.log('üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–£–õ–ê –ü–†–ï–î–ú–ï–¢–û–í –í –ö–ï–ô–°–ï');
    console.log(`üì¶ –ö–µ–π—Å ID: ${CONFIG.caseTemplateId}`);
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${CONFIG.category}`);
    console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${CONFIG.itemCount}`);
    console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${CONFIG.mode}\n`);

    // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –∫–µ–π—Å–∞
    const caseTemplate = await CaseTemplate.findOne({
      where: { id: CONFIG.caseTemplateId },
      include: [{
        model: Item,
        as: 'items',
        through: { attributes: [] }
      }]
    });

    if (!caseTemplate) {
      console.error('‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID:', CONFIG.caseTemplateId);
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω –∫–µ–π—Å: "${caseTemplate.name}"`);
    console.log(`üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${caseTemplate.items.length}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const targetRarity = CATEGORY_TO_RARITY_MAP[CONFIG.category];
    const priceRange = CATEGORY_PRICE_RANGES[CONFIG.category];

    if (!targetRarity) {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', CONFIG.category);
      console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', Object.keys(CATEGORY_TO_RARITY_MAP).join(', '));
      return;
    }

    // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const whereClause = {
      is_available: true,
      rarity: targetRarity
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (priceRange) {
      whereClause.price = {
        [Op.between]: [priceRange.min, priceRange.max]
      };
    }

    const availableItems = await Item.findAll({
      where: whereClause,
      attributes: ['id', 'name', 'rarity', 'price'],
      order: [['price', 'ASC']]
    });

    if (availableItems.length === 0) {
      console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${CONFIG.category}"`);
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${availableItems.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const avgPrice = availableItems.reduce((sum, item) => sum + parseFloat(item.price), 0) / availableItems.length;
    const minPrice = Math.min(...availableItems.map(item => parseFloat(item.price)));
    const maxPrice = Math.max(...availableItems.map(item => parseFloat(item.price)));

    console.log(`üí∞ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ‚ÇΩ${minPrice.toFixed(2)} - ‚ÇΩ${maxPrice.toFixed(2)} (—Å—Ä–µ–¥–Ω—è—è: ‚ÇΩ${avgPrice.toFixed(2)})`);

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const selectedItems = getRandomItems(availableItems, CONFIG.itemCount);

    if (selectedItems.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã');
      return;
    }

    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${selectedItems.length}`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let finalItemsList = [];

    if (CONFIG.mode === 'replace') {
      // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      finalItemsList = selectedItems;
      await caseTemplate.setItems(selectedItems);
      console.log(`üîÑ –ó–∞–º–µ–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–µ–π—Å–µ`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      await caseTemplate.addItems(selectedItems);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const updatedCase = await CaseTemplate.findOne({
        where: { id: CONFIG.caseTemplateId },
        include: [{
          model: Item,
          as: 'items',
          through: { attributes: [] }
        }]
      });
      finalItemsList = updatedCase.items;
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(`\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–µ–π—Å–µ: ${finalItemsList.length}`);

    if (finalItemsList.length > 0) {
      const finalAvgPrice = finalItemsList.reduce((sum, item) => sum + parseFloat(item.price), 0) / finalItemsList.length;
      console.log(`üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ‚ÇΩ${finalAvgPrice.toFixed(2)}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      const rarityDistribution = {};
      finalItemsList.forEach(item => {
        rarityDistribution[item.rarity] = (rarityDistribution[item.rarity] || 0) + 1;
      });

      console.log(`üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:`);
      Object.entries(rarityDistribution).forEach(([rarity, count]) => {
        const percentage = (count / finalItemsList.length * 100).toFixed(1);
        console.log(`   ${rarity}: ${count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (${percentage}%)`);
      });
    }

    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
  } finally {
    await sequelize.close();
  }
}

function getRandomItems(items, count) {
  if (items.length === 0 || count <= 0) return [];

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const shuffled = [...items].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, Math.min(count, items.length));
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
updateCaseItemPool();
