const { queues, logger, cleanStalledJobs } = require('../services/queueService');
const { updateUserAchievementProgress } = require('../services/achievementService');
const { xpService } = require('../services/xpService');
const processSteamWithdrawals = require('./send-steam-withdrawals');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...');

// –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanStalledJobs().catch(error => {
  logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á:', error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
queues.achievements.process('update-achievements', async (job) => {
  const { userId, achievementType, value } = job.data;

  try {
    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${achievementType} = ${value}`);

    if (updateUserAchievementProgress && typeof updateUserAchievementProgress === 'function') {
      await updateUserAchievementProgress(userId, achievementType, value);
    } else {
      logger.warn('updateUserAchievementProgress –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return { success: true, message: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:`, error);
    throw error;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
queues.achievements.process('add-experience', async (job) => {
  const { userId, amount, reason } = job.data;

  try {
    logger.info(`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${amount} –∑–∞ "${reason}"`);

    if (xpService && typeof xpService.addExperience === 'function') {
      await xpService.addExperience(userId, amount, reason);
    } else {
      logger.warn('xpService –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –º–µ—Ç–æ–¥ addExperience –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    return { success: true, message: 'XP –Ω–∞—á–∏—Å–ª–µ–Ω' };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP:`, error);
    throw error;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ Steam withdrawal
queues.withdrawals.process('process-withdrawal', async (job) => {
  const { withdrawalId } = job.data;

  try {
    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal #${withdrawalId}`);

    await processSteamWithdrawals();

    return { success: true, message: 'Withdrawal –æ–±—Ä–∞–±–æ—Ç–∞–Ω' };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal:`, error);
    throw error;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
queues.notifications.process('send-notification', async (job) => {
  const { userId, title, message, type } = job.data;

  try {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${title}`);

    const { Notification } = require('../models');
    await Notification.create({
      user_id: userId,
      title,
      message,
      type: type || 'info',
      category: 'system',
      is_read: false,
      importance: 'normal'
    });

    return { success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error);
    throw error;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –æ—Ç—á–µ—Ç–æ–≤
queues.reports.process('generate-report', async (job) => {
  const { type, parameters } = job.data;

  try {
    logger.info(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–∏–ø–∞: ${type}`);

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
    return { success: true, message: `–û—Ç—á–µ—Ç ${type} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω` };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:`, error);
    throw error;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
queues.userStats.process('update-user-stats', async (job) => {
  const { userId, statsData } = job.data;

  try {
    logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    const { User } = require('../models');
    const user = await User.findByPk(userId);

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (statsData.cases_opened) {
        user.total_cases_opened = (user.total_cases_opened || 0) + statsData.cases_opened;
      }
      if (statsData.items_value) {
        user.total_items_value = (user.total_items_value || 0) + statsData.items_value;
      }
      if (statsData.best_item_value && statsData.best_item_value > (user.best_item_value || 0)) {
        user.best_item_value = statsData.best_item_value;
      }

      await user.save();
    }

    return { success: true, message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
    throw error;
  }
});

logger.info('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á');

// Graceful shutdown
process.on('SIGINT', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–æ–≤...');

  const closePromises = Object.values(queues).map(queue => queue.close());
  await Promise.all(closePromises);

  logger.info('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–æ–≤...');

  const closePromises = Object.values(queues).map(queue => queue.close());
  await Promise.all(closePromises);

  logger.info('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(0);
});
