const axios = require('axios');
const fs = require('fs');
const db = require('../models');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Steam
const { getSteamItemData, getSteamItemsBatch, testSteamAPI } = require('./steam-item-fetcher');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ URLs
const COMPLETE_ITEMS_URLS = require('../utils/linkItems-complete');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤ –¥—Ä–æ–ø–∞
const {
  calculateModifiedDropWeights,
  getWeightDistributionStats,
  getPriceCategory
} = require('../utils/dropWeightCalculator');

// –†–ï–ê–õ–¨–ù–´–ï –¶–ï–ù–´ CS2 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ Steam Market –¥–µ–∫–∞–±—Ä—å 2024)
const REALISTIC_ITEM_PRICES = {
  consumer: 4,       // ‚ÇΩ2-8 (P250 Sand Dune, Glock Forest DDPAT –∏ —Ç.–¥.)
  industrial: 15,    // ‚ÇΩ8-25 (AK Blue Laminate BS, M4A4 Faded Zebra –∏ —Ç.–¥.)
  milspec: 80,       // ‚ÇΩ40-150 (Glock Water Elemental, P250 Asiimov –∏ —Ç.–¥.)
  restricted: 400,   // ‚ÇΩ200-800 (AK Phantom Disruptor, M4 Hyper Beast –∏ —Ç.–¥.)
  classified: 1200,  // ‚ÇΩ800-2000 (AK Redline, M4 Asiimov –∏ —Ç.–¥.)
  covert: 8000,      // ‚ÇΩ4000-15000 (AK Fire Serpent, AWP Dragon Lore BS –∏ —Ç.–¥.)
  contraband: 25000, // ‚ÇΩ15000-40000 (–¥–µ—à–µ–≤—ã–µ –Ω–æ–∂–∏ - Gut Safari Mesh BS –∏ —Ç.–¥.)
  exotic: 80000      // ‚ÇΩ50000+ (–¥–æ—Ä–æ–≥–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏)
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ–π—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ –¥–ª—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ 20%
// –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
const CASE_CONFIGS = {
  subscription_tier1: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 1)',
    target_expected_value: 32.26,
    min_subscription_tier: 1,
    drop_weights: {
      consumer: 800,     // 80% - –¥–µ—à–µ–≤—ã–µ ‚ÇΩ4
      industrial: 150,   // 15% - —Å—Ä–µ–¥–Ω–∏–µ ‚ÇΩ15
      milspec: 40,       // 4% - —Ö–æ—Ä–æ—à–∏–µ ‚ÇΩ80
      restricted: 8,     // 0.8% - —Ä–µ–¥–∫–∏–µ ‚ÇΩ400
      classified: 1.5,   // 0.15% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ ‚ÇΩ1200
      covert: 0.4,       // 0.04% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚ÇΩ8000
      contraband: 0.08,  // 0.008% - –Ω–æ–∂–∏ ‚ÇΩ25000
      exotic: 0.02       // 0.002% - –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ÇΩ80000
    }
  },
  subscription_tier2: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 2)',
    target_expected_value: 77.06,
    min_subscription_tier: 2,
    drop_weights: {
      consumer: 700,     // 70% - –¥–µ—à–µ–≤—ã–µ ‚ÇΩ4
      industrial: 200,   // 20% - —Å—Ä–µ–¥–Ω–∏–µ ‚ÇΩ15
      milspec: 80,       // 8% - —Ö–æ—Ä–æ—à–∏–µ ‚ÇΩ80
      restricted: 16,    // 1.6% - —Ä–µ–¥–∫–∏–µ ‚ÇΩ400
      classified: 3,     // 0.3% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ ‚ÇΩ1200
      covert: 0.8,       // 0.08% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚ÇΩ8000
      contraband: 0.15,  // 0.015% - –Ω–æ–∂–∏ ‚ÇΩ25000
      exotic: 0.05       // 0.005% - –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ÇΩ80000
    }
  },
  subscription_tier3: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 3)',
    target_expected_value: 181.84,
    min_subscription_tier: 3,
    drop_weights: {
      consumer: 600,     // 60% - –¥–µ—à–µ–≤—ã–µ ‚ÇΩ4
      industrial: 250,   // 25% - —Å—Ä–µ–¥–Ω–∏–µ ‚ÇΩ15
      milspec: 120,      // 12% - —Ö–æ—Ä–æ—à–∏–µ ‚ÇΩ80
      restricted: 24,    // 2.4% - —Ä–µ–¥–∫–∏–µ ‚ÇΩ400
      classified: 5,     // 0.5% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ ‚ÇΩ1200
      covert: 1,         // 0.1% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚ÇΩ8000
      contraband: 0.2,   // 0.02% - –Ω–æ–∂–∏ ‚ÇΩ25000
      exotic: 0.05       // 0.005% - –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ÇΩ80000
    }
  },
  purchase: {
    name: '–ü–æ–∫—É–ø–Ω—ã–µ –∫–µ–π—Å—ã ‚ÇΩ99',
    target_expected_value: 79.20,
    price: 99,
    min_subscription_tier: 0,
    drop_weights: {
      consumer: 550,     // 55% - –¥–µ—à–µ–≤—ã–µ ‚ÇΩ4
      industrial: 300,   // 30% - —Å—Ä–µ–¥–Ω–∏–µ ‚ÇΩ15
      milspec: 120,      // 12% - —Ö–æ—Ä–æ—à–∏–µ ‚ÇΩ80
      restricted: 25,    // 2.5% - —Ä–µ–¥–∫–∏–µ ‚ÇΩ400
      classified: 4,     // 0.4% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ ‚ÇΩ1200
      covert: 0.8,       // 0.08% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚ÇΩ8000
      contraband: 0.15,  // 0.015% - –Ω–æ–∂–∏ ‚ÇΩ25000
      exotic: 0.05       // 0.005% - –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ÇΩ80000
    }
  },
  premium: {
    name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å—ã ‚ÇΩ499',
    target_expected_value: 399.20,
    price: 499,
    min_subscription_tier: 0,
    drop_weights: {
      consumer: 400,     // 40% - –¥–µ—à–µ–≤—ã–µ ‚ÇΩ4
      industrial: 300,   // 30% - —Å—Ä–µ–¥–Ω–∏–µ ‚ÇΩ15
      milspec: 200,      // 20% - —Ö–æ—Ä–æ—à–∏–µ ‚ÇΩ80
      restricted: 80,    // 8% - —Ä–µ–¥–∫–∏–µ ‚ÇΩ400
      classified: 15,    // 1.5% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ ‚ÇΩ1200
      covert: 4,         // 0.4% - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚ÇΩ8000
      contraband: 0.8,   // 0.08% - –Ω–æ–∂–∏ ‚ÇΩ25000
      exotic: 0.2        // 0.02% - –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ÇΩ80000
    }
  }
};

// –í–°–ï –ö–ï–ô–°–´ –°–û–î–ï–†–ñ–ê–¢ –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ï–î–ú–ï–¢–û–í!
const ITEMS_URLS = {
  subscription_tier1: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  subscription_tier2: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  subscription_tier3: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  purchase: {
    consumer: COMPLETE_ITEMS_URLS.purchase.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.purchase.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.purchase.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.purchase.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.purchase.classified.slice(0, 10),
    covert: COMPLETE_ITEMS_URLS.purchase.covert.slice(0, 6),
    contraband: COMPLETE_ITEMS_URLS.purchase.contraband.slice(0, 4),
    exotic: COMPLETE_ITEMS_URLS.purchase.exotic.slice(0, 3)
  },
  premium: {
    consumer: COMPLETE_ITEMS_URLS.premium.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.premium.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.premium.milspec.slice(0, 20),
    restricted: COMPLETE_ITEMS_URLS.premium.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.premium.classified.slice(0, 10),
    covert: COMPLETE_ITEMS_URLS.premium.covert.slice(0, 8),
    contraband: COMPLETE_ITEMS_URLS.premium.contraband.slice(0, 5),
    exotic: COMPLETE_ITEMS_URLS.premium.exotic.slice(0, 3)
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–æ —Ü–µ–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã)
function determineRarityByPrice(priceUsd) {
  const priceRub = priceUsd * 95; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏

  if (priceRub >= 50000) return 'exotic';      // ‚ÇΩ50000+
  if (priceRub >= 15000) return 'contraband';  // ‚ÇΩ15000+
  if (priceRub >= 4000) return 'covert';       // ‚ÇΩ4000+
  if (priceRub >= 800) return 'classified';    // ‚ÇΩ800+
  if (priceRub >= 200) return 'restricted';    // ‚ÇΩ200+
  if (priceRub >= 40) return 'milspec';        // ‚ÇΩ40+
  if (priceRub >= 8) return 'industrial';      // ‚ÇΩ8+
  return 'consumer';                           // < ‚ÇΩ8
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è market_hash_name –∏–∑ URL
function extractMarketHashNameFromUrl(url) {
  try {
    const match = url.match(/\/market\/listings\/730\/(.+)$/);
    if (match) {
      return decodeURIComponent(match[1]);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ URL:', url, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
async function processItem(url, rarity, caseType, delay = 2000) {
  try {
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${url}`);

    const marketHashName = extractMarketHashNameFromUrl(url);
    if (!marketHashName) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ URL: ${url}`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    const existingItem = await db.Item.findOne({
      where: { steam_market_hash_name: marketHashName }
    });

    if (existingItem) {
      console.log(`‚è≠Ô∏è  –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${marketHashName}`);
      return existingItem;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, delay));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –≤–º–µ—Å—Ç–æ Steam API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const priceRub = REALISTIC_ITEM_PRICES[rarity] || 4;
    const priceUsd = priceRub / 95;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º drop_weight –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞
    let dropWeight = 1;
    const config = CASE_CONFIGS[caseType];
    if (config && config.drop_weights[rarity]) {
      const baseWeight = config.drop_weights[rarity];
      dropWeight = baseWeight + (Math.random() - 0.5) * baseWeight * 0.1; // ¬±5% –≤–∞—Ä–∏–∞—Ü–∏—è
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    const weaponType = extractWeaponType(marketHashName);
    const skinName = extractSkinName(marketHashName);
    const exterior = extractExterior(marketHashName);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newItem = await db.Item.create({
      name: marketHashName,
      description: `CS2 ${rarity} skin: ${marketHashName}`,
      image_url: `https://steamcdn-a.akamaihd.net/apps/730/icons/econ/default_generated/${marketHashName.toLowerCase().replace(/\s+/g, '_')}.png`,
      price: priceRub,
      rarity: rarity,
      drop_weight: Math.round(dropWeight * 100) / 100,
      min_subscription_tier: CASE_CONFIGS[caseType]?.min_subscription_tier || 0,
      weapon_type: weaponType,
      skin_name: skinName,
      steam_market_hash_name: marketHashName,
      is_available: true,
      exterior: exterior,
      quality: extractQuality(marketHashName),
      in_stock: false,
      is_tradable: true,
      float_value: null,
      stickers: null,
      origin: `${caseType}_case`
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${marketHashName} - ‚ÇΩ${priceRub} - ${rarity} - weight: ${Math.round(dropWeight * 100) / 100}`);
    return newItem;

  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, error.message);
    return null;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function extractWeaponType(marketHashName) {
  const parts = marketHashName.split(' | ')[0];
  return parts || 'Unknown';
}

function extractSkinName(marketHashName) {
  const parts = marketHashName.split(' | ');
  if (parts.length < 2) return null;

  const skinWithExterior = parts[1];
  return skinWithExterior.replace(/\s*\([^)]*\)\s*$/, '').trim();
}

function extractExterior(marketHashName) {
  const match = marketHashName.match(/\(([^)]+)\)$/);
  return match ? match[1] : null;
}

function extractQuality(marketHashName) {
  if (marketHashName.includes('StatTrak‚Ñ¢')) return 'StatTrak';
  if (marketHashName.includes('Souvenir')) return 'Souvenir';
  if (marketHashName.includes('‚òÖ')) return 'Special';
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–µ–π—Å–æ–≤
async function createCaseTemplates() {
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤...\n');

  const templates = [
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 1)',
      description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 1 —É—Ä–æ–≤–Ω—è',
      type: 'daily',
      min_subscription_tier: 1,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#4CAF50',
      sort_order: 1
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 2)',
      description: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 2 —É—Ä–æ–≤–Ω—è',
      type: 'daily',
      min_subscription_tier: 2,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#2196F3',
      sort_order: 2
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 3)',
      description: '–ü—Ä–µ–º–∏—É–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 3 —É—Ä–æ–≤–Ω—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
      type: 'daily',
      min_subscription_tier: 3,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#9C27B0',
      sort_order: 3
    },
    {
      name: '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å',
      description: '–ö–µ–π—Å —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ –Ω–∞ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã',
      type: 'premium',
      min_subscription_tier: 0,
      is_active: true,
      price: 99, // 99 —Ä—É–±–ª–µ–π
      color_scheme: '#FF9800',
      sort_order: 4
    },
    {
      name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–µ–π—Å —Å –Ω–æ–∂–∞–º–∏ –∏ –ø–µ—Ä—á–∞—Ç–∫–∞–º–∏',
      type: 'special',
      min_subscription_tier: 0,
      is_active: true,
      price: 499, // 499 —Ä—É–±–ª–µ–π
      color_scheme: '#F44336',
      sort_order: 5
    }
  ];

  const createdTemplates = [];
  for (const template of templates) {
    try {
      const existing = await db.CaseTemplate.findOne({ where: { name: template.name } });
      if (!existing) {
        const created = await db.CaseTemplate.create(template);
        createdTemplates.push(created);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–µ–π—Å–∞: ${template.name}`);
      } else {
        createdTemplates.push(existing);
        console.log(`‚è≠Ô∏è  –®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${template.name}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.name}:`, error.message);
    }
  }

  return createdTemplates;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function populateDatabase(limitPerCategory = 10) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ CS2...\n');

  let totalItems = 0;
  let successfulItems = 0;

  // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤
  await createCaseTemplates();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–µ–π—Å–∞
  for (const [caseType, categories] of Object.entries(ITEMS_URLS)) {
    console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: ${CASE_CONFIGS[caseType]?.name || caseType}`);

    for (const [rarity, urls] of Object.entries(categories)) {
      console.log(`\nüéØ –†–µ–¥–∫–æ—Å—Ç—å: ${rarity} (${urls.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)`);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const urlsToProcess = urls.slice(0, limitPerCategory);

      for (let i = 0; i < urlsToProcess.length; i++) {
        const url = urlsToProcess[i];
        console.log(`[${i + 1}/${urlsToProcess.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${rarity}`);

        const result = await processItem(url, rarity, caseType, 1000);
        totalItems++;

        if (result) {
          successfulItems++;
        }

        // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < urlsToProcess.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
    }
  }

  console.log('\nüéâ –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`- –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalItems}`);
  console.log(`- –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successfulItems}`);
  console.log(`- –û—à–∏–±–æ–∫: ${totalItems - successfulItems}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
  await validateProfitability();

  // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤
  await linkItemsToCaseTemplates();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
async function validateProfitability() {
  console.log('\nüí∞ –ü–†–û–í–ï–†–ö–ê –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò:\n');

  for (const [caseType, config] of Object.entries(CASE_CONFIGS)) {
    console.log(`üì¶ ${config.name}:`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω
    let expectedValue = 0;
    let totalWeight = 0;

    Object.entries(config.drop_weights).forEach(([rarity, weight]) => {
      const price = REALISTIC_ITEM_PRICES[rarity] || 0;
      expectedValue += (weight / 1000) * price;
      totalWeight += weight;
      console.log(`   ${rarity}: –≤–µ—Å ${weight}, —Ü–µ–Ω–∞ ‚ÇΩ${price}, –≤–∫–ª–∞–¥: ‚ÇΩ${((weight / 1000) * price).toFixed(2)}`);
    });

    console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${expectedValue.toFixed(2)}`);
    console.log(`   –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${config.target_expected_value}`);

    if (config.price) {
      const profit = config.price - expectedValue;
      const profitability = (profit / config.price * 100);
      console.log(`   –¶–µ–Ω–∞ –∫–µ–π—Å–∞: ‚ÇΩ${config.price}`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit.toFixed(2)}`);
      console.log(`   –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${profitability.toFixed(1)}%`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${profitability >= 18 && profitability <= 25 ? '‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–û' : profitability >= 15 ? '‚ö†Ô∏è  –ü–†–ò–ï–ú–õ–ï–ú–û' : '‚ùå –£–ë–´–¢–û–ß–ù–û'}`);
    } else {
      console.log(`   –°—Ç–∞—Ç—É—Å: ${expectedValue <= config.target_expected_value ? '‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' : '‚ùå –ü–†–ï–í–´–®–ê–ï–¢ –õ–ò–ú–ò–¢'}`);
    }
    console.log('');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤
async function linkItemsToCaseTemplates() {
  console.log('\nüîó –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤...\n');

  const CASE_ITEM_MAPPING = {
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 1)': 'subscription_tier1_case',
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 2)': 'subscription_tier2_case',
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 3)': 'subscription_tier3_case',
    '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å': 'purchase_case',
    '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å': 'premium_case'
  };

  try {
    const caseTemplates = await db.CaseTemplate.findAll({
      where: { is_active: true }
    });

    for (const template of caseTemplates) {
      console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: ${template.name}`);

      let originPattern = CASE_ITEM_MAPPING[template.name];

      if (!originPattern) {
        if (template.name.includes('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π') || template.type === 'daily') {
          if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 1')) {
            originPattern = 'subscription_tier1_case';
          } else if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 2')) {
            originPattern = 'subscription_tier2_case';
          } else if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 3')) {
            originPattern = 'subscription_tier3_case';
          } else {
            originPattern = 'subscription_tier1_case';
          }
        } else if (template.name.includes('–ü–æ–∫—É–ø–Ω–æ–π') || (template.price && template.price <= 150)) {
          originPattern = 'purchase_case';
        } else if (template.name.includes('–ü—Ä–µ–º–∏—É–º') || (template.price && template.price > 150)) {
          originPattern = 'premium_case';
        }
      }

      if (!originPattern) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–ª—è –∫–µ–π—Å–∞: ${template.name}`);
        continue;
      }

      const items = await db.Item.findAll({
        where: {
          is_available: true,
          origin: originPattern
        }
      });

      if (items.length === 0) {
        console.log(`   ‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å origin: ${originPattern}`);
        continue;
      }

      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      await template.setItems([]);
      await template.addItems(items);

      console.log(`   ‚úÖ –°–≤—è–∑–∞–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–æ–º: ${template.name}`);
    }

    console.log('\nüéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–∞–º–∏:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  populateDatabase,
  processItem,
  createCaseTemplates,
  validateProfitability,
  linkItemsToCaseTemplates,
  CASE_CONFIGS,
  ITEMS_URLS,
  REALISTIC_ITEM_PRICES
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  populateDatabase(5).catch(console.error); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}
