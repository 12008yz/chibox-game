// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const db = require('../models');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const SteamPriceService = require('../services/steamPriceService');
const { calculateCorrectWeightByPrice } = require('../utils/dropWeightCalculator');
const COMPLETE_ITEMS_URLS = require('../utils/linkItems-complete');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const steamPriceService = new SteamPriceService(process.env.STEAM_API_KEY);

// –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ü–µ–Ω
const CACHE_FILE = path.join(__dirname, 'import-cache.json');
let cache = {};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadCache() {
  try {
    if (fs.existsSync(CACHE_FILE)) {
      cache = JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à —Å ${Object.keys(cache).length} –∑–∞–ø–∏—Å—è–º–∏`);
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à:', error.message);
    cache = {};
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
function saveCache() {
  try {
    fs.writeFileSync(CACHE_FILE, JSON.stringify(cache, null, 2));
    console.log(`üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ${Object.keys(cache).length} –∑–∞–ø–∏—Å—è–º–∏`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞:', error.message);
  }
}

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
async function processBatch(items, batchSize = 1) { // –î–µ–ª–∞–µ–º –ø–æ 1 –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
  const results = [];

  console.log(`üîÑ –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏`);

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç ${i + 1}/${items.length}: ${extractMarketHashNameFromUrl(item.url)}`);

    try {
      const result = await processItemOptimized(item.url, item.rarity, item.caseType);

      if (result) {
        results.push(result);
        console.log(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç ${i + 1}/${items.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–µ—Å–ª–∏ result.isNew === true)
        if (result.isNew && i + 1 < items.length) {
          const delay = 8000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
          console.log(`‚è≥ –ü–∞—É–∑–∞ ${delay/1000} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      } else {
        console.log(`‚ùå –ü—Ä–µ–¥–º–µ—Ç ${i + 1}/${items.length} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${i + 1}/${items.length}:`, error.message);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    saveCache();
  }

  return results;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
async function processItemOptimized(url, originalRarity, caseType) {
  try {
    const marketHashName = extractMarketHashNameFromUrl(url);
    if (!marketHashName) {
      console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL: ${url}`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const existingItem = await db.Item.findOne({
      where: { steam_market_hash_name: marketHashName }
    });

    if (existingItem) {
      console.log(`‚è≠Ô∏è –ü—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${marketHashName}`);
      return { ...existingItem.toJSON(), isNew: false };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = marketHashName;
    let priceData = cache[cacheKey]?.price;
    let imageUrl = cache[cacheKey]?.image;

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    if (!priceData || isDataExpired(cache[cacheKey]?.priceTimestamp)) {
      console.log(`üí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è: ${marketHashName}`);
      priceData = await steamPriceService.getItemPrice(marketHashName);

      // –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—É
      if (!cache[cacheKey]) cache[cacheKey] = {};
      cache[cacheKey].price = priceData;
      cache[cacheKey].priceTimestamp = Date.now();
    } else {
      console.log(`üìã –¶–µ–Ω–∞ –∏–∑ –∫—ç—à–∞: ${marketHashName}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    if (!imageUrl || !isValidSteamImageUrl(imageUrl)) {
      console.log(`üñºÔ∏è –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${marketHashName}`);
      imageUrl = await getItemImageOptimized(marketHashName, url);

      // –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (!cache[cacheKey]) cache[cacheKey] = {};
      cache[cacheKey].image = imageUrl;
    } else {
      console.log(`üìã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: ${marketHashName}`);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ —Ä–µ–¥–∫–æ—Å—Ç—å
    let priceRub, actualRarity, priceUsd;
    if (priceData.success && priceData.price_rub > 0) {
      priceRub = priceData.price_rub;
      priceUsd = priceData.price_usd;
      actualRarity = priceData.category;
    } else {
      priceRub = FALLBACK_PRICES[originalRarity] || 8;
      priceUsd = Math.round((priceRub / 95) * 100) / 100;
      actualRarity = originalRarity;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    const newItem = await createItemInDatabase(marketHashName, imageUrl, priceRub, priceUsd, actualRarity, caseType);

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${marketHashName} - ‚ÇΩ${priceRub}`);
    return { ...newItem.toJSON(), isNew: true };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, error.message);
    return null;
  }
}

// –¢–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market
async function getItemImageOptimized(marketHashName, originalUrl) {
  try {
    console.log(`üîç –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${marketHashName}`);
    console.log(`üìÑ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${originalUrl}`);

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Steam Market –Ω–∞–ø—Ä—è–º—É—é
    const imageUrl = await parseExactImageFromSteamPage(originalUrl);

    if (imageUrl) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
      return imageUrl;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${marketHashName}`);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${marketHashName}:`, error.message);
    return null;
  }
}

// –¢–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–ª–æ–∫–∞ market_listing_largeimage
async function parseExactImageFromSteamPage(url) {
  try {
    console.log(`üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Steam Market: ${url}`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    const config = {
      timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'max-age=0'
      }
    };

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const response = await axios.get(url, config);

    if (response.status !== 200) {
      throw new Error(`HTTP —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å –ø–æ–º–æ—â—å—é cheerio
    const $ = cheerio.load(response.data);

    // –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ market_listing_largeimage
    console.log(`üîç –ò—â–µ–º –±–ª–æ–∫ <div class="market_listing_largeimage">`);

    const largeImageDiv = $('.market_listing_largeimage');

    if (largeImageDiv.length === 0) {
      console.log(`‚ö†Ô∏è –ë–ª–æ–∫ .market_listing_largeimage –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º src –∏–∑ img –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    const imgElement = largeImageDiv.find('img');

    if (imgElement.length === 0) {
      console.log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç <img> –≤–Ω—É—Ç—Ä–∏ .market_listing_largeimage –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    const imageSrc = imgElement.attr('src');

    if (!imageSrc) {
      console.log(`‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç src —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Steam
    if (!isValidSteamImageUrl(imageSrc)) {
      console.log(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageSrc}`);
      return null;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ market_listing_largeimage: ${imageSrc}`);
    return imageSrc;

  } catch (error) {
    if (error.code === 'ECONNABORTED') {
      console.error(`‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
    } else if (error.response) {
      console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞ ${error.response.status}: ${url}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${url}:`, error.message);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Steam
function isValidSteamImageUrl(url) {
  if (!url || typeof url !== 'string') {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Steam CDN
  const steamImageRegex = /^https?:\/\/(steamcommunity-a\.akamaihd\.net|steamcdn-a\.akamaihd\.net|steamuserimages-a\.akamaihd\.net|community\.akamai\.steamstatic\.com|cdn\.akamai\.steamstatic\.com)/;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const validImagePattern = /\.(jpg|jpeg|png|gif|webp)(\?.*)?$|\/\d+fx\d+f?$/i;

  return steamImageRegex.test(url) && validImagePattern.test(url);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ (24 —á–∞—Å–∞)
function isDataExpired(timestamp, maxAge = 24 * 60 * 60 * 1000) {
  return !timestamp || (Date.now() - timestamp) > maxAge;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createItemInDatabase(marketHashName, imageUrl, priceRub, priceUsd, actualRarity, caseType) {
  const weaponType = extractWeaponType(marketHashName);
  const skinName = extractSkinName(marketHashName);
  const exterior = extractExterior(marketHashName);

  let itemOrigin = `${caseType}_case`;

  const steamMarketUrl = `https://steamcommunity.com/market/listings/730/${encodeURIComponent(marketHashName)}`;

  return await db.Item.create({
    name: marketHashName,
    description: `CS2 ${actualRarity} skin ${marketHashName}`,
    image_url: imageUrl,
    price: priceRub,
    rarity: actualRarity,
    drop_weight: 1,
    weapon_type: weaponType,
    skin_name: skinName,
    steam_market_hash_name: marketHashName,
    steam_market_url: steamMarketUrl,
    is_available: true,
    exterior: exterior,
    quality: extractQuality(marketHashName),
    in_stock: false,
    is_tradable: true,
    float_value: null,
    stickers: null,
    origin: itemOrigin,
    actual_price_rub: priceRub,
    price_last_updated: new Date(),
    price_source: 'steam_api'
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function populateDatabaseOptimized(limitPerCategory = 100) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS2...\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à
  loadCache();

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const allItems = [];

  for (const [caseType, categories] of Object.entries(ITEMS_URLS)) {
    for (const [rarity, urls] of Object.entries(categories)) {
      const itemsToProcess = urls.slice(0, limitPerCategory);

      itemsToProcess.forEach(url => {
        allItems.push({ url, rarity, caseType });
      });
    }
  }

  console.log(`üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${allItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

  // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤
  await createCaseTemplates();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
  const results = await processBatch(allItems, 5); // 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞—Ç—á–µ

  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫—ç—à
  saveCache();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  await updateItemWeights();
  await linkItemsToCaseTemplates();

  console.log('\nüéâ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const FALLBACK_PRICES = {
  consumer: 8,
  industrial: 20,
  milspec: 90,
  restricted: 500,
  classified: 1500,
  covert: 10000,
  contraband: 30000,
  exotic: 100000
};

// –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–µ–π—Å–æ–≤
const ITEMS_URLS = {
  free_daily: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 50),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 50),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 20),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 10),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 5),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 5)
  },
  subscription_tier1: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 100),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 1000),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 1000),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 100),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 1000),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 100)
  },
  subscription_tier2: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 1000),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 100),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 100),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 100),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 100),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 100)
  },
  subscription_tier3: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 100),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 100),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 100),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 100),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 100),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 100),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 100)
  },
  bonus: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 100),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 100),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 100),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 50),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 50),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 50)
  },
  purchase: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 100),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 100),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 100),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 100),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 100),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 100)
  },
  premium: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 1000),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 1000),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 100),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 100),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 100),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 100),
    contraband: COMPLETE_ITEMS_URLS.subscription.extraordinary.slice(0, 100),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 100)
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
function extractMarketHashNameFromUrl(url) {
  try {
    const match = url.match(/\/market\/listings\/730\/(.+)$/);
    if (match) {
      return decodeURIComponent(match[1]);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ URL:', url, error.message);
    return null;
  }
}

function extractWeaponType(marketHashName) {
  const parts = marketHashName.split(' | ')[0];
  return parts || 'Unknown';
}

function extractSkinName(marketHashName) {
  const parts = marketHashName.split(' | ');
  if (parts.length < 2) return null;
  const skinWithExterior = parts[1];
  return skinWithExterior.replace(/\s*\([^)]*\)\s*$/, '').trim();
}

function extractExterior(marketHashName) {
  const match = marketHashName.match(/\(([^)]+)\)$/);
  return match ? match[1] : null;
}

function extractQuality(marketHashName) {
  if (marketHashName.includes('StatTrak‚Ñ¢')) return 'StatTrak';
  if (marketHashName.includes('Souvenir')) return 'Souvenir';
  if (marketHashName.includes('‚òÖ')) return 'Special';
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ë–î
async function updateItemWeights() {
  console.log('\n‚öñÔ∏è  –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...\n');

  try {
    const items = await db.Item.findAll({
      where: { is_available: true },
      order: [['price', 'DESC']]
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${items.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

    let updatedCount = 0;
    const significantItems = [];

    for (const item of items) {
      const price = parseFloat(item.price) || 0;
      const correctWeight = calculateCorrectWeightByPrice(price);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –ë–î
      await item.update({ drop_weight: correctWeight });
      updatedCount++;

      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
      if (price >= 1000) {
        significantItems.push({
          name: item.name.substring(0, 40),
          price: price,
          weight: correctWeight
        });
      }

      // –ü—Ä–æ–≥—Ä–µ—Å—Å
      if (updatedCount % 100 === 0) {
        process.stdout.write(`\r‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}/${items.length}`);
      }
    }

    console.log(`\r‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${updatedCount}/${items.length}${' '.repeat(20)}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏
    if (significantItems.length > 0) {
      console.log('üíé –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏:');
      console.log('‚îÄ'.repeat(80));
      significantItems.slice(0, 10).forEach(item => {
        console.log(`   ${item.name.padEnd(40)} | ${item.price.toFixed(2).padStart(10)}‚ÇΩ | –í–µ—Å: ${item.weight.toFixed(4)}`);
      });
      console.log('‚îÄ'.repeat(80));
    }

    console.log('‚úÖ –í–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ –Ω–æ–≤–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ!');
    console.log('üí∞ –î–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –≤—ã–ø–∞–¥–∞—é—Ç –≤ 11-20 —Ä–∞–∑ —Ä–µ–∂–µ\n');

    return { success: true, updatedCount };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤:', error.message);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–µ–π—Å–æ–≤
async function createCaseTemplates() {
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤...\n');

  const templates = [
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏',
      image_url: '/images/cases/free.png',
      type: 'daily',
      min_subscription_tier: 0,
      is_active: true,
      cooldown_hours: 0.003,
      price: null,
      color_scheme: '#4CAF50',
      sort_order: 1
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è –°—Ç–∞—Ç—É—Å',
      image_url: '/images/cases/status.png',
      type: 'daily',
      min_subscription_tier: 1,
      is_active: true,
      cooldown_hours: 0.003,
      price: null,
      color_scheme: '#2196F3',
      sort_order: 2
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å+',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è –°—Ç–∞—Ç—É—Å+',
      image_url: '/images/cases/+.png',
      type: 'daily',
      min_subscription_tier: 2,
      is_active: true,
      cooldown_hours: 0.003,
      price: null,
      color_scheme: '#9C27B0',
      sort_order: 3
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å++',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è –°—Ç–∞—Ç—É—Å++',
      image_url: '/images/cases/++.png',
      type: 'daily',
      min_subscription_tier: 3,
      is_active: true,
      cooldown_hours: 0.003,
      price: null,
      color_scheme: '#673AB7',
      sort_order: 4
    },
    {
      name: '–ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å',
      description: '–ö–µ–π—Å, –ø–æ–ª—É—á–∞–µ–º—ã–π –≤ –±–æ–Ω—É—Å–Ω–æ–π –∏–≥—Ä–µ',
      image_url: '/images/cases/bonus.png',
      type: 'special',
      min_subscription_tier: 0,
      is_active: true,
      cooldown_hours: 0,
      price: null,
      color_scheme: '#FF5722',
      sort_order: 5
    },
    {
      name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–µ–π—Å',
      description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–µ–π—Å —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏',
      image_url: '/images/cases/99.png',
      type: 'premium',
      min_subscription_tier: 0,
      is_active: true,
      price: 99,
      color_scheme: '#FF9800',
      sort_order: 6
    },
    {
      name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å',
      description: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å —Å —Ä–µ–¥–∫–∏–º–∏ –∏ –¥–æ—Ä–æ–≥–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏',
      image_url: '/images/cases/499.png',
      type: 'premium',
      min_subscription_tier: 0,
      is_active: true,
      price: 499,
      color_scheme: '#F44336',
      sort_order: 7
    }
  ];

  const createdTemplates = [];
  for (const template of templates) {
    try {
      const existing = await db.CaseTemplate.findOne({ where: { name: template.name } });
      if (!existing) {
        const created = await db.CaseTemplate.create(template);
        createdTemplates.push(created);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–µ–π—Å–∞: ${template.name}`);
      } else {
        createdTemplates.push(existing);
        console.log(`‚è≠Ô∏è –®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${template.name}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.name}:`, error.message);
    }
  }

  return createdTemplates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤
async function linkItemsToCaseTemplates() {
  console.log('\nüîó –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤...\n');

  try {
    const caseTemplates = await db.CaseTemplate.findAll({
      where: { is_active: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const allItems = await db.Item.findAll({
      where: { is_available: true }
    });

    console.log(`üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${allItems.length}\n`);

    for (const template of caseTemplates) {
      console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: ${template.name}`);

      let items = [];

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–µ–π—Å–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ü–µ–Ω—ã
      // –í–ê–ñ–ù–û: –ú–Ω–æ–≥–æ –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ + —Ä–µ–¥–∫–∏–µ –¥–æ—Ä–æ–≥–∏–µ = –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
      switch(template.name) {
        case '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π':
          // –î–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–¥–æ 50‚ÇΩ) - –±–∞–∑–æ–≤—ã–π –∫–µ–π—Å
          items = allItems.filter(item => item.price <= 50);
          break;

        case '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å':
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Å–Ω–æ–≤–∞ –¥–æ 150‚ÇΩ + —Ä–µ–¥–∫–∏–µ –¥–∂–µ–∫–ø–æ—Ç—ã –¥–æ 3000‚ÇΩ
          // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–µ—à–µ–≤—ã—Ö (–≤–µ—Å ~200) + –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ –¥–æ—Ä–æ–≥–∏–µ (–≤–µ—Å ~4)
          items = allItems.filter(item => item.price <= 3000);
          console.log(`   üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ 150‚ÇΩ: ${allItems.filter(i => i.price <= 150).length}`);
          console.log(`   üé∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∂–µ–∫–ø–æ—Ç-–ø—Ä–µ–¥–º–µ—Ç–æ–≤ (150‚ÇΩ-3000‚ÇΩ): ${allItems.filter(i => i.price > 150 && i.price <= 3000).length}`);
          break;

        case '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å+':
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Å–Ω–æ–≤–∞ –¥–æ 800‚ÇΩ + –¥–∂–µ–∫–ø–æ—Ç—ã –¥–æ 8000‚ÇΩ
          // –ú–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ + –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ –¥–æ—Ä–æ–≥–∏–µ
          items = allItems.filter(item => item.price <= 8000);
          console.log(`   üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ 800‚ÇΩ: ${allItems.filter(i => i.price <= 800).length}`);
          console.log(`   üé∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∂–µ–∫–ø–æ—Ç-–ø—Ä–µ–¥–º–µ—Ç–æ–≤ (800‚ÇΩ-8000‚ÇΩ): ${allItems.filter(i => i.price > 800 && i.price <= 8000).length}`);
          break;

        case '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å - –°—Ç–∞—Ç—É—Å++':
          // –î–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–¥–æ 5000‚ÇΩ) - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
          items = allItems.filter(item => item.price <= 5000);
          break;

        case '–ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å':
          // –°—Ä–µ–¥–Ω–∏–µ –∏ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (30‚ÇΩ - 1000‚ÇΩ)
          items = allItems.filter(item => item.price >= 30 && item.price <= 1000);
          break;

        case '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–µ–π—Å':
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–µ–π—Å–∞ –∑–∞ 99‚ÇΩ: –æ—Å–Ω–æ–≤–∞ 30-500‚ÇΩ + –¥–∂–µ–∫–ø–æ—Ç—ã –¥–æ 10000‚ÇΩ
          // –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –≤–µ—Å–æ–≤ (–¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–µ—Å ~0.8-2)
          items = allItems.filter(item => item.price >= 30 && item.price <= 10000);
          console.log(`   üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ 30-500‚ÇΩ: ${allItems.filter(i => i.price >= 30 && i.price <= 500).length}`);
          console.log(`   üé∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∂–µ–∫–ø–æ—Ç-–ø—Ä–µ–¥–º–µ—Ç–æ–≤ (500‚ÇΩ-10000‚ÇΩ): ${allItems.filter(i => i.price > 500 && i.price <= 10000).length}`);
          break;

        case '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å':
          // –î–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–æ—Ç 100‚ÇΩ) - –ø—Ä–µ–º–∏—É–º –∫–µ–π—Å –∑–∞ 499‚ÇΩ
          items = allItems.filter(item => item.price >= 100);
          break;

        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å: ${template.name}`);
          continue;
      }

      if (items.length === 0) {
        console.log(`   ‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–µ–π—Å–∞: ${template.name}`);
        continue;
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      await template.setItems([]);
      await template.addItems(items);

      console.log(`   ‚úÖ –°–≤—è–∑–∞–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–æ–º: ${template.name}`);
    }

    console.log('\nüéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–∞–º–∏:', error);
  }
}

module.exports = {
  populateDatabaseOptimized,
  processItemOptimized,
  createCaseTemplates,
  linkItemsToCaseTemplates,
  loadCache,
  saveCache
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...');

  populateDatabaseOptimized(1000) // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–¥–æ 1000 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
    .then(() => {
      console.log('\nüéâ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
      process.exit(1);
    });
}
