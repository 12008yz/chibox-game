const axios = require('axios');
const fs = require('fs');
const db = require('../models');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
const SteamPriceService = require('../services/steamPriceService');
const ProfitabilityCalculator = require('../utils/profitabilityCalculator');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ URLs
const COMPLETE_ITEMS_URLS = require('../utils/linkItems-complete');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const steamPriceService = new SteamPriceService(process.env.STEAM_API_KEY);
const profitabilityCalculator = new ProfitabilityCalculator(0.2); // 20% –ø—Ä–∏–±—ã–ª—å

// FALLBACK –¶–ï–ù–´ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Steam API)
const FALLBACK_PRICES = {
  consumer: 8,       // ‚ÇΩ8 (–±–∞–∑–æ–≤—ã–µ —Å–∫–∏–Ω—ã)
  industrial: 20,    // ‚ÇΩ20 (–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã)
  milspec: 90,       // ‚ÇΩ90 (—Å–∏–Ω–∏–µ —Å–∫–∏–Ω—ã)
  restricted: 500,   // ‚ÇΩ500 (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Å–∫–∏–Ω—ã)
  classified: 1500,  // ‚ÇΩ1500 (—Ä–æ–∑–æ–≤—ã–µ —Å–∫–∏–Ω—ã)
  covert: 10000,     // ‚ÇΩ10000 (–∫—Ä–∞—Å–Ω—ã–µ —Å–∫–∏–Ω—ã)
  contraband: 30000, // ‚ÇΩ30000 (–Ω–æ–∂–∏)
  exotic: 100000     // ‚ÇΩ100000 (–ø–µ—Ä—á–∞—Ç–∫–∏)
};

// –ë–ê–ó–û–í–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ö–ï–ô–°–û–í (–≤–µ—Å–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
const BASE_CASE_CONFIGS = {
  subscription_tier1: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 1)',
    price: null, // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
    target_expected_value: 40, // –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞
    min_subscription_tier: 1,
    type: 'daily'
  },
  subscription_tier2: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 2)',
    price: null, // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
    target_expected_value: 80, // –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è 2 —É—Ä–æ–≤–Ω—è
    min_subscription_tier: 2,
    type: 'daily'
  },
  subscription_tier3: {
    name: '–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (–£—Ä–æ–≤–µ–Ω—å 3)',
    price: null, // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
    target_expected_value: 180, // –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è 3 —É—Ä–æ–≤–Ω—è
    min_subscription_tier: 3,
    type: 'daily'
  },
  purchase: {
    name: '–ü–æ–∫—É–ø–Ω—ã–µ –∫–µ–π—Å—ã ‚ÇΩ99',
    price: 99,
    target_expected_value: 79.20, // 80% –æ—Ç —Ü–µ–Ω—ã (20% –ø—Ä–∏–±—ã–ª—å)
    min_subscription_tier: 0,
    type: 'premium'
  },
  premium: {
    name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å—ã ‚ÇΩ499',
    price: 499,
    target_expected_value: 399.20, // 80% –æ—Ç —Ü–µ–Ω—ã (20% –ø—Ä–∏–±—ã–ª—å)
    min_subscription_tier: 0,
    type: 'special'
  }
};

// –í–°–ï –ö–ï–ô–°–´ –°–û–î–ï–†–ñ–ê–¢ –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ï–î–ú–ï–¢–û–í!
const ITEMS_URLS = {
  subscription_tier1: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  subscription_tier2: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  subscription_tier3: {
    consumer: COMPLETE_ITEMS_URLS.subscription.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.subscription.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.subscription.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.subscription.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.subscription.classified.slice(0, 8),
    covert: COMPLETE_ITEMS_URLS.subscription.covert.slice(0, 5),
    contraband: COMPLETE_ITEMS_URLS.subscription.contraband.slice(0, 3),
    exotic: COMPLETE_ITEMS_URLS.subscription.exotic.slice(0, 2)
  },
  purchase: {
    consumer: COMPLETE_ITEMS_URLS.purchase.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.purchase.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.purchase.milspec.slice(0, 25),
    restricted: COMPLETE_ITEMS_URLS.purchase.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.purchase.classified.slice(0, 10),
    covert: COMPLETE_ITEMS_URLS.purchase.covert.slice(0, 6),
    contraband: COMPLETE_ITEMS_URLS.purchase.contraband.slice(0, 4),
    exotic: COMPLETE_ITEMS_URLS.purchase.exotic.slice(0, 3)
  },
  premium: {
    consumer: COMPLETE_ITEMS_URLS.premium.consumer.slice(0, 50),
    industrial: COMPLETE_ITEMS_URLS.premium.industrial.slice(0, 30),
    milspec: COMPLETE_ITEMS_URLS.premium.milspec.slice(0, 20),
    restricted: COMPLETE_ITEMS_URLS.premium.restricted.slice(0, 15),
    classified: COMPLETE_ITEMS_URLS.premium.classified.slice(0, 10),
    covert: COMPLETE_ITEMS_URLS.premium.covert.slice(0, 8),
    contraband: COMPLETE_ITEMS_URLS.premium.contraband.slice(0, 5),
    exotic: COMPLETE_ITEMS_URLS.premium.exotic.slice(0, 3)
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–æ —Ü–µ–Ω–µ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ 2025)
function determineRarityByPrice(priceRub) {
  if (priceRub >= 80000) return 'exotic';      // ‚ÇΩ80,000+ (–¥–æ—Ä–æ–≥–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏)
  if (priceRub >= 25000) return 'contraband';  // ‚ÇΩ25,000+ (–Ω–æ–∂–∏)
  if (priceRub >= 8000) return 'covert';       // ‚ÇΩ8,000+ (–∫—Ä–∞—Å–Ω—ã–µ —Å–∫–∏–Ω—ã)
  if (priceRub >= 1200) return 'classified';   // ‚ÇΩ1,200+ (—Ä–æ–∑–æ–≤—ã–µ —Å–∫–∏–Ω—ã)
  if (priceRub >= 400) return 'restricted';    // ‚ÇΩ400+ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Å–∫–∏–Ω—ã)
  if (priceRub >= 80) return 'milspec';        // ‚ÇΩ80+ (—Å–∏–Ω–∏–µ —Å–∫–∏–Ω—ã)
  if (priceRub >= 15) return 'industrial';     // ‚ÇΩ15+ (—Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–µ)
  return 'consumer';                           // < ‚ÇΩ15 (–±–µ–ª—ã–µ)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è market_hash_name –∏–∑ URL
function extractMarketHashNameFromUrl(url) {
  try {
    const match = url.match(/\/market\/listings\/730\/(.+)$/);
    if (match) {
      return decodeURIComponent(match[1]);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ URL:', url, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
async function processItem(url, originalRarity, caseType) {
  try {
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${url}`);

    const marketHashName = extractMarketHashNameFromUrl(url);
    if (!marketHashName) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ URL: ${url}`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    const existingItem = await db.Item.findOne({
      where: { steam_market_hash_name: marketHashName }
    });

    if (existingItem) {
      console.log(`‚è≠Ô∏è  –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${marketHashName}`);
      return existingItem;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ Steam API
    console.log(`üí∞ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è: ${marketHashName}`);
    const priceData = await steamPriceService.getItemPrice(marketHashName);

    let priceRub, actualRarity, priceUsd;

    if (priceData.success && priceData.price_rub > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Steam
      priceRub = priceData.price_rub;
      priceUsd = priceData.price_usd;
      actualRarity = priceData.category;

      console.log(`‚úÖ Steam API: ${marketHashName} - ‚ÇΩ${priceRub} - ${actualRarity}`);
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
      priceRub = FALLBACK_PRICES[originalRarity] || 8;
      priceUsd = Math.round((priceRub / 95) * 100) / 100;
      actualRarity = originalRarity;

      console.log(`üìù Fallback —Ü–µ–Ω–∞: ${marketHashName} - ‚ÇΩ${priceRub} - ${actualRarity}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Steam Market
    const steamMarketUrl = `https://steamcommunity.com/market/listings/730/${encodeURIComponent(marketHashName)}`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const imageUrl = url;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    const weaponType = extractWeaponType(marketHashName);
    const skinName = extractSkinName(marketHashName);
    const exterior = extractExterior(marketHashName);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (drop_weight –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
    const newItem = await db.Item.create({
      name: marketHashName,
      description: `CS2 ${actualRarity} skin ${marketHashName}`,
      image_url: imageUrl,
      price: priceRub,
      rarity: actualRarity,
      drop_weight: 1, // –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ—Å, –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
      min_subscription_tier: BASE_CASE_CONFIGS[caseType]?.min_subscription_tier || 0,
      weapon_type: weaponType,
      skin_name: skinName,
      steam_market_hash_name: marketHashName,
      steam_market_url: steamMarketUrl,
      is_available: true,
      exterior: exterior,
      quality: extractQuality(marketHashName),
      in_stock: false,
      is_tradable: true,
      float_value: null,
      stickers: null,
      origin: `${caseType}_case`,
      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
      actual_price_rub: priceRub,
      price_last_updated: new Date(),
      price_source: priceData.success ? 'steam_api' : 'fallback'
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${marketHashName} - ‚ÇΩ${priceRub} - ${actualRarity}`);
    return newItem;

  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, error.message);
    return null;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function extractWeaponType(marketHashName) {
  const parts = marketHashName.split(' | ')[0];
  return parts || 'Unknown';
}

function extractSkinName(marketHashName) {
  const parts = marketHashName.split(' | ');
  if (parts.length < 2) return null;

  const skinWithExterior = parts[1];
  return skinWithExterior.replace(/\s*\([^)]*\)\s*$/, '').trim();
}

function extractExterior(marketHashName) {
  const match = marketHashName.match(/\(([^)]+)\)$/);
  return match ? match[1] : null;
}

function extractQuality(marketHashName) {
  if (marketHashName.includes('StatTrak‚Ñ¢')) return 'StatTrak';
  if (marketHashName.includes('Souvenir')) return 'Souvenir';
  if (marketHashName.includes('‚òÖ')) return 'Special';
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–µ–π—Å–æ–≤
async function createCaseTemplates() {
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º...\n');

  const templates = [
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 1)',
      description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 1 —É—Ä–æ–≤–Ω—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ Steam Market',
      type: 'daily',
      min_subscription_tier: 1,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#4CAF50',
      sort_order: 1
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 2)',
      description: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 2 —É—Ä–æ–≤–Ω—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏',
      type: 'daily',
      min_subscription_tier: 2,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#2196F3',
      sort_order: 2
    },
    {
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 3)',
      description: '–ü—Ä–µ–º–∏—É–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 3 —É—Ä–æ–≤–Ω—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é',
      type: 'daily',
      min_subscription_tier: 3,
      is_active: true,
      cooldown_hours: 24,
      price: null,
      color_scheme: '#9C27B0',
      sort_order: 3
    },
    {
      name: '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å',
      description: '–ö–µ–π—Å –∑–∞ ‚ÇΩ99 —Å —Ç–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π 20% —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏',
      type: 'premium',
      min_subscription_tier: 0,
      is_active: true,
      price: 99, // 99 —Ä—É–±–ª–µ–π
      color_scheme: '#FF9800',
      sort_order: 4
    },
    {
      name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–µ–π—Å –∑–∞ ‚ÇΩ499 —Å –Ω–æ–∂–∞–º–∏ –∏ –ø–µ—Ä—á–∞—Ç–∫–∞–º–∏, 20% —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞',
      type: 'special',
      min_subscription_tier: 0,
      is_active: true,
      price: 499, // 499 —Ä—É–±–ª–µ–π
      color_scheme: '#F44336',
      sort_order: 5
    }
  ];

  const createdTemplates = [];
  for (const template of templates) {
    try {
      const existing = await db.CaseTemplate.findOne({ where: { name: template.name } });
      if (!existing) {
        const created = await db.CaseTemplate.create(template);
        createdTemplates.push(created);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–µ–π—Å–∞: ${template.name}`);
      } else {
        createdTemplates.push(existing);
        console.log(`‚è≠Ô∏è  –®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${template.name}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.name}:`, error.message);
    }
  }

  return createdTemplates;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
async function populateDatabase(limitPerCategory = 1000) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ CS2 —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏...\n');

  let totalItems = 0;
  let successfulItems = 0;
  const itemsByCategory = {};

  // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–µ–π—Å–æ–≤
  await createCaseTemplates();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–µ–π—Å–∞
  for (const [caseType, categories] of Object.entries(ITEMS_URLS)) {
    console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: ${BASE_CASE_CONFIGS[caseType]?.name || caseType}`);

    itemsByCategory[caseType] = {};

    for (const [rarity, urls] of Object.entries(categories)) {
      console.log(`\nüéØ –†–µ–¥–∫–æ—Å—Ç—å: ${rarity} (${urls.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)`);

      itemsByCategory[caseType][rarity] = [];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const urlsToProcess = urls.slice(0, limitPerCategory);

      for (let i = 0; i < urlsToProcess.length; i++) {
        const url = urlsToProcess[i];
        console.log(`[${i + 1}/${urlsToProcess.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${rarity}`);

        const result = await processItem(url, rarity, caseType);
        totalItems++;

        if (result) {
          successfulItems++;
          itemsByCategory[caseType][rarity].push(result);
        }
      }
    }
  }

  console.log('\nüéâ –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`- –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalItems}`);
  console.log(`- –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successfulItems}`);
  console.log(`- –û—à–∏–±–æ–∫: ${totalItems - successfulItems}`);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
  await calculateOptimalWeights(itemsByCategory);

  // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤
  await linkItemsToCaseTemplates();

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
  await validateProfitability(itemsByCategory);

  // –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–µ–Ω
  steamPriceService.cleanExpiredCache();

  console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å 20% —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
async function calculateOptimalWeights(itemsByCategory) {
  console.log('\n‚öñÔ∏è –†–ê–°–ß–ï–¢ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–• –í–ï–°–û–í –ù–ê –û–°–ù–û–í–ï –ê–ö–¢–£–ê–õ–¨–ù–´–• –¶–ï–ù:\n');

  for (const [caseType, categorizedItems] of Object.entries(itemsByCategory)) {
    const caseConfig = BASE_CASE_CONFIGS[caseType];
    if (!caseConfig) continue;

    console.log(`üì¶ –ö–µ–π—Å: ${caseConfig.name}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–Ω–µ –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º)
    const actualCategories = {};
    for (const [originalCategory, items] of Object.entries(categorizedItems)) {
      for (const item of items) {
        const actualCategory = item.rarity;
        if (!actualCategories[actualCategory]) {
          actualCategories[actualCategory] = [];
        }
        actualCategories[actualCategory].push(item);
      }
    }

    if (caseConfig.price) {
      // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è 20% –ø—Ä–∏–±—ã–ª–∏
      const optimization = profitabilityCalculator.calculateOptimalWeights(
        actualCategories,
        caseConfig.price
      );

      if (optimization.isOptimal) {
        console.log(`‚úÖ –í–µ—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è ${caseConfig.name}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await updateItemWeights(actualCategories, optimization.weights);
      } else {
        console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è ${caseConfig.name}`);
      }
    } else {
      // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞
      const baseWeights = {
        consumer: 600,    // 60%
        industrial: 250,  // 25%
        milspec: 100,     // 10%
        restricted: 35,   // 3.5%
        classified: 12,   // 1.2%
        covert: 2.5,      // 0.25%
        contraband: 0.4,  // 0.04%
        exotic: 0.1       // 0.01%
      };

      console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞: ${caseConfig.name}`);
      await updateItemWeights(actualCategories, baseWeights);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updateItemWeights(itemsByCategory, weights) {
  for (const [category, items] of Object.entries(itemsByCategory)) {
    const baseWeight = weights[category] || 1;

    for (const item of items) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤ –≤–µ—Å–∞ (¬±10%)
      const variation = (Math.random() - 0.5) * 0.2; // ¬±10%
      const finalWeight = Math.max(0.01, baseWeight * (1 + variation));

      await db.Item.update(
        { drop_weight: Math.round(finalWeight * 100) / 100 },
        { where: { id: item.id } }
      );
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
async function validateProfitability(itemsByCategory) {
  console.log('\nüí∞ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò:\n');

  for (const [caseType, categorizedItems] of Object.entries(itemsByCategory)) {
    const caseConfig = BASE_CASE_CONFIGS[caseType];
    if (!caseConfig) continue;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const actualCategories = {};
    for (const [originalCategory, items] of Object.entries(categorizedItems)) {
      for (const item of items) {
        const actualCategory = item.rarity;
        if (!actualCategories[actualCategory]) {
          actualCategories[actualCategory] = [];
        }
        actualCategories[actualCategory].push(item);
      }
    }

    if (caseConfig.price) {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã
      const validation = profitabilityCalculator.validateCaseProfitability(
        {
          name: caseConfig.name,
          price: caseConfig.price,
          drop_weights: await getCurrentWeights(actualCategories)
        },
        actualCategories
      );

      console.log(`üì¶ ${validation.caseName}:`);
      console.log(`   –¶–µ–Ω–∞ –∫–µ–π—Å–∞: ‚ÇΩ${validation.casePrice}`);
      console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${validation.expectedValue.toFixed(2)}`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${validation.profit.toFixed(2)}`);
      console.log(`   –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(validation.profitMargin * 100).toFixed(1)}% (—Ü–µ–ª—å: 20%)`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${validation.status}`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${validation.recommendation}`);
    } else {
      // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const avgPrices = profitabilityCalculator.calculateAveragePrices(actualCategories);
      const weights = await getCurrentWeights(actualCategories);
      const expectedValue = profitabilityCalculator.calculateExpectedValue(weights, avgPrices);

      console.log(`üì¶ ${caseConfig.name} (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π):`);
      console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${expectedValue.toFixed(2)}`);
      console.log(`   –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${caseConfig.target_expected_value}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${expectedValue <= caseConfig.target_expected_value * 1.1 ? '‚úÖ –í –ù–û–†–ú–ï' : '‚ö†Ô∏è –ü–†–ï–í–´–®–ê–ï–¢'}`);
    }
    console.log('');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –≤–µ—Å–æ–≤
async function getCurrentWeights(itemsByCategory) {
  const weights = {};

  for (const [category, items] of Object.entries(itemsByCategory)) {
    if (items.length > 0) {
      // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const avgWeight = items.reduce((sum, item) => sum + (item.drop_weight || 1), 0) / items.length;
      weights[category] = avgWeight;
    }
  }

  return weights;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤
async function linkItemsToCaseTemplates() {
  console.log('\nüîó –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–µ–π—Å–æ–≤...\n');

  const CASE_ITEM_MAPPING = {
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 1)': 'subscription_tier1_case',
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 2)': 'subscription_tier2_case',
    '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å (–£—Ä–æ–≤–µ–Ω—å 3)': 'subscription_tier3_case',
    '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å': 'purchase_case',
    '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å': 'premium_case'
  };

  try {
    const caseTemplates = await db.CaseTemplate.findAll({
      where: { is_active: true }
    });

    for (const template of caseTemplates) {
      console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å: ${template.name}`);

      let originPattern = CASE_ITEM_MAPPING[template.name];

      if (!originPattern) {
        if (template.name.includes('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π') || template.type === 'daily') {
          if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 1')) {
            originPattern = 'subscription_tier1_case';
          } else if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 2')) {
            originPattern = 'subscription_tier2_case';
          } else if (template.name.includes('–£—Ä–æ–≤–µ–Ω—å 3')) {
            originPattern = 'subscription_tier3_case';
          } else {
            originPattern = 'subscription_tier1_case';
          }
        } else if (template.name.includes('–ü–æ–∫—É–ø–Ω–æ–π') || (template.price && template.price <= 150)) {
          originPattern = 'purchase_case';
        } else if (template.name.includes('–ü—Ä–µ–º–∏—É–º') || (template.price && template.price > 150)) {
          originPattern = 'premium_case';
        }
      }

      if (!originPattern) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–ª—è –∫–µ–π—Å–∞: ${template.name}`);
        continue;
      }

      const items = await db.Item.findAll({
        where: {
          is_available: true,
          origin: originPattern
        }
      });

      if (items.length === 0) {
        console.log(`   ‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å origin: ${originPattern}`);
        continue;
      }

      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      await template.setItems([]);
      await template.addItems(items);

      console.log(`   ‚úÖ –°–≤—è–∑–∞–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–æ–º: ${template.name}`);
    }

    console.log('\nüéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–µ–π—Å–∞–º–∏:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  populateDatabase,
  processItem,
  createCaseTemplates,
  calculateOptimalWeights,
  validateProfitability,
  linkItemsToCaseTemplates,
  updateItemWeights,
  BASE_CASE_CONFIGS,
  ITEMS_URLS,
  FALLBACK_PRICES,
  steamPriceService,
  profitabilityCalculator
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–µ–π—Å–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ Steam Market...');
  console.log(`üìä Steam API –∫–ª—é—á: ${process.env.STEAM_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
  console.log('‚öôÔ∏è –¶–µ–ª–µ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: 20% (80% –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)\n');

  populateDatabase(20) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    .then(() => {
      console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
      console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –≤ populateDatabase()');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–µ–π—Å–æ–≤:', error);
      process.exit(1);
    });
}
