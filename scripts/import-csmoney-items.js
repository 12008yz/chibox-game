const { chromium } = require('playwright');
const db = require('../models');
const path = require('path');
const fs = require('fs');

async function importCSMoneyItemsBrowser() {
  let browser = null;
  let page = null;

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CSMoney —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const configPath = path.join(__dirname, '../config/csmoney_config.json');
    let config = {};

    if (fs.existsSync(configPath)) {
      config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ cookies');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await chromium.launch({
      headless: false, // –ü–æ–∫–∞–∂–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 },
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
    });

    page = await context.newPage();

    // –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
    if (config.cookies) {
      console.log('üç™ –î–æ–±–∞–≤–ª—è–µ–º cookies...');

      const cookies = config.cookies.split('; ').map(cookie => {
        const [name, value] = cookie.split('=');
        return {
          name: name.trim(),
          value: value ? value.trim() : '',
          domain: '.cs.money',
          path: '/'
        };
      });

      await context.addCookies(cookies);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${cookies.length} cookies`);
    }

    // –ò–¥–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ä–∫–µ—Ç–∞
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ CSMoney...');
    await page.goto('https://cs.money/ru/market/buy/', {
      waitUntil: 'networkidle',
      timeout: 30000
    });

    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.waitForTimeout(3000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try {
      const isLoggedIn = await page.locator('[data-testid="user-avatar"], .user-avatar, .avatar').first().isVisible({ timeout: 5000 });
      if (isLoggedIn) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      } else {
        console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    console.log('üîç –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');

    const itemSelectors = [
      '[data-testid="skin-card"]',
      '.skin-card',
      '.item-card',
      '.market-item',
      '.inventory-item',
      '[class*="item"]',
      '[class*="skin"]',
      '[class*="card"]'
    ];

    let items = [];

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    for (const selector of itemSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 10000 });
        items = await page.locator(selector).all();
        if (items.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
          break;
        }
      } catch (e) {
        console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
      }
    }

    if (items.length === 0) {
      console.log('‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');

      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      await page.screenshot({ path: 'csmoney_debug.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ csmoney_debug.png');

      // –í—ã–≤–æ–¥–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const content = await page.content();
      fs.writeFileSync('csmoney_page.html', content);
      console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ csmoney_page.html');

      return;
    }

    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤...`);

    let processedCount = 0;
    let createdCount = 0;
    let updatedCount = 0;
    let errorCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    const itemsToProcess = items.slice(0, Math.min(10, items.length));

    for (let i = 0; i < itemsToProcess.length; i++) {
      try {
        const item = itemsToProcess[i];

        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ${i + 1}/${itemsToProcess.length}...`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        const itemData = await item.evaluate((element) => {
          // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
          const nameSelectors = [
            '[data-testid="skin-name"]',
            '.skin-name',
            '.item-name',
            '.card-title',
            'h3', 'h4', 'h5',
            '[class*="name"]',
            '[class*="title"]'
          ];

          let name = '';
          for (const selector of nameSelectors) {
            const nameEl = element.querySelector(selector);
            if (nameEl && nameEl.textContent.trim()) {
              name = nameEl.textContent.trim();
              break;
            }
          }

          // –ò—â–µ–º —Ü–µ–Ω—É
          const priceSelectors = [
            '[data-testid="price"]',
            '.price',
            '.cost',
            '[class*="price"]',
            '[class*="cost"]',
            '[class*="money"]'
          ];

          let price = '';
          for (const selector of priceSelectors) {
            const priceEl = element.querySelector(selector);
            if (priceEl && priceEl.textContent.trim()) {
              price = priceEl.textContent.trim();
              break;
            }
          }

          // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const imgSelectors = [
            'img[src*="steamcommunity"]',
            'img[src*="steam"]',
            'img',
            '[data-testid="skin-image"] img'
          ];

          let imageUrl = '';
          for (const selector of imgSelectors) {
            const imgEl = element.querySelector(selector);
            if (imgEl && imgEl.src) {
              imageUrl = imgEl.src;
              break;
            }
          }

          return {
            name: name || 'Unknown Item',
            price: price,
            imageUrl: imageUrl,
            rawHTML: element.innerHTML.substring(0, 500) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
          };
        });

        if (itemData.name && itemData.name !== 'Unknown Item') {
          console.log(`  üìù ${itemData.name}`);
          console.log(`  üí∞ ${itemData.price}`);

          // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
          let numericPrice = 0;
          if (itemData.price) {
            const priceMatch = itemData.price.match(/[\d,]+\.?\d*/);
            if (priceMatch) {
              numericPrice = parseFloat(priceMatch[0].replace(',', ''));
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑–µ
          const existingItem = await db.Item.findOne({
            where: { name: itemData.name }
          });

          if (existingItem) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
            await existingItem.update({
              price: numericPrice,
              image_url: itemData.imageUrl || existingItem.image_url,
              is_available: true
            });
            updatedCount++;
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            await db.Item.create({
              name: itemData.name,
              price: numericPrice,
              image_url: itemData.imageUrl,
              rarity: 'consumer', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
              drop_weight: 1.0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
              min_subscription_tier: 0,
              is_available: true
            });
            createdCount++;
          }

          processedCount++;
        } else {
          console.log(`  ‚ö†Ô∏è  –ü—Ä–µ–¥–º–µ—Ç ${i + 1}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã`);
          console.log(`     HTML: ${itemData.rawHTML.substring(0, 100)}...`);
          errorCount++;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        await page.waitForTimeout(500);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ${i + 1}:`, error.message);
        errorCount++;
      }
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}`);
    console.log(`üÜï –°–æ–∑–¥–∞–Ω–æ: ${createdCount}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    if (page) await page.close();
    if (browser) await browser.close();
    console.log('üîê –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importCSMoneyItemsBrowser();
