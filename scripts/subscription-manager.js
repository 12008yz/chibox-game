#!/usr/bin/env node

/**
 * üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ü–û–î–ü–ò–°–û–ö CHIBOX
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * - –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

const db = require('../models');
const { createNotification } = require('../utils/notificationHelper');
const winston = require('winston');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.join(__dirname, '../logs');
const fs = require('fs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message, ...meta }) => {
      return `${timestamp} [${level.toUpperCase()}] ${message} ${Object.keys(meta).length ? JSON.stringify(meta) : ''}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({
      filename: path.join(logsDir, 'subscription-manager.log'),
      maxsize: 10 * 1024 * 1024, // 10MB
      maxFiles: 5
    }),
    new winston.transports.File({
      filename: path.join(logsDir, 'subscription-errors.log'),
      level: 'error',
      maxsize: 5 * 1024 * 1024, // 5MB
      maxFiles: 3
    })
  ],
});

/**
 * üìâ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function decreaseSubscriptionDays() {
  const startTime = Date.now();
  logger.info('üîÑ –ó–∞–ø—É—Å–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...');

  try {
    const now = new Date();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const usersWithSubscription = await db.User.findAll({
      where: {
        [db.Sequelize.Op.or]: [
          { subscription_days_left: { [db.Sequelize.Op.gt]: 0 } },
          {
            subscription_expiry_date: {
              [db.Sequelize.Op.gt]: now
            }
          }
        ]
      },
      attributes: [
        'id', 'username', 'subscription_tier', 'subscription_days_left',
        'subscription_expiry_date', 'subscription_bonus_percentage',
        'max_daily_cases', 'cases_available'
      ]
    });

    logger.info(`üë• –ù–∞–π–¥–µ–Ω–æ ${usersWithSubscription.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`);

    let processedCount = 0;
    let deactivatedCount = 0;
    let warningsSent = 0;
    let errorsCount = 0;

    const results = {
      processed: 0,
      deactivated: 0,
      warnings: 0,
      errors: [],
      duration: 0
    };

    for (const user of usersWithSubscription) {
      try {
        processedCount++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        const expiryDate = user.subscription_expiry_date ? new Date(user.subscription_expiry_date) : null;
        let currentDaysLeft = user.subscription_days_left || 0;

        // –ï—Å–ª–∏ –µ—Å—Ç—å expiry_date, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏
        if (expiryDate) {
          const msLeft = expiryDate.getTime() - now.getTime();
          const calculatedDays = msLeft > 0 ? Math.ceil(msLeft / (24 * 60 * 60 * 1000)) : 0;

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1 –¥–Ω—è
          if (Math.abs(calculatedDays - currentDaysLeft) > 1) {
            logger.warn(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${currentDaysLeft} -> ${calculatedDays}`);
            currentDaysLeft = calculatedDays;
          }
        }

        // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 –¥–µ–Ω—å
        const newDaysLeft = Math.max(0, currentDaysLeft - 1);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (newDaysLeft === 3) {
          await createNotification(
            user.id,
            '‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è',
            '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!',
            'warning',
            'subscription',
            { link: '/subscription', importance: 8 }
          );
          warningsSent++;
        } else if (newDaysLeft === 1) {
          await createNotification(
            user.id,
            'üö® –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏',
            '–í–∞—à —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.',
            'warning',
            'subscription',
            { link: '/subscription', importance: 9 }
          );
          warningsSent++;
        }

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        if (newDaysLeft === 0) {
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          await user.update({
            subscription_tier: 0,
            subscription_days_left: 0,
            subscription_bonus_percentage: 0,
            max_daily_cases: 0,
            cases_available: 0,
            subscription_expiry_date: null
          });

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
          await createNotification(
            user.id,
            '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
            '–í–∞—à —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫–ª. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–µ–π—Å—ã –∏ –±–æ–Ω—É—Å—ã –∫ –¥—Ä–æ–ø—É!',
            'error',
            'subscription',
            { link: '/subscription', importance: 10 }
          );

          deactivatedCount++;
          logger.info(`–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (@${user.username})`);
        } else {
          // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
          await user.update({
            subscription_days_left: newDaysLeft
          });

          logger.debug(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}: ${currentDaysLeft} -> ${newDaysLeft} –¥–Ω–µ–π`);
        }

      } catch (error) {
        errorsCount++;
        results.errors.push({
          userId: user.id,
          username: user.username,
          error: error.message
        });
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const duration = Date.now() - startTime;
    results.processed = processedCount;
    results.deactivated = deactivatedCount;
    results.warnings = warningsSent;
    results.duration = duration;

    logger.info('‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      processed: processedCount,
      deactivated: deactivatedCount,
      warnings: warningsSent,
      errors: errorsCount,
      duration: `${duration}ms`
    });

    return results;

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
}

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
async function validateSubscriptionData() {
  logger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

  try {
    const now = new Date();
    let fixedCount = 0;

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏
    const usersToFix = await db.User.findAll({
      where: {
        [db.Sequelize.Op.or]: [
          // –ï—Å—Ç—å –¥–Ω–∏, –Ω–æ –Ω–µ—Ç expiry_date
          {
            subscription_days_left: { [db.Sequelize.Op.gt]: 0 },
            subscription_expiry_date: null
          },
          // –ï—Å—Ç—å expiry_date –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ –¥–Ω–∏ > 0
          {
            subscription_expiry_date: { [db.Sequelize.Op.lt]: now },
            subscription_days_left: { [db.Sequelize.Op.gt]: 0 }
          }
        ]
      }
    });

    for (const user of usersToFix) {
      const daysLeft = user.subscription_days_left || 0;

      if (daysLeft > 0 && !user.subscription_expiry_date) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º expiry_date –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π
        const expiryDate = new Date();
        expiryDate.setDate(expiryDate.getDate() + daysLeft);

        await user.update({ subscription_expiry_date: expiryDate });
        fixedCount++;
        logger.info(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ expiry_date –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${expiryDate.toISOString()}`);
      } else if (user.subscription_expiry_date && user.subscription_expiry_date < now && daysLeft > 0) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–∏
        await user.update({
          subscription_days_left: 0,
          subscription_tier: 0,
          subscription_bonus_percentage: 0,
          max_daily_cases: 0
        });
        fixedCount++;
        logger.info(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      }
    }

    logger.info(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixedCount}`);
    return { fixed: fixedCount };

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
    throw error;
  }
}

/**
 * üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
 */
async function generateSubscriptionReport() {
  logger.info('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º...');

  try {
    const now = new Date();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    const activeSubscriptions = await db.User.count({
      where: {
        subscription_days_left: { [db.Sequelize.Op.gt]: 0 }
      }
    });

    // –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º
    const tierStats = await db.User.findAll({
      attributes: [
        'subscription_tier',
        [db.Sequelize.fn('COUNT', db.Sequelize.col('id')), 'count']
      ],
      where: {
        subscription_days_left: { [db.Sequelize.Op.gt]: 0 }
      },
      group: ['subscription_tier'],
      raw: true
    });

    // –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    const expiringTomorrow = await db.User.count({
      where: { subscription_days_left: 1 }
    });

    const expiringThreeDays = await db.User.count({
      where: { subscription_days_left: { [db.Sequelize.Op.lte]: 3, [db.Sequelize.Op.gt]: 0 } }
    });

    const report = {
      timestamp: now.toISOString(),
      activeSubscriptions,
      tierStats,
      expiringTomorrow,
      expiringThreeDays,
      health: 'OK'
    };

    logger.info('üìà –û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:', report);
    return report;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  decreaseSubscriptionDays,
  validateSubscriptionData,
  generateSubscriptionReport,
  logger
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const action = process.argv[2] || 'decrease';

  switch (action) {
    case 'decrease':
      decreaseSubscriptionDays()
        .then(result => {
          logger.info('üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏');
          process.exit(0);
        })
        .catch(error => {
          logger.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
          process.exit(1);
        });
      break;

    case 'validate':
      validateSubscriptionData()
        .then(result => {
          logger.info('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          process.exit(0);
        })
        .catch(error => {
          logger.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
          process.exit(1);
        });
      break;

    case 'report':
      generateSubscriptionReport()
        .then(result => {
          console.log(JSON.stringify(result, null, 2));
          process.exit(0);
        })
        .catch(error => {
          logger.error('üí• –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞:', error);
          process.exit(1);
        });
      break;

    default:
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node subscription-manager.js [decrease|validate|report]');
      process.exit(1);
  }
}
