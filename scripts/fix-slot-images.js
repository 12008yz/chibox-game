const db = require('../models');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market –∏–∑ market_hash_name
function createMarketPageUrl(marketHashName) {
  return `https://steamcommunity.com/market/listings/730/${encodeURIComponent(marketHashName)}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function fixImageUrls() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Steam
    const items = await db.Item.findAll({
      where: {
        image_url: {
          [db.Sequelize.Op.like]: '%steamstatic.com%'
        },
        steam_market_hash_name: {
          [db.Sequelize.Op.not]: null
        }
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    let updated = 0;
    let errors = 0;

    for (const item of items) {
      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market
        const newImageUrl = createMarketPageUrl(item.steam_market_hash_name);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await item.update({ image_url: newImageUrl });

        updated++;
        console.log(`‚úÖ ${updated}/${items.length} –û–±–Ω–æ–≤–ª–µ–Ω: ${item.name}`);
        console.log(`   –°—Ç–∞—Ä—ã–π URL: ${item.image_url}`);
        console.log(`   –ù–æ–≤—ã–π URL: ${newImageUrl}\n`);

      } catch (error) {
        errors++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${item.name}:`, error.message);
      }
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${items.length}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function checkCurrentState() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    const totalItems = await db.Item.count();

    const steamImageItems = await db.Item.count({
      where: {
        image_url: {
          [db.Sequelize.Op.like]: '%steamstatic.com%'
        }
      }
    });

    const marketPageItems = await db.Item.count({
      where: {
        image_url: {
          [db.Sequelize.Op.like]: '%steamcommunity.com/market/listings%'
        }
      }
    });

    const nullImageItems = await db.Item.count({
      where: {
        [db.Sequelize.Op.or]: [
          { image_url: null },
          { image_url: '' }
        ]
      }
    });

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalItems}`);
    console.log(`   –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${steamImageItems}`);
    console.log(`   –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market: ${marketPageItems}`);
    console.log(`   –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${nullImageItems}`);
    console.log(`   –î—Ä—É–≥–∏–µ: ${totalItems - steamImageItems - marketPageItems - nullImageItems}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–∏—Ö URL:');

    const examples = await db.Item.findAll({
      limit: 5,
      attributes: ['name', 'image_url'],
      order: [['createdAt', 'DESC']]
    });

    examples.forEach((item, index) => {
      console.log(`${index + 1}. ${item.name}`);
      console.log(`   URL: ${item.image_url || '–ù–ï–¢'}\n`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  fixImageUrls,
  checkCurrentState,
  createMarketPageUrl
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const action = process.argv[2];

  if (action === 'fix') {
    fixImageUrls()
      .then(() => process.exit(0))
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
      });
  } else {
    checkCurrentState()
      .then(() => process.exit(0))
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
      });
  }
}
