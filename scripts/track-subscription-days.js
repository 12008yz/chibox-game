const db = require('../models');
const { updateUserAchievementProgress } = require('../services/achievementService');
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
  ],
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤
 */
async function trackDailyStreaks() {
  try {
    logger.info('üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤...');

    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    yesterday.setHours(0, 0, 0, 0);

    const todayStart = new Date(today);
    todayStart.setHours(0, 0, 0, 0);

    const todayEnd = new Date(today);
    todayEnd.setHours(23, 59, 59, 999);

    logger.info(`üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayStart.toISOString()} - ${todayEnd.toISOString()}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –∑–∞—Ö–æ–¥–∏–ª —Å–µ–≥–æ–¥–Ω—è)
    const activeUsersToday = await db.User.findAll({
      where: {
        last_login_date: {
          [db.Sequelize.Op.between]: [todayStart, todayEnd]
        }
      },
      attributes: ['id', 'daily_streak', 'max_daily_streak', 'last_login_date', 'last_activity_date']
    });

    logger.info(`üë• –ù–∞–π–¥–µ–Ω–æ ${activeUsersToday.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è`);

    let streakUpdatedCount = 0;
    let streakResetCount = 0;
    let achievementUpdatedCount = 0;

    for (const user of activeUsersToday) {
      try {
        const lastActivityDate = user.last_activity_date ? new Date(user.last_activity_date) : null;
        const lastLoginDate = user.last_login_date ? new Date(user.last_login_date) : null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—á–µ—Ä–∞
        let hadActivityYesterday = false;

        if (lastActivityDate) {
          const activityDate = new Date(lastActivityDate);
          activityDate.setHours(0, 0, 0, 0);

          if (activityDate.getTime() === yesterday.getTime()) {
            hadActivityYesterday = true;
          }
        }

        let newStreak = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–∏–∫ —Ä–∞–≤–µ–Ω 1 (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)

        if (hadActivityYesterday && user.daily_streak > 0) {
          // –ï—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—á–µ—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫
          newStreak = user.daily_streak + 1;
          streakUpdatedCount++;
        } else if (user.daily_streak > 0) {
          // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—á–µ—Ä–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
          newStreak = 1;
          streakResetCount++;
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–∏–∫–∞
          newStreak = 1;
          streakUpdatedCount++;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const newMaxStreak = Math.max(user.max_daily_streak || 0, newStreak);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.update({
          daily_streak: newStreak,
          max_daily_streak: newMaxStreak,
          last_activity_date: new Date()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è daily_streak
        await updateUserAchievementProgress(user.id, 'daily_streak', newStreak);
        achievementUpdatedCount++;

        logger.info(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}: —Å—Ç—Ä–∏–∫ ${newStreak} –¥–Ω–µ–π (–º–∞–∫—Å: ${newMaxStreak})`);

      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
    const inactiveUsers = await db.User.findAll({
      where: {
        daily_streak: {
          [db.Sequelize.Op.gt]: 0
        },
        last_login_date: {
          [db.Sequelize.Op.lt]: todayStart
        }
      },
      attributes: ['id', 'daily_streak']
    });

    logger.info(`üí§ –ù–∞–π–¥–µ–Ω–æ ${inactiveUsers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞`);

    for (const user of inactiveUsers) {
      try {
        await user.update({
          daily_streak: 0
        });
        streakResetCount++;
        logger.info(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—Ç—Ä–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }

    logger.info(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    logger.info(`   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsersToday.length}`);
    logger.info(`   üìà –°—Ç—Ä–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${streakUpdatedCount}`);
    logger.info(`   üîÑ –°—Ç—Ä–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ: ${streakResetCount}`);
    logger.info(`   üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${achievementUpdatedCount}`);

    return {
      success: true,
      activeUsers: activeUsersToday.length,
      streakUpdated: streakUpdatedCount,
      streakReset: streakResetCount,
      achievementUpdated: achievementUpdatedCount
    };

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function trackSubscriptionDays() {
  try {
    logger.info('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...');

    const now = new Date();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const usersWithSubscription = await db.User.findAll({
      where: {
        subscription_tier: {
          [db.Sequelize.Op.gt]: 0
        },
        subscription_expiry_date: {
          [db.Sequelize.Op.not]: null
        }
      },
      attributes: ['id', 'subscription_tier', 'subscription_expiry_date', 'subscription_days_left']
    });

    logger.info(`üë• –ù–∞–π–¥–µ–Ω–æ ${usersWithSubscription.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π`);

    let processedUsers = 0;
    let successCount = 0;
    let errorCount = 0;
    let expiredSubscriptions = 0;

    for (const user of usersWithSubscription) {
      try {
        processedUsers++;

        const expiryDate = new Date(user.subscription_expiry_date);
        const msLeft = expiryDate.getTime() - now.getTime();
        const daysLeft = msLeft > 0 ? Math.ceil(msLeft / (1000 * 60 * 60 * 24)) : 0;

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        if (daysLeft <= 0) {
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          await user.update({
            subscription_tier: 0,
            subscription_days_left: 0,
            subscription_bonus_percentage: 0,
            max_daily_cases: 0,
            cases_available: 0
          });

          // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
          await db.Notification.create({
            user_id: user.id,
            title: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
            message: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!',
            type: 'warning',
            category: 'subscription',
            importance: 7,
            link: '/subscription'
          });

          expiredSubscriptions++;
          logger.info(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –∏—Å—Ç–µ–∫–ª–∞`);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
          await user.update({
            subscription_days_left: daysLeft
          });

          logger.info(`üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}: –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏`);
        }

        successCount++;

      } catch (error) {
        errorCount++;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }

    logger.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`);
    logger.info(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${processedUsers}`);
    logger.info(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    logger.info(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    logger.info(`   ‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredSubscriptions}`);

    return {
      processedUsers,
      successCount,
      errorCount,
      expiredSubscriptions
    };

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏
  Promise.all([
    trackDailyStreaks(),
    trackSubscriptionDays()
  ])
    .then(([streakResult, subscriptionResult]) => {
      logger.info('üéâ –°–∫—Ä–∏–ø—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∏–∫–æ–≤:', streakResult);
      logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫:', subscriptionResult);
      process.exit(0);
    })
    .catch((error) => {
      logger.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö:', error);
      process.exit(1);
    });
}

module.exports = {
  trackDailyStreaks,
  trackSubscriptionDays
};
