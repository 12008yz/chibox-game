const db = require('../models');

async function fixBestItemValues() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ best_item_value –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db.User.findAll({
      attributes: ['id', 'username', 'best_item_value']
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    let fixedCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        console.log(`\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username} (ID: ${user.id})`);

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const allUserItems = await db.UserInventory.findAll({
          where: { user_id: user.id },
          include: [
            {
              model: db.Item,
              as: 'item',
              attributes: ['id', 'name', 'rarity', 'price', 'weapon_type', 'image_url']
            }
          ]
        });

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${allUserItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ`);

        if (allUserItems.length === 0) {
          console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
        const validItems = allUserItems.filter(inventoryItem =>
          inventoryItem.item !== null && inventoryItem.item.price > 0
        );

        if (validItems.length === 0) {
          console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ü–µ–Ω–æ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }

        const bestItem = validItems.reduce((prev, current) => {
          const prevPrice = parseFloat(prev.item.price) || 0;
          const currentPrice = parseFloat(current.item.price) || 0;
          return (prevPrice > currentPrice) ? prev : current;
        });

        const actualBestPrice = parseFloat(bestItem.item.price);
        const currentBestValue = parseFloat(user.best_item_value) || 0;

        console.log(`–õ—É—á—à–∏–π –ø—Ä–µ–¥–º–µ—Ç: ${bestItem.item.name} - ${actualBestPrice} –ö–†`);
        console.log(`–¢–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥ –≤ –ë–î: ${currentBestValue} –ö–†`);

        if (actualBestPrice > currentBestValue) {
          console.log(`üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥ —Å ${currentBestValue} –Ω–∞ ${actualBestPrice} –ö–†`);

          await db.User.update(
            { best_item_value: actualBestPrice },
            { where: { id: user.id } }
          );

          fixedCount++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
        } else {
          console.log(`‚úÖ –†–µ–∫–æ—Ä–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const sortedItems = validItems
          .sort((a, b) => parseFloat(b.item.price) - parseFloat(a.item.price))
          .slice(0, 3);

        console.log('–¢–æ–ø-3 –ø—Ä–µ–¥–º–µ—Ç–æ–≤:');
        sortedItems.forEach((item, index) => {
          console.log(`  ${index + 1}. ${item.item.name} - ${item.item.price} –ö–† (${item.item.rarity})`);
        });

      } catch (userError) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, userError);
        errorCount++;
      }
    }

    console.log('\n=== –ò–¢–û–ì–ò ===');
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${users.length}`);
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixedCount}`);
    console.log(`–û—à–∏–±–æ–∫: ${errorCount}`);
    console.log('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  fixBestItemValues().then(() => {
    console.log('\n–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { fixBestItemValues };
