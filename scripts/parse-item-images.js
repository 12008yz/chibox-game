const axios = require('axios');
const cheerio = require('cheerio');
const db = require('../models');
const COMPLETE_ITEMS_URLS = require('../utils/linkItems-complete');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è market_hash_name –∏–∑ URL
function extractMarketHashNameFromUrl(url) {
  try {
    const match = url.match(/\/market\/listings\/730\/(.+)$/);
    if (match) {
      return decodeURIComponent(match[1]);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ URL:', url, error.message);
    return null;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Steam API
async function getImageFromSteamAPI(marketHashName) {
  try {
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Steam API –¥–ª—è: ${marketHashName}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Steam API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    const apiUrl = `https://steamcommunity.com/market/priceoverview/?currency=1&appid=730&market_hash_name=${encodeURIComponent(marketHashName)}`;

    const response = await axios.get(apiUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      },
      timeout: 5000
    });

    if (response.data && response.data.success) {
      // API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å URL
      // –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Steam
      const baseImageUrl = 'https://community.fastly.steamstatic.com/economy/image/';

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π API endpoint
      const inventoryApiUrl = `https://steamcommunity.com/market/listings/730/${encodeURIComponent(marketHashName)}/render/?query=&start=0&count=1&currency=1&format=json`;

      const inventoryResponse = await axios.get(inventoryApiUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        timeout: 5000
      });

      if (inventoryResponse.data && inventoryResponse.data.results_html) {
        const $ = cheerio.load(inventoryResponse.data.results_html);
        const img = $('img').first();
        if (img.length > 0) {
          let imageUrl = img.attr('src');
          if (imageUrl) {
            imageUrl = imageUrl.replace('community.akamai.steamstatic.com', 'community.fastly.steamstatic.com');
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API: ${imageUrl}`);
            return imageUrl;
          }
        }
      }
    }

    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ Steam API –¥–ª—è ${marketHashName}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market
async function parseImageFromSteamPage(url) {
  try {
    console.log(`üîÑ –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å: ${url}`);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Steam
    await new Promise(resolve => setTimeout(resolve, 1000));

    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });

    const $ = cheerio.load(response.data);

    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageUrl = null;

    // 1. –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    const largeImage = $('.market_listing_largeimage img');
    if (largeImage.length > 0) {
      imageUrl = largeImage.attr('src');
      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –≤ .market_listing_largeimage: ${imageUrl}`);
    }

    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    if (!imageUrl) {
      const marketHeaderImage = $('.market_listing_item_img img');
      if (marketHeaderImage.length > 0) {
        imageUrl = marketHeaderImage.attr('src');
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –≤ .market_listing_item_img: ${imageUrl}`);
      }
    }

    // 3. –ò—â–µ–º –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –∏–ª–∏ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if (!imageUrl) {
      const scriptContent = $('script').text();
      const imageMatch = scriptContent.match(/https:\/\/community\.[^"']*steamstatic\.com\/economy\/image\/[^"'\s]+/);
      if (imageMatch) {
        imageUrl = imageMatch[0];
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö: ${imageUrl}`);
      }
    }

    // 4. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (!imageUrl) {
      $('img').each((i, element) => {
        const src = $(element).attr('src');
        if (src && src.includes('steamstatic.com/economy/image/')) {
          imageUrl = src;
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –≤ img: ${imageUrl}`);
          return false; // break –∏–∑ each
        }
      });
    }

    if (imageUrl) {
      // –ó–∞–º–µ–Ω—è–µ–º akamai –Ω–∞ fastly –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      imageUrl = imageUrl.replace('community.akamai.steamstatic.com', 'community.fastly.steamstatic.com');
      console.log(`‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: ${imageUrl}`);
      return imageUrl;
    }

    // –ï—Å–ª–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º API
    console.log(`üîÑ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω, –ø—Ä–æ–±—É–µ–º Steam API...`);
    const marketHashName = extractMarketHashNameFromUrl(url);
    if (marketHashName) {
      const apiImageUrl = await getImageFromSteamAPI(marketHashName);
      if (apiImageUrl) {
        return apiImageUrl;
      }
    }

    console.log(`‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è: ${url}`);
    return null;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ë–î
async function updateItemImage(marketHashName, imageUrl) {
  try {
    const item = await db.Item.findOne({
      where: { steam_market_hash_name: marketHashName }
    });

    if (!item) {
      console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${marketHashName}`);
      return false;
    }

    await item.update({ image_url: imageUrl });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${marketHashName}`);
    return true;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è ${marketHashName}:`, error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function parseAllItemImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');

  let totalProcessed = 0;
  let totalUpdated = 0;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const [category, items] of Object.entries(COMPLETE_ITEMS_URLS.subscription)) {
    console.log(`\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category}`);

    for (const url of items) {
      totalProcessed++;

      const marketHashName = extractMarketHashNameFromUrl(url);
      if (!marketHashName) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ URL: ${url}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
      const existingItem = await db.Item.findOne({
        where: { steam_market_hash_name: marketHashName }
      });

      if (!existingItem) {
        console.log(`‚è≠Ô∏è  –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${marketHashName}`);
        continue;
      }

      if (existingItem.image_url && existingItem.image_url.includes('steamstatic.com')) {
        console.log(`‚è≠Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –¥–ª—è: ${marketHashName}`);
        continue;
      }

      // –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageUrl = await parseImageFromSteamPage(url);

      if (imageUrl) {
        const updated = await updateItemImage(marketHashName, imageUrl);
        if (updated) {
          totalUpdated++;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (totalProcessed % 10 === 0) {
        console.log(`\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated}`);
      }
    }
  }

  console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
  console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalUpdated}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async function parseSpecificItem(itemName) {
  console.log(`üîç –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç: ${itemName}`);

  // –ò—â–µ–º URL –≤ linkItems-complete.js
  let foundUrl = null;
  for (const [category, items] of Object.entries(COMPLETE_ITEMS_URLS.subscription)) {
    for (const url of items) {
      const marketHashName = extractMarketHashNameFromUrl(url);
      if (marketHashName && marketHashName.toLowerCase().includes(itemName.toLowerCase())) {
        foundUrl = url;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω URL: ${url}`);
        break;
      }
    }
    if (foundUrl) break;
  }

  if (!foundUrl) {
    console.log(`‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemName}`);
    return;
  }

  const marketHashName = extractMarketHashNameFromUrl(foundUrl);
  const imageUrl = await parseImageFromSteamPage(foundUrl);

  if (imageUrl) {
    await updateItemImage(marketHashName, imageUrl);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  parseAllItemImages,
  parseSpecificItem,
  parseImageFromSteamPage,
  updateItemImage
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    try {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–∞—Ä—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
      const itemName = process.argv[2];
      if (itemName) {
        await parseSpecificItem(itemName);
      } else {
        // –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        await parseAllItemImages();
      }
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      process.exit(0);
    }
  })();
}
