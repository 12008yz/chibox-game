const axios = require('axios');
const cheerio = require('cheerio');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Market
async function parseImageFromSteamPage(url) {
  try {
    console.log(`üîç –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è axios
    const config = {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
      }
    };

    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const response = await axios.get(url, config);

    if (response.status !== 200) {
      throw new Error(`HTTP —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }

    // –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é cheerio
    const $ = cheerio.load(response.data);

    // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    let imageUrl = null;

    // –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    const mainImage = $('.market_listing_largeimage img').attr('src');
    if (mainImage && isValidSteamImageUrl(mainImage)) {
      imageUrl = mainImage;
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ meta-—Ç–µ–≥–∞—Ö
    if (!imageUrl) {
      const metaImage = $('meta[property="og:image"]').attr('content');
      if (metaImage && isValidSteamImageUrl(metaImage)) {
        imageUrl = metaImage;
      }
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 3: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JSON –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (!imageUrl) {
      const scripts = $('script').toArray();
      for (const script of scripts) {
        const scriptContent = $(script).html();
        if (scriptContent && scriptContent.includes('large_image_url')) {
          const match = scriptContent.match(/"large_image_url":"([^"]+)"/);
          if (match && match[1]) {
            imageUrl = match[1].replace(/\\\//g, '/');
            if (isValidSteamImageUrl(imageUrl)) {
              break;
            }
          }
        }
      }
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 4: –ü–æ–∏—Å–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (!imageUrl) {
      const selectors = [
        '.market_listing_largeimage img',
        '.market_listing_item_img img',
        '.market_listing_nav_container img',
        '.market_commodity_orders_table img',
        'img[src*="steamcommunity-a.akamaihd.net"]'
      ];

      for (const selector of selectors) {
        const img = $(selector).attr('src');
        if (img && isValidSteamImageUrl(img)) {
          imageUrl = img;
          break;
        }
      }
    }

    if (imageUrl) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
      return imageUrl;
    } else {
      console.log(`‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${url}`);
      return null;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å ${url}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Steam
function isValidSteamImageUrl(url) {
  if (!url || typeof url !== 'string') {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Steam CDN
  const steamImageRegex = /^https?:\/\/(steamcommunity-a\.akamaihd\.net|steamcdn-a\.akamaihd\.net|steamuserimages-a\.akamaihd\.net)/;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const validExtensions = /\.(jpg|jpeg|png|gif|webp)(\?.*)?$/i;

  return steamImageRegex.test(url) && validExtensions.test(url);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Steam API
async function getSteamImageFromAPI(marketHashName) {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Steam Web API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    const encodedName = encodeURIComponent(marketHashName);
    const apiUrl = `https://steamcommunity.com/market/priceoverview/?appid=730&currency=1&market_hash_name=${encodedName}`;

    const response = await axios.get(apiUrl, {
      timeout: 5000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    if (response.data && response.data.success) {
      // Steam API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ priceoverview
      // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Steam API, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ');
    }

    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Steam API:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function normalizeImageUrl(url) {
  if (!url) return null;

  try {
    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
    const cleanUrl = url.split('?')[0];

    // –ó–∞–º–µ–Ω—è–µ–º HTTP –Ω–∞ HTTPS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const httpsUrl = cleanUrl.replace(/^http:/, 'https:');

    return httpsUrl;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL:', error.message);
    return url;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  parseImageFromSteamPage,
  isValidSteamImageUrl,
  getSteamImageFromAPI,
  normalizeImageUrl
};
