const db = require('../models');
const { getSteamItemData } = require('./steam-item-fetcher');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è market_hash_name –∏–∑ URL
function extractMarketHashNameFromUrl(url) {
  try {
    const match = url.match(/\/market\/listings\/730\/(.+)$/);
    if (match) {
      return decodeURIComponent(match[1]);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ URL:', url, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ Steam URL
async function createItemFromSteamUrl(steamUrl, skipSteamAPI = false) {
  try {
    const marketHashName = extractMarketHashNameFromUrl(steamUrl);
    if (!marketHashName) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ URL');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    let item = await db.Item.findOne({
      where: { steam_market_hash_name: marketHashName }
    });

    if (item) {
      console.log(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${marketHashName}`);
      return item;
    }

    let steamData = {
      price_usd: 0.10,
      item_info: { icon_url: null, icon_url_large: null }
    };

    if (!skipSteamAPI) {
      console.log(`üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ${marketHashName}`);

      try {
        steamData = await getSteamItemData(marketHashName);

        if (steamData.error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Steam: ${steamData.error}`);
          console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...`);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          steamData = {
            price_usd: 0.10,
            item_info: { icon_url: null, icon_url_large: null }
          };
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Steam API: ${error.message}`);
        console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...`);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        steamData = {
          price_usd: 0.10,
          item_info: { icon_url: null, icon_url_large: null }
        };
      }
    } else {
      console.log(`‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Steam API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ`);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª–∏
    const priceUsd = steamData.price_usd || 0.10;
    const exchangeRate = 95;
    const priceRub = Math.round(priceUsd * exchangeRate * 100) / 100;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    const weaponType = marketHashName.split(' | ')[0] || 'Unknown';
    const skinPart = marketHashName.split(' | ')[1];
    const skinName = skinPart ? skinPart.replace(/\s*\([^)]*\)\s*$/, '').trim() : null;
    const exteriorMatch = marketHashName.match(/\(([^)]+)\)$/);
    const exterior = exteriorMatch ? exteriorMatch[1] : null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ
    let rarity = 'consumer';
    if (priceUsd >= 5) rarity = 'exotic';
    else if (priceUsd >= 1) rarity = 'covert';
    else if (priceUsd >= 0.5) rarity = 'classified';
    else if (priceUsd >= 0.2) rarity = 'restricted';
    else if (priceUsd >= 0.05) rarity = 'milspec';
    else if (priceUsd >= 0.01) rarity = 'industrial';

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    item = await db.Item.create({
      name: marketHashName,
      description: `CS2 ${rarity} skin: ${marketHashName}`,
      image_url: steamData.item_info?.icon_url_large || steamData.item_info?.icon_url || null,
      price: priceRub,
      rarity: rarity,
      drop_weight: 1,
      min_subscription_tier: 0,
      weapon_type: weaponType,
      skin_name: skinName,
      steam_market_hash_name: marketHashName,
      is_available: true,
      exterior: exterior,
      quality: marketHashName.includes('StatTrak‚Ñ¢') ? 'StatTrak' : null,
      in_stock: true,
      is_tradable: true,
      origin: 'manual_add'
    });

    console.log(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω: ${marketHashName} - ‚ÇΩ${priceRub}`);
    return item;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:`, error.message);
    throw error;
  }
}

async function addItemToUserInventory(userId, itemIdentifier, skipSteamAPI = false) {
  try {
    let item;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - URL –∏–ª–∏ ID
    if (typeof itemIdentifier === 'string' && itemIdentifier.includes('steamcommunity.com')) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω Steam URL, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
      item = await createItemFromSteamUrl(itemIdentifier, skipSteamAPI);
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID, –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
      item = await db.Item.findOne({ where: { csmoney_id: itemIdentifier } });
      if (!item) {
        console.error(`Item with csmoney_id ${itemIdentifier} not found`);
        return;
      }
    }

    // Check if user already has this item in inventory with status 'inventory'
    const existingInventory = await db.UserInventory.findOne({
      where: {
        user_id: userId,
        item_id: item.id,
        status: 'inventory'
      }
    });

    if (existingInventory) {
      console.log(`User already has item ${item.name} in inventory`);
      return;
    }

    // Add item to user's inventory
    await db.UserInventory.create({
      user_id: userId,
      item_id: item.id,
      acquisition_date: new Date(),
      source: 'system',
      status: 'inventory'
    });

    console.log(`Item ${item.name} added to user ${userId} inventory successfully`);
  } catch (error) {
    console.error('Error adding item to user inventory:', error);
  }
}

// If run as script
if (require.main === module) {
  const userId = '28bc541b-8a88-4208-9d0f-a00ac5664bb2';
  const steamUrl = 'https://steamcommunity.com/market/listings/730/Recoil%20Case';

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å Steam API —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const skipSteamAPI = process.argv.includes('--skip-steam-api');

  console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  console.log(`üë§ User ID: ${userId}`);
  console.log(`üîó Steam URL: ${steamUrl}`);
  if (skipSteamAPI) {
    console.log('‚ö° –†–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫ Steam API');
  }

  addItemToUserInventory(userId, steamUrl, skipSteamAPI)
    .then(() => {
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = {
  addItemToUserInventory,
  createItemFromSteamUrl,
  extractMarketHashNameFromUrl
};
