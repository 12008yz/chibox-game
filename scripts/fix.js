// –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 20% –ø—Ä–∏–±—ã–ª–∏
const COMPLETE_ITEMS_URLS = require('../utils/linkItems-complete');
const { CASE_CONFIGS, REALISTIC_ITEM_PRICES } = require('./add-base-items');

// –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
const SUBSCRIPTION_PRICES = {
  1: { name: '–°—Ç–∞—Ç—É—Å', price: 1210, days: 30, daily_cost: 40.33 },
  2: { name: '–°—Ç–∞—Ç—É—Å+', price: 2890, days: 30, daily_cost: 96.33 },
  3: { name: '–°—Ç–∞—Ç—É—Å++', price: 6819, days: 30, daily_cost: 227.30 }
};

// –¶–µ–Ω—ã –ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ (–∏–∑ add-base-items.js)
const PAID_CASES = {
  purchase: { name: '–ü–æ–∫—É–ø–Ω–æ–π –∫–µ–π—Å', price: 99 },
  premium: { name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å', price: 499 }
};

// –†–ï–ê–õ–¨–ù–´–ï —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–≤ —Ä—É–±–ª—è—Ö)
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ Steam Market –∏ linkItems-complete.js
const ESTIMATED_ITEM_PRICES = {
  consumer: 50,      // ‚ÇΩ20-100 (Battle-Scarred —Å–∫–∏–Ω—ã, P250 Sand Dune –∏ —Ç.–¥.)
  industrial: 200,   // ‚ÇΩ100-500 (Industrial Grade)
  milspec: 800,      // ‚ÇΩ400-1500 (Mil-Spec Grade)
  restricted: 3000,  // ‚ÇΩ1500-6000 (Restricted - AK Phantom Disruptor –∏ —Ç.–¥.)
  classified: 8000,  // ‚ÇΩ4000-15000 (Classified - AK Redline, M4 Asiimov –∏ —Ç.–¥.)
  covert: 50000,     // ‚ÇΩ30000-80000 (Covert - AK Fire Serpent, Dragon Lore –∏ —Ç.–¥.)
  contraband: 250000, // ‚ÇΩ200000-300000 (–ù–æ–∂–∏ - Karambit Doppler –∏ —Ç.–¥.)
  exotic: 500000     // ‚ÇΩ400000+ (–ü–µ—Ä—á–∞—Ç–∫–∏ - —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ add-base-items.js
const CURRENT_WEIGHTS = {};
Object.keys(CASE_CONFIGS).forEach(caseType => {
  CURRENT_WEIGHTS[caseType] = CASE_CONFIGS[caseType].drop_weights;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ—Å–∞—Ö
function calculateExpectedValue(weights, priceMap = ESTIMATED_ITEM_PRICES) {
  let expectedValue = 0;
  let totalWeight = 0;

  // –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å–∞
  Object.values(weights).forEach(weight => {
    totalWeight += weight;
  });

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
  Object.entries(weights).forEach(([rarity, weight]) => {
    const probability = weight / totalWeight;
    const averagePrice = priceMap[rarity] || 0;
    const contribution = probability * averagePrice;
    expectedValue += contribution;
  });

  return expectedValue;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkCurrentWeights() {
  console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –í–ï–°–û–í –ò–ó ADD-BASE-ITEMS.JS\n');
  console.log('=' .repeat(60) + '\n');

  // –¶–µ–ª–µ–≤—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (80% –æ—Ç –¥–æ—Ö–æ–¥–∞)
  const targets = {
    subscription_tier1: SUBSCRIPTION_PRICES[1].daily_cost * 0.8, // ‚ÇΩ32.26
    subscription_tier2: SUBSCRIPTION_PRICES[2].daily_cost * 0.8, // ‚ÇΩ77.06
    subscription_tier3: SUBSCRIPTION_PRICES[3].daily_cost * 0.8, // ‚ÇΩ181.84
    purchase: PAID_CASES.purchase.price * 0.8, // ‚ÇΩ79.20
    premium: PAID_CASES.premium.price * 0.8     // ‚ÇΩ399.20
  };

  console.log('üìã –¶–ï–õ–ï–í–´–ï –°–¢–û–ò–ú–û–°–¢–ò (80% –æ—Ç –¥–æ—Ö–æ–¥–∞):');
  Object.entries(targets).forEach(([caseType, target]) => {
    console.log(`   ${caseType}: ‚ÇΩ${target.toFixed(2)}`);
  });
  console.log('');

  console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –í–ï–°–û–í:\n');

  Object.entries(CURRENT_WEIGHTS).forEach(([caseType, weights]) => {
    const expectedValue = calculateExpectedValue(weights);
    const target = targets[caseType];
    const difference = expectedValue - target;
    const accuracy = Math.abs(difference / target * 100);
    const profitability = ((target - expectedValue) / target * 100) + 20; // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å

    console.log(`üì¶ ${caseType.toUpperCase()}:`);
    console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${expectedValue.toFixed(2)}`);
    console.log(`   –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${target.toFixed(2)}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${difference >= 0 ? '+' : ''}‚ÇΩ${difference.toFixed(2)}`);
    console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${profitability.toFixed(1)}%`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${accuracy <= 5 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : accuracy <= 15 ? '‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò'}`);
    console.log('');
  });

  console.log('=' .repeat(60));
  console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
}

// –≠–∫—Å–ø–æ—Ä—Ç
module.exports = {
  SUBSCRIPTION_PRICES,
  PAID_CASES,
  ESTIMATED_ITEM_PRICES,
  CURRENT_WEIGHTS,
  calculateExpectedValue,
  checkCurrentWeights
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkCurrentWeights();
}
