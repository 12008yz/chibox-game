#!/usr/bin/env node

const SteamUser = require('steam-user');
const SteamCommunity = require('steamcommunity');
const TradeOfferManager = require('steam-tradeoffer-manager');
const SteamTotp = require('steam-totp');
const steamBotConfig = require('../config/steam_bot.js');

const client = new SteamUser();
const community = new SteamCommunity();
const manager = new TradeOfferManager({
  steam: client,
  community: community,
  language: 'en',
});

console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Steam...');

// –õ–æ–≥–∏–Ω
const twoFactorCode = SteamTotp.generateAuthCode(steamBotConfig.sharedSecret);
client.logOn({
  accountName: steamBotConfig.accountName,
  password: steamBotConfig.password,
  twoFactorCode: twoFactorCode
});

client.on('loggedOn', () => {
  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Steam');
});

client.on('webSession', (sessionID, cookies) => {
  console.log('üåê –ü–æ–ª—É—á–µ–Ω–∞ web —Å–µ—Å—Å–∏—è');
  manager.setCookies(cookies);
  community.setCookies(cookies);

  if (steamBotConfig.steamApiKey) {
    manager.apiKey = steamBotConfig.steamApiKey;
  }

  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–π–¥–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã
  manager.getOffers(1, null, (err, sent, received) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤:', err);
      process.exit(1);
    }

    console.log(`üìä –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤: ${sent.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const pendingOffers = sent.filter(offer => offer.state === 2);
    console.log(`‚è≥ –¢—Ä–µ–π–¥–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${pendingOffers.length}`);

    if (pendingOffers.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      process.exit(0);
    }

    let confirmed = 0;
    let processed = 0;

    pendingOffers.forEach((offer, index) => {
      setTimeout(() => {
        console.log(`üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ #${offer.id}...`);

        offer.confirm((confirmErr) => {
          processed++;
          if (confirmErr) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ #${offer.id}:`, confirmErr.message);
          } else {
            console.log(`‚úÖ –¢—Ä–µ–π–¥ #${offer.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`);
            confirmed++;
          }

          if (processed === pendingOffers.length) {
            setTimeout(() => {
              console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${confirmed}/${pendingOffers.length}`);
              process.exit(0);
            }, 1000);
          }
        });
      }, index * 1500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫ –º–µ–∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
    });
  });
});

client.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Steam:', err);
  process.exit(1);
});
