const db = require('../models');

// –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
const subscriptionTiers = {
  1: { days: 30, max_daily_cases: 1, bonus_percentage: 3.0, name: '–°—Ç–∞—Ç—É—Å', price: 1210 },
  2: { days: 30, max_daily_cases: 1, bonus_percentage: 5.0, name: '–°—Ç–∞—Ç—É—Å+', price: 2890 },
  3: { days: 30, max_daily_cases: 1, bonus_percentage: 7.0, name: '–°—Ç–∞—Ç—É—Å++', price: 6819 }
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –±–æ–Ω—É—Å–æ–≤
const levelBonuses = {
  1: { bonus_percentage: 0.0, required_xp: 0 },
  2: { bonus_percentage: 0.5, required_xp: 100 },
  3: { bonus_percentage: 1.0, required_xp: 250 },
  4: { bonus_percentage: 1.5, required_xp: 500 },
  5: { bonus_percentage: 2.0, required_xp: 1000 },
  10: { bonus_percentage: 3.0, required_xp: 5000 },
  15: { bonus_percentage: 4.0, required_xp: 15000 },
  20: { bonus_percentage: 5.0, required_xp: 35000 },
  25: { bonus_percentage: 6.0, required_xp: 75000 },
  30: { bonus_percentage: 7.5, required_xp: 150000 }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
function getLevelBonus(level) {
  const levelKeys = Object.keys(levelBonuses).map(Number).sort((a, b) => b - a);
  for (const levelKey of levelKeys) {
    if (level >= levelKey) {
      return levelBonuses[levelKey].bonus_percentage;
    }
  }
  return levelBonuses[1].bonus_percentage;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
// –í–ê–ñ–ù–û: –ë–æ–Ω—É—Å—ã –¥–µ–π—Å—Ç–≤—É—é—Ç –¢–û–õ–¨–ö–û –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã!
function simulateCaseOpening(items, subscriptionTier = 0, userLevel = 1, isFreeCase = false) {
  if (!items || items.length === 0) {
    console.log('   ‚ùå DEBUG: –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏');
    return null;
  }

  // –ë–æ–Ω—É—Å—ã –¥–µ–π—Å—Ç–≤—É—é—Ç –¢–û–õ–¨–ö–û –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã!
  let totalBonus = 0;
  if (isFreeCase) {
    const subscriptionBonus = subscriptionTiers[subscriptionTier]?.bonus_percentage || 0;
    const levelBonus = getLevelBonus(userLevel);
    totalBonus = subscriptionBonus + levelBonus;
  }

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤
  const modifiedItems = items.map(item => {
    let modifiedWeight = item.drop_weight || 1;

    // –ë–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∫–µ–π—Å–∞–º –∏ —Ç–æ–ª—å–∫–æ –∫ —Ä–µ–¥–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
    if (isFreeCase && totalBonus > 0 && item.rarity && ['classified', 'covert', 'contraband', 'exotic'].includes(item.rarity)) {
      const bonusMultiplier = 1 + (totalBonus / 100);
      modifiedWeight *= bonusMultiplier;
    }

    return {
      ...item,
      modified_weight: modifiedWeight
    };
  });

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const totalWeight = modifiedItems.reduce((sum, item) => sum + item.modified_weight, 0);

  if (totalWeight === 0) {
    console.log('   ‚ùå DEBUG: –û–±—â–∏–π –≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–∞–≤–µ–Ω 0');
    console.log('   –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞:', modifiedItems.slice(0, 3).map(item => ({ name: item.name, weight: item.modified_weight, originalWeight: item.drop_weight })));
    return null;
  }

  // DEBUG: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–∞—Ö
  if (actualOpenCount && typeof actualOpenCount !== 'undefined') {
    console.log(`   üìä –û–±—â–∏–π –≤–µ—Å: ${totalWeight.toFixed(4)}, —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${random.toFixed(4)}`);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ totalWeight
  const random = Math.random() * totalWeight;

  // –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–∞–≤—à–∏–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
  let currentWeight = 0;
  for (const item of modifiedItems) {
    currentWeight += item.modified_weight;
    if (random <= currentWeight) {
      return item;
    }
  }

  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
  return modifiedItems[modifiedItems.length - 1];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–∞
async function testCaseProfitability(caseTemplate, openCount = 20, subscriptionTier = 0, userLevel = 1) {
  const isFreeCase = !caseTemplate.price || caseTemplate.price === 0;
  const actualOpenCount = isFreeCase ? 40 : openCount; // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å 40 –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏

  console.log(`\nüé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ–π—Å: ${caseTemplate.name}`);
  console.log(`üí∞ –¶–µ–Ω–∞ –∫–µ–π—Å–∞: ${caseTemplate.price ? `‚ÇΩ${caseTemplate.price}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}`);

  if (isFreeCase && subscriptionTier > 0) {
    const sub = subscriptionTiers[subscriptionTier];
    console.log(`üëë –ü–æ–¥–ø–∏—Å–∫–∞: ${sub.name} (+${sub.bonus_percentage}% –∫ —Ä–µ–¥–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º)`);
  }

  if (isFreeCase && userLevel > 1) {
    const levelBonus = getLevelBonus(userLevel);
    console.log(`‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${userLevel} (+${levelBonus}% –∫ —Ä–µ–¥–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º)`);
  }

  if (!isFreeCase && (subscriptionTier > 0 || userLevel > 1)) {
    console.log(`‚ÑπÔ∏è  –ü–û–ö–£–ü–ù–û–ô –ö–ï–ô–°: –ë–æ–Ω—É—Å—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É—Ä–æ–≤–Ω—è –ù–ï –¥–µ–π—Å—Ç–≤—É—é—Ç!`);
  }

  console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–∏–π: ${actualOpenCount} ${isFreeCase ? '(–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å)' : '(–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å)'}`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∫–µ–π—Å–∞
  const items = await caseTemplate.getItems();

  if (!items || items.length === 0) {
    console.log(`‚ùå –í –∫–µ–π—Å–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤!`);
    return {
      caseName: caseTemplate.name,
      casePrice: caseTemplate.price || 0,
      totalSpent: 0,
      totalWon: 0,
      profit: 0,
      profitPercentage: 0,
      averageWin: 0,
      openings: []
    };
  }

  console.log(`üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–µ–π—Å–µ: ${items.length}`);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const itemsWithWeights = items.filter(item => item.drop_weight && item.drop_weight > 0);
  const itemsWithoutWeights = items.filter(item => !item.drop_weight || item.drop_weight === 0);
  console.log(`   üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–µ—Å–æ–º > 0: ${itemsWithWeights.length}`);
  console.log(`   ‚ùå –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ –≤–µ—Å–∞: ${itemsWithoutWeights.length}`);

  if (itemsWithWeights.length > 0) {
    console.log(`   üî¢ –ü—Ä–∏–º–µ—Ä—ã –≤–µ—Å–æ–≤: ${itemsWithWeights.slice(0, 3).map(item => `${item.name}: ${item.drop_weight}`).join(', ')}`);
  }

  const results = [];
  let totalSpent = (caseTemplate.price || 0) * actualOpenCount;
  let totalWon = 0;

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
  for (let i = 1; i <= actualOpenCount; i++) {
    const wonItem = simulateCaseOpening(items, subscriptionTier, userLevel, isFreeCase);
    const itemValue = wonItem ? parseFloat(wonItem.price || 0) : 0;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –æ—Ç–∫—Ä—ã—Ç–∏–π
    if (i <= 3) {
      console.log(`   Debug ${i}: wonItem = ${wonItem ? wonItem.name : 'null'}, rarity = ${wonItem ? wonItem.rarity : 'undefined'}, price = ${wonItem ? wonItem.price : 'undefined'}`);
    }

    totalWon += itemValue;

    results.push({
      opening: i,
      itemName: wonItem ? wonItem.name : 'Unknown',
      itemRarity: wonItem ? wonItem.rarity : 'undefined',
      itemValue: itemValue,
      dropWeight: wonItem ? wonItem.drop_weight : 0
    });

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–∏—Ö –≤—ã–ø–∞–¥–µ–Ω–∏—è—Ö
    if (wonItem && ['covert', 'contraband', 'exotic'].includes(wonItem.rarity)) {
      console.log(`   üåü ${i}. ${wonItem.rarity.toUpperCase()}: ${wonItem.name} - ‚ÇΩ${itemValue.toFixed(2)}`);
    }
  }

  const profit = totalWon - totalSpent;
  const profitPercentage = totalSpent > 0 ? ((profit / totalSpent) * 100) : 0;
  const averageWin = totalWon / actualOpenCount;

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚ÇΩ${totalSpent.toFixed(2)}`);
  console.log(`   üí∞ –í—ã–∏–≥—Ä–∞–Ω–æ: ‚ÇΩ${totalWon.toFixed(2)}`);
  console.log(`   ${profit >= 0 ? 'üìà' : 'üìâ'} –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit.toFixed(2)} (${profitPercentage.toFixed(2)}%)`);
  console.log(`   üéØ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ‚ÇΩ${averageWin.toFixed(2)}`);

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const rarityStats = {};
  results.forEach(result => {
    const rarity = result.itemRarity;
    if (!rarityStats[rarity]) {
      rarityStats[rarity] = { count: 0, totalValue: 0 };
    }
    rarityStats[rarity].count++;
    rarityStats[rarity].totalValue += result.itemValue;
  });

  console.log(`\nüé® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:`);
  Object.entries(rarityStats).forEach(([rarity, stats]) => {
    const percentage = ((stats.count / actualOpenCount) * 100).toFixed(1);
    const avgValue = (stats.totalValue / stats.count).toFixed(2);
    console.log(`   ${rarity}: ${stats.count} —à—Ç (${percentage}%) - –°—Ä. ‚ÇΩ${avgValue}`);
  });

  return {
    caseName: caseTemplate.name,
    casePrice: caseTemplate.price || 0,
    totalSpent,
    totalWon,
    profit,
    profitPercentage,
    averageWin,
    rarityStats,
    openings: results
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫
async function testSubscriptionProfitability(subscriptionTier, userLevel = 25) {
  console.log('\n' + '='.repeat(70));
  console.log(`üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò: ${subscriptionTiers[subscriptionTier].name}`);
  console.log('='.repeat(70));

  const subscription = subscriptionTiers[subscriptionTier];
  console.log(`üí∞ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ‚ÇΩ${subscription.price} –Ω–∞ ${subscription.days} –¥–Ω–µ–π`);
  console.log(`üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤: ${subscription.max_daily_cases}`);
  console.log(`üéØ –ë–æ–Ω—É—Å –∫ —Ä–µ–¥–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: +${subscription.bonus_percentage}% (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤)`);
  console.log(`‚≠ê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${userLevel} (+${getLevelBonus(userLevel)}%)`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ)
    const freeCaseTemplates = await db.CaseTemplate.findAll({
      where: {
        is_active: true,
        price: null // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤
      },
      include: [{
        model: db.Item,
        as: 'items',
        through: { attributes: [] }
      }],
      order: [['sort_order', 'ASC']]
    });

    if (freeCaseTemplates.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤!');
      return null;
    }

    console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤: ${freeCaseTemplates.length}`);

    let totalDailyValue = 0;
    const caseResults = [];

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å
    for (const caseTemplate of freeCaseTemplates) {
      const result = await testCaseProfitability(caseTemplate, 20, subscriptionTier, userLevel);
      caseResults.push(result);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è (–∑–∞ 40 –æ—Ç–∫—Ä—ã—Ç–∏–π)
      const dailyValue = result.totalWon;
      totalDailyValue += dailyValue;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    const totalSubscriptionValue = totalDailyValue * subscription.days;
    const subscriptionProfit = totalSubscriptionValue - subscription.price;
    const subscriptionProfitPercentage = (subscriptionProfit / subscription.price) * 100;

    console.log('\n' + '='.repeat(70));
    console.log('üìä –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò –ü–û–î–ü–ò–°–ö–ò');
    console.log('='.repeat(70));

    console.log(`üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: ‚ÇΩ${subscription.price}`);
    console.log(`üéÅ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å: ‚ÇΩ${totalDailyValue.toFixed(2)}`);
    console.log(`üíé –û–±—â–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ ${subscription.days} –¥–Ω–µ–π: ‚ÇΩ${totalSubscriptionValue.toFixed(2)}`);

    if (subscriptionProfit > 0) {
      console.log(`üìà –ü—Ä–∏–±—ã–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚ÇΩ${subscriptionProfit.toFixed(2)} (+${subscriptionProfitPercentage.toFixed(1)}%)`);
      console.log(`‚ö†Ô∏è  –ü–û–î–ü–ò–°–ö–ê –£–ë–´–¢–û–ß–ù–ê –¥–ª—è –∫–∞–∑–∏–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ —á–µ–º –ø–ª–∞—Ç—è—Ç.`);
    } else {
      console.log(`üìâ –£–±—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚ÇΩ${Math.abs(subscriptionProfit).toFixed(2)} (${Math.abs(subscriptionProfitPercentage).toFixed(1)}%)`);
      console.log(`‚úÖ –ü–û–î–ü–ò–°–ö–ê –ü–†–ò–ë–´–õ–¨–ù–ê –¥–ª—è –∫–∞–∑–∏–Ω–æ.`);
    }

    // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∞/—Ü–µ–Ω–Ω–æ—Å—Ç—å
    const valueRatio = totalSubscriptionValue / subscription.price;
    console.log(`\n‚öñÔ∏è  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å/—Ü–µ–Ω–∞: ${valueRatio.toFixed(2)}`);

    if (valueRatio > 1.2) {
      console.log(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞ ${((valueRatio - 1) * 100).toFixed(1)}% –±–æ–ª—å—à–µ —á–µ–º –ø–ª–∞—Ç—è—Ç!`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–Ω–∏–∑–∏—Ç—å –≤–µ—Å–∞ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –±–æ–Ω—É—Å—ã –ø–æ–¥–ø–∏—Å–∫–∏`);
    } else if (valueRatio > 1.0) {
      console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞ ${((valueRatio - 1) * 100).toFixed(1)}% –±–æ–ª—å—à–µ —á–µ–º –ø–ª–∞—Ç—è—Ç`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–ª–µ–≥–∫–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ø–æ–ª—å–∑—É –∫–∞–∑–∏–Ω–æ`);
    } else if (valueRatio < 0.7) {
      console.log(`üìâ –ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π (—Ü–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ ${(valueRatio * 100).toFixed(1)}%)`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏`);
    } else {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/—Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (70-100%)`);
    }

    return {
      subscriptionTier,
      subscriptionName: subscription.name,
      subscriptionPrice: subscription.price,
      totalDailyValue,
      totalSubscriptionValue,
      subscriptionProfit,
      subscriptionProfitPercentage,
      valueRatio,
      caseResults,
      userLevel
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤
async function testAllCases(openCount = 20) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–æ–≤');
  console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞: ${openCount}\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã
    const caseTemplates = await db.CaseTemplate.findAll({
      where: { is_active: true },
      include: [{
        model: db.Item,
        as: 'items',
        through: { attributes: [] }
      }],
      order: [['sort_order', 'ASC']]
    });

    if (caseTemplates.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤!');
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤: ${caseTemplates.length}`);

    const allResults = [];
    let totalProfit = 0;
    let totalSpent = 0;
    let totalWon = 0;

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–µ–π—Å
    for (const caseTemplate of caseTemplates) {
      const result = await testCaseProfitability(caseTemplate, openCount);
      allResults.push(result);

      totalProfit += result.profit;
      totalSpent += result.totalSpent;
      totalWon += result.totalWon;

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(60));
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ö–ï–ô–°–ê–ú');
    console.log('='.repeat(60));

    console.log(`üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–∞: ‚ÇΩ${totalSpent.toFixed(2)}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞: ‚ÇΩ${totalWon.toFixed(2)}`);
    console.log(`${totalProfit >= 0 ? 'üìà' : 'üìâ'} –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ‚ÇΩ${totalProfit.toFixed(2)}`);

    const overallProfitPercentage = totalSpent > 0 ? ((totalProfit / totalSpent) * 100) : 0;
    console.log(`üìä –û–±—â–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${overallProfitPercentage.toFixed(2)}%`);

    const expectedProfitMargin = totalSpent > 0 ? ((-totalProfit / totalSpent) * 100) : 0;
    console.log(`üí° –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${expectedProfitMargin.toFixed(2)}%`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∫–µ–π—Å–æ–≤
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ï–ô–°–ê–ú:');
    console.log('-'.repeat(80));
    console.log('–ö–µ–π—Å'.padEnd(25) + '–¶–µ–Ω–∞'.padEnd(10) + '–ü—Ä–∏–±—ã–ª—å'.padEnd(12) + '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å'.padEnd(15) + '–°—Ç–∞—Ç—É—Å');
    console.log('-'.repeat(80));

    allResults.forEach(result => {
      const priceStr = result.casePrice > 0 ? `‚ÇΩ${result.casePrice}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      const profitStr = `‚ÇΩ${result.profit.toFixed(0)}`;
      const percentStr = `${result.profitPercentage.toFixed(1)}%`;
      const status = result.profit < 0 ? '‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω–æ' : '‚ùå –£–±—ã—Ç–æ—á–Ω–æ';

      console.log(
        result.caseName.substring(0, 24).padEnd(25) +
        priceStr.padEnd(10) +
        profitStr.padEnd(12) +
        percentStr.padEnd(15) +
        status
      );
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    const unprofitableCases = allResults.filter(r => r.profit > 0);
    const profitableCases = allResults.filter(r => r.profit < 0);

    if (unprofitableCases.length > 0) {
      console.log(`‚ö†Ô∏è  –£–±—ã—Ç–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (${unprofitableCases.length}): –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ —á–µ–º –ø–ª–∞—Ç—è—Ç`);
      unprofitableCases.forEach(c => {
        console.log(`   - ${c.caseName}: –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +${Math.abs(c.profitPercentage).toFixed(1)}% –ø—Ä–∏–±—ã–ª–∏`);
      });
      console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å–∞ –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Å–∞ –¥–æ—Ä–æ–≥–∏—Ö');
    }

    if (profitableCases.length > 0) {
      console.log(`‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –∫–µ–π—Å—ã (${profitableCases.length}): –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥`);
      console.log(`   üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: ${(profitableCases.reduce((sum, c) => sum + Math.abs(c.profitPercentage), 0) / profitableCases.length).toFixed(1)}%`);
    }

    if (overallProfitPercentage < -15 || overallProfitPercentage > -25) {
      console.log(`\n‚öñÔ∏è  –ë–ê–õ–ê–ù–°: –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å 20%, —Ç–µ–∫—É—â–∞—è ${Math.abs(overallProfitPercentage).toFixed(1)}%`);
      if (overallProfitPercentage > -15) {
        console.log('   üìâ –ü—Ä–∏–±—ã–ª—å –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π - –Ω—É–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞–º');
      } else {
        console.log('   üìà –ü—Ä–∏–±—ã–ª—å –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–π - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞–º');
      }
    } else {
      console.log('\n‚úÖ –ë–ê–õ–ê–ù–°: –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–ª–µ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20¬±5%');
    }

    return allResults;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  testAllCases,
  testCaseProfitability,
  testSubscriptionProfitability,
  simulateCaseOpening,
  subscriptionTiers,
  levelBonuses,
  getLevelBonus
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  const mode = args[0] || 'cases'; // 'cases', 'subscription', 'all'

  if (mode === 'subscription') {
    const tier = parseInt(args[1]) || 1;
    const level = parseInt(args[2]) || 25;

    console.log('üëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫ CS2');
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è ${tier} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${level} —É—Ä–æ–≤–Ω—è\n`);

    testSubscriptionProfitability(tier, level)
      .then(() => {
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫');
        process.exit(0);
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
      });

  } else if (mode === 'all') {
    console.log('üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ö–µ–π—Å—ã + –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏');
    console.log('='.repeat(60));

    const openCount = parseInt(args[1]) || 20;

    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–µ–π—Å—ã
    testAllCases(openCount)
      .then(() => {
        console.log('\n' + '='.repeat(60));
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–æ–∫...');
        console.log('='.repeat(60));

        // –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const subscriptionTests = [1, 2, 3].map(tier =>
          testSubscriptionProfitability(tier, 25)
        );

        return Promise.all(subscriptionTests);
      })
      .then(() => {
        console.log('\n' + '='.repeat(60));
        console.log('üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
        console.log('='.repeat(60));
        console.log('üí° –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã');
        process.exit(0);
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
      });

  } else {
    // –û–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤
    const openCount = parseInt(args[1]) || 20;

    console.log('üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–æ–≤ CS2');
    console.log(`üìä –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ ${openCount} –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞`);
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node fix.js subscription [1-3] [—É—Ä–æ–≤–µ–Ω—å] –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node fix.js all [–æ—Ç–∫—Ä—ã—Ç–∏–π] –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n');

    testAllCases(openCount)
      .then(() => {
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤ –≤ fix-drop-weights.js');
        process.exit(0);
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
      });
  }
}
