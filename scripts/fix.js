const db = require('../models');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function simulateCaseOpening(items) {
  if (!items || items.length === 0) {
    return null;
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const totalWeight = items.reduce((sum, item) => sum + (item.drop_weight || 1), 0);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ totalWeight
  const random = Math.random() * totalWeight;

  // –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–∞–≤—à–∏–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
  let currentWeight = 0;
  for (const item of items) {
    currentWeight += (item.drop_weight || 1);
    if (random <= currentWeight) {
      return item;
    }
  }

  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
  return items[items.length - 1];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–∞
async function testCaseProfitability(caseTemplate, openCount = 20) {
  console.log(`\nüé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ–π—Å: ${caseTemplate.name}`);
  console.log(`üí∞ –¶–µ–Ω–∞ –∫–µ–π—Å–∞: ${caseTemplate.price ? `‚ÇΩ${caseTemplate.price}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∫–µ–π—Å–∞
  const items = await caseTemplate.getItems();

  if (!items || items.length === 0) {
    console.log(`‚ùå –í –∫–µ–π—Å–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤!`);
    return {
      caseName: caseTemplate.name,
      casePrice: caseTemplate.price || 0,
      totalSpent: 0,
      totalWon: 0,
      profit: 0,
      profitPercentage: 0,
      averageWin: 0,
      openings: []
    };
  }

  console.log(`üì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–µ–π—Å–µ: ${items.length}`);

  const results = [];
  let totalSpent = (caseTemplate.price || 0) * openCount;
  let totalWon = 0;

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
  for (let i = 1; i <= openCount; i++) {
    const wonItem = simulateCaseOpening(items);
    const itemValue = wonItem ? (wonItem.price || wonItem.actual_price_rub || 0) : 0;

    totalWon += itemValue;

    results.push({
      opening: i,
      itemName: wonItem ? wonItem.name : 'Unknown',
      itemRarity: wonItem ? wonItem.rarity : 'unknown',
      itemValue: itemValue,
      dropWeight: wonItem ? wonItem.drop_weight : 0
    });

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–∏—Ö –≤—ã–ø–∞–¥–µ–Ω–∏—è—Ö
    if (wonItem && ['covert', 'contraband', 'exotic'].includes(wonItem.rarity)) {
      console.log(`   üåü ${i}. ${wonItem.rarity.toUpperCase()}: ${wonItem.name} - ‚ÇΩ${itemValue.toFixed(2)}`);
    }
  }

  const profit = totalWon - totalSpent;
  const profitPercentage = totalSpent > 0 ? ((profit / totalSpent) * 100) : 0;
  const averageWin = totalWon / openCount;

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚ÇΩ${totalSpent.toFixed(2)}`);
  console.log(`   üí∞ –í—ã–∏–≥—Ä–∞–Ω–æ: ‚ÇΩ${totalWon.toFixed(2)}`);
  console.log(`   ${profit >= 0 ? 'üìà' : 'üìâ'} –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit.toFixed(2)} (${profitPercentage.toFixed(2)}%)`);
  console.log(`   üéØ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ‚ÇΩ${averageWin.toFixed(2)}`);

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const rarityStats = {};
  results.forEach(result => {
    const rarity = result.itemRarity;
    if (!rarityStats[rarity]) {
      rarityStats[rarity] = { count: 0, totalValue: 0 };
    }
    rarityStats[rarity].count++;
    rarityStats[rarity].totalValue += result.itemValue;
  });

  console.log(`\nüé® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:`);
  Object.entries(rarityStats).forEach(([rarity, stats]) => {
    const percentage = ((stats.count / openCount) * 100).toFixed(1);
    const avgValue = (stats.totalValue / stats.count).toFixed(2);
    console.log(`   ${rarity}: ${stats.count} —à—Ç (${percentage}%) - –°—Ä. ‚ÇΩ${avgValue}`);
  });

  return {
    caseName: caseTemplate.name,
    casePrice: caseTemplate.price || 0,
    totalSpent,
    totalWon,
    profit,
    profitPercentage,
    averageWin,
    rarityStats,
    openings: results
  };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤
async function testAllCases(openCount = 20) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–æ–≤');
  console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞: ${openCount}\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã
    const caseTemplates = await db.CaseTemplate.findAll({
      where: { is_active: true },
      include: [{
        model: db.Item,
        as: 'items',
        through: { attributes: [] }
      }],
      order: [['sort_order', 'ASC']]
    });

    if (caseTemplates.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤!');
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤: ${caseTemplates.length}`);

    const allResults = [];
    let totalProfit = 0;
    let totalSpent = 0;
    let totalWon = 0;

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–µ–π—Å
    for (const caseTemplate of caseTemplates) {
      const result = await testCaseProfitability(caseTemplate, openCount);
      allResults.push(result);

      totalProfit += result.profit;
      totalSpent += result.totalSpent;
      totalWon += result.totalWon;

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(60));
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ö–ï–ô–°–ê–ú');
    console.log('='.repeat(60));

    console.log(`üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–∞: ‚ÇΩ${totalSpent.toFixed(2)}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞: ‚ÇΩ${totalWon.toFixed(2)}`);
    console.log(`${totalProfit >= 0 ? 'üìà' : 'üìâ'} –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ‚ÇΩ${totalProfit.toFixed(2)}`);

    const overallProfitPercentage = totalSpent > 0 ? ((totalProfit / totalSpent) * 100) : 0;
    console.log(`üìä –û–±—â–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${overallProfitPercentage.toFixed(2)}%`);

    const expectedProfitMargin = totalSpent > 0 ? ((-totalProfit / totalSpent) * 100) : 0;
    console.log(`üí° –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${expectedProfitMargin.toFixed(2)}%`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∫–µ–π—Å–æ–≤
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ï–ô–°–ê–ú:');
    console.log('-'.repeat(80));
    console.log('–ö–µ–π—Å'.padEnd(25) + '–¶–µ–Ω–∞'.padEnd(10) + '–ü—Ä–∏–±—ã–ª—å'.padEnd(12) + '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å'.padEnd(15) + '–°—Ç–∞—Ç—É—Å');
    console.log('-'.repeat(80));

    allResults.forEach(result => {
      const priceStr = result.casePrice > 0 ? `‚ÇΩ${result.casePrice}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      const profitStr = `‚ÇΩ${result.profit.toFixed(0)}`;
      const percentStr = `${result.profitPercentage.toFixed(1)}%`;
      const status = result.profit < 0 ? '‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω–æ' : '‚ùå –£–±—ã—Ç–æ—á–Ω–æ';

      console.log(
        result.caseName.substring(0, 24).padEnd(25) +
        priceStr.padEnd(10) +
        profitStr.padEnd(12) +
        percentStr.padEnd(15) +
        status
      );
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    const unprofitableCases = allResults.filter(r => r.profit > 0);
    const profitableCases = allResults.filter(r => r.profit < 0);

    if (unprofitableCases.length > 0) {
      console.log(`‚ö†Ô∏è  –£–±—ã—Ç–æ—á–Ω—ã–µ –∫–µ–π—Å—ã (${unprofitableCases.length}): –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ —á–µ–º –ø–ª–∞—Ç—è—Ç`);
      unprofitableCases.forEach(c => {
        console.log(`   - ${c.caseName}: –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +${Math.abs(c.profitPercentage).toFixed(1)}% –ø—Ä–∏–±—ã–ª–∏`);
      });
      console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å–∞ –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Å–∞ –¥–æ—Ä–æ–≥–∏—Ö');
    }

    if (profitableCases.length > 0) {
      console.log(`‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –∫–µ–π—Å—ã (${profitableCases.length}): –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥`);
      console.log(`   üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: ${(profitableCases.reduce((sum, c) => sum + Math.abs(c.profitPercentage), 0) / profitableCases.length).toFixed(1)}%`);
    }

    if (overallProfitPercentage < -15 || overallProfitPercentage > -25) {
      console.log(`\n‚öñÔ∏è  –ë–ê–õ–ê–ù–°: –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å 20%, —Ç–µ–∫—É—â–∞—è ${Math.abs(overallProfitPercentage).toFixed(1)}%`);
      if (overallProfitPercentage > -15) {
        console.log('   üìâ –ü—Ä–∏–±—ã–ª—å –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π - –Ω—É–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞–º');
      } else {
        console.log('   üìà –ü—Ä–∏–±—ã–ª—å –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–π - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞–º');
      }
    } else {
      console.log('\n‚úÖ –ë–ê–õ–ê–ù–°: –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–ª–µ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20¬±5%');
    }

    return allResults;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  testAllCases,
  testCaseProfitability,
  simulateCaseOpening
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const openCount = process.argv[2] ? parseInt(process.argv[2]) : 20;

  console.log('üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–æ–≤ CS2');
  console.log(`üìä –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ ${openCount} –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞\n`);

  testAllCases(openCount)
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤ –≤ fix-drop-weights.js');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
