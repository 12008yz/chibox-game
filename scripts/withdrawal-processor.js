#!/usr/bin/env node

/**
 * UNIFIED WITHDRAWAL PROCESSOR
 *
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞ ‚Üí –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
 * 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ Steam ‚Üí –∏—â–µ–º –Ω–∞ PlayerOk ‚Üí –ø–æ–∫—É–ø–∞–µ–º –µ—Å–ª–∏ –≤—ã–≥–æ–¥–Ω–æ
 * 3. –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí withdrawal failed
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const { Withdrawal, User, UserInventory, Item } = require('../models');
const SteamBot = require('../services/steamBotService');
const PlayerOkBot = require('../services/playerokBotService');
const steamPriceService = require('../services/steamPriceService');
const steamBotConfig = require('../config/steam_bot.js');
const winston = require('winston');
const { Op } = require('sequelize');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'withdrawal-processor.log' })
  ],
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  CHECK_INTERVAL: 30000, // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  STEAM_BOT_ENABLED: true, // –í–∫–ª—é—á–∏—Ç—å Steam –±–æ—Ç–∞
  PLAYEROK_ENABLED: true, // –í–∫–ª—é—á–∏—Ç—å PlayerOk –∞—Ä–±–∏—Ç—Ä–∞–∂
  MIN_MARGIN_PERCENT: 0, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ –¥–ª—è PlayerOk (0% = –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –¥–æ—Ä–æ–∂–µ)
  MAX_WITHDRAWALS_PER_CYCLE: 10 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞–∫—Å 10 –∑–∞—è–≤–æ–∫ –∑–∞ —Ü–∏–∫–ª
};

class WithdrawalProcessor {
  constructor() {
    this.steamBot = null;
    this.playerokBot = null;
    this.isRunning = false;
    this.processedWithdrawals = new Set();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  async start() {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ Unified Withdrawal Processor...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (CONFIG.STEAM_BOT_ENABLED) {
        logger.info('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Steam –±–æ—Ç–∞...');
        this.steamBot = new SteamBot(
          steamBotConfig.accountName,
          steamBotConfig.password,
          steamBotConfig.sharedSecret,
          steamBotConfig.identitySecret,
          steamBotConfig.steamApiKey
        );

        await this.steamBot.login();
        logger.info('‚úÖ Steam –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        const restrictions = await this.steamBot.getTradeRestrictions();
        if (restrictions.error || !restrictions.canTrade) {
          logger.error('‚ùå Steam –±–æ—Ç –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é!');
          CONFIG.STEAM_BOT_ENABLED = false;
        }
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PlayerOk –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (CONFIG.PLAYEROK_ENABLED) {
        logger.info('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlayerOk –±–æ—Ç–∞...');
        this.playerokBot = new PlayerOkBot();

        const isLoggedIn = await this.playerokBot.init();

        if (!isLoggedIn) {
          logger.warn('‚ö†Ô∏è PlayerOk –±–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂');
          CONFIG.PLAYEROK_ENABLED = false;
        } else {
          logger.info('‚úÖ PlayerOk –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
      }

      if (!CONFIG.STEAM_BOT_ENABLED && !CONFIG.PLAYEROK_ENABLED) {
        logger.error('‚ùå –û–±–∞ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.');
        process.exit(1);
      }

      this.isRunning = true;
      logger.info('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      logger.info(`üìä Steam Bot: ${CONFIG.STEAM_BOT_ENABLED ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);
      logger.info(`üìä PlayerOk: ${CONFIG.PLAYEROK_ENABLED ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.processLoop();

    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
      await this.stop();
      process.exit(1);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawals
   */
  async processLoop() {
    while (this.isRunning) {
      try {
        logger.info('\n' + '='.repeat(80));
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ pending withdrawals...');

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending withdrawals
        const withdrawals = await Withdrawal.findAll({
          where: {
            status: 'pending'
          },
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'username', 'steam_trade_url']
            },
            {
              model: UserInventory,
              as: 'items',
              include: [
                {
                  model: Item,
                  as: 'item',
                  attributes: ['id', 'name', 'price', 'steam_market_hash_name', 'image_url', 'rarity']
                }
              ]
            }
          ],
          order: [
            ['priority', 'DESC'],      // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            ['request_date', 'ASC']    // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
          ],
          limit: CONFIG.MAX_WITHDRAWALS_PER_CYCLE
        });

        if (withdrawals.length === 0) {
          logger.info('‚ÑπÔ∏è –ù–µ—Ç pending withdrawals');
        } else {
          logger.info(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${withdrawals.length} –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É`);

          for (const withdrawal of withdrawals) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
            if (this.processedWithdrawals.has(withdrawal.id)) {
              continue;
            }

            await this.processWithdrawal(withdrawal);
            this.processedWithdrawals.add(withdrawal.id);

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            await this.sleep(3000);
          }
        }

        // –û—á–∏—â–∞–µ–º Set –µ—Å–ª–∏ —Å—Ç–∞–ª –±–æ–ª—å—à–∏–º
        if (this.processedWithdrawals.size > 1000) {
          this.processedWithdrawals.clear();
        }

        // –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        logger.info(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${CONFIG.CHECK_INTERVAL / 1000} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...`);
        await this.sleep(CONFIG.CHECK_INTERVAL);

      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        await this.sleep(10000);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê)
   */
  async processWithdrawal(withdrawal) {
    try {
      logger.info(`\n${'='.repeat(60)}`);
      logger.info(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal ID: ${withdrawal.id}`);
      logger.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.user.username}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await withdrawal.update({
        status: 'processing',
        processing_date: new Date()
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞—è–≤–∫–µ
      for (const inventoryItem of withdrawal.items) {
        const item = inventoryItem.item;

        if (!item) {
          logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è inventory item ${inventoryItem.id}`);
          continue;
        }

        logger.info(`\nüéÆ –ü—Ä–µ–¥–º–µ—Ç: ${item.name}`);
        logger.info(`üí∞ –¶–µ–Ω–∞ –≤ ChiBox: ${item.price}‚ÇΩ`);

        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞
        if (CONFIG.STEAM_BOT_ENABLED) {
          logger.info('üîç [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Steam –±–æ—Ç–∞...');

          const foundInSteam = await this.tryProcessViaSteam(withdrawal, item);

          if (foundInSteam) {
            logger.info('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ Steam –±–æ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
            return; // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ Steam
          }

          logger.info('‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Steam –±–æ—Ç–µ');
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–∏—Å–∫ –Ω–∞ PlayerOk
        if (CONFIG.PLAYEROK_ENABLED) {
          logger.info('üîç [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2] –ü–æ–∏—Å–∫ –Ω–∞ PlayerOk...');

          const foundOnPlayerOk = await this.tryProcessViaPlayerOk(withdrawal, item);

          if (foundOnPlayerOk) {
            logger.info('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ PlayerOk –∏ –∫—É–ø–ª–µ–Ω!');
            return; // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ PlayerOk
          }

          logger.info('‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ PlayerOk –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π');
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –≤ Steam, –Ω–∏ –Ω–∞ PlayerOk
        logger.error('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');

        await withdrawal.update({
          status: 'failed',
          failed_reason: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Steam –±–æ—Ç–µ, –Ω–∏ –Ω–∞ PlayerOk –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ'
        });
      }

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal ${withdrawal.id}:`, error);

      await withdrawal.update({
        status: 'failed',
        failed_reason: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`,
        processing_attempts: (withdrawal.processing_attempts || 0) + 1
      });
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Steam –±–æ—Ç–∞
   */
  async tryProcessViaSteam(withdrawal, item) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
      const botInventory = await this.steamBot.getInventory();

      if (!botInventory || botInventory.length === 0) {
        logger.info('‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞ –ø—É—Å—Ç');
        return false;
      }

      logger.info(`üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ Steam –±–æ—Ç–∞ ${botInventory.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

      // –ò—â–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ market_hash_name
      const marketHashName = item.steam_market_hash_name || item.name;
      const foundItem = botInventory.find(invItem => {
        const itemName = invItem.market_hash_name || invItem.name || '';
        return itemName.toLowerCase() === marketHashName.toLowerCase();
      });

      if (!foundItem) {
        logger.info(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç "${marketHashName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞`);
        return false;
      }

      logger.info(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ Steam –±–æ—Ç–µ! AssetID: ${foundItem.assetid}`);

      // –ü–æ–ª—É—á–∞–µ–º Trade URL
      const tradeUrl = withdrawal.steam_trade_url || withdrawal.user.steam_trade_url;

      if (!tradeUrl) {
        throw new Error('Trade URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥
      logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Steam —Ç—Ä–µ–π–¥–∞...');

      const tradeResult = await this.steamBot.sendTradeOffer(
        tradeUrl,
        [foundItem],
        `–í—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ ${item.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawal.user.username}`
      );

      if (tradeResult.success) {
        logger.info(`‚úÖ –¢—Ä–µ–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! Offer ID: ${tradeResult.tradeOfferId}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º withdrawal
        await withdrawal.update({
          status: 'direct_trade_sent',
          steam_trade_offer_id: tradeResult.tradeOfferId,
          steam_trade_status: 'sent',
          purchase_method: 'steam_bot',
          completion_date: new Date(),
          admin_notes: `–¢—Ä–µ–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Steam –±–æ—Ç–∞. Offer ID: ${tradeResult.tradeOfferId}`
        });

        return true;
      } else {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–π–¥–∞: ${tradeResult.error}`);
        return false;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Steam:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ PlayerOk
   */
  async tryProcessViaPlayerOk(withdrawal, item) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É Steam
      const steamPrice = await this.getSteamPrice(item);
      logger.info(`üíµ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ Steam: ${steamPrice}‚ÇΩ`);

      // –ò—â–µ–º –Ω–∞ PlayerOk
      const bestOffer = await this.playerokBot.searchItem(
        item.name,
        Math.max(steamPrice, item.price) // –ù–µ –¥–æ—Ä–æ–∂–µ –º–∞–∫—Å–∏–º—É–º–∞ –∏–∑ Steam/ChiBox
      );

      if (!bestOffer) {
        logger.info('‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ PlayerOk');
        return false;
      }

      logger.info(`üèÜ –ù–∞–π–¥–µ–Ω –Ω–∞ PlayerOk: ${bestOffer.price}‚ÇΩ`);

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
      const comparison = this.playerokBot.comparePrices(
        bestOffer.price,
        steamPrice,
        item.price
      );

      logger.info(`üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:`);
      logger.info(`   PlayerOk (—Å –∫–æ–º–∏—Å—Å–∏–µ–π): ${comparison.total_cost.toFixed(2)}‚ÇΩ`);
      logger.info(`   Steam Market: ${steamPrice}‚ÇΩ`);
      logger.info(`   ChiBox Price: ${item.price}‚ÇΩ`);
      logger.info(`   –†–µ—à–µ–Ω–∏–µ: ${comparison.decision}`);
      logger.info(`   –ü—Ä–∏—á–∏–Ω–∞: ${comparison.reason}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å
      if (comparison.decision !== 'buy') {
        logger.warn(`‚ùå –ù–µ–≤—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å: ${comparison.reason}`);
        return false;
      }

      logger.info(`‚úÖ –ü–û–ö–£–ü–ê–ï–ú! –ü—Ä–∏–±—ã–ª—å: ${comparison.profit_vs_chibox.toFixed(2)}‚ÇΩ`);

      // –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ PlayerOk
      const tradeUrl = withdrawal.steam_trade_url || withdrawal.user.steam_trade_url;

      const purchaseResult = await this.playerokBot.purchaseItem(
        bestOffer.url,
        tradeUrl
      );

      if (purchaseResult.success) {
        logger.info(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! Chat ID: ${purchaseResult.chat_id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º withdrawal
        await withdrawal.update({
          status: 'purchased_on_playerok',
          playerok_order_id: purchaseResult.chat_id,
          playerok_price: bestOffer.price,
          playerok_fee: comparison.playerok_fee,
          playerok_total_cost: comparison.total_cost,
          steam_market_price: steamPrice,
          chibox_item_price: item.price,
          arbitrage_profit: comparison.profit_vs_chibox,
          arbitrage_margin_percent: comparison.margin_percent,
          playerok_item_url: bestOffer.url,
          purchase_method: 'playerok_arbitrage',
          admin_notes: `PlayerOk –ø–æ–∫—É–ø–∫–∞: Chat ${purchaseResult.chat_id}. –¶–µ–Ω–∞: ${bestOffer.price}‚ÇΩ. –ü—Ä–∏–±—ã–ª—å: ${comparison.profit_vs_chibox.toFixed(2)}‚ÇΩ (${comparison.margin_percent}%)`
        });

        return true;
      } else {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ PlayerOk: ${purchaseResult.error}`);
        return false;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ PlayerOk:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã Steam
   */
  async getSteamPrice(item) {
    try {
      if (!item.steam_market_hash_name) {
        logger.warn(`‚ö†Ô∏è –ù–µ—Ç steam_market_hash_name –¥–ª—è ${item.name}`);
        return item.price;
      }

      const priceData = await steamPriceService.getItemPrice(item.steam_market_hash_name);

      if (priceData && priceData.median_price) {
        const priceInRub = this.convertToRubles(priceData.median_price);
        return priceInRub;
      }

      return item.price;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã Steam:`, error);
      return item.price;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã –≤ —Ä—É–±–ª–∏
   */
  convertToRubles(priceString) {
    try {
      const numericValue = parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.'));

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
      if (priceString.includes('$')) {
        return numericValue * 90; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
      }

      return numericValue;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã:', error);
      return 0;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  async stop() {
    logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
    this.isRunning = false;

    if (this.steamBot) {
      // Steam bot logout –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥
      logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ Steam –±–æ—Ç–∞');
    }

    if (this.playerokBot) {
      await this.playerokBot.close();
    }

    logger.info('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
const processor = new WithdrawalProcessor();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  logger.info('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  await processor.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  await processor.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
processor.start().catch(async (error) => {
  logger.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  await processor.stop();
  process.exit(1);
});
