// –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS2
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö—ç—à –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGE_CACHE_FILE = path.join(__dirname, 'image-cache.json');
let imageCache = {};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function loadImageCache() {
  try {
    if (fs.existsSync(IMAGE_CACHE_FILE)) {
      imageCache = JSON.parse(fs.readFileSync(IMAGE_CACHE_FILE, 'utf8'));
      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${Object.keys(imageCache).length} –∑–∞–ø–∏—Å–µ–π`);
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
    imageCache = {};
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function saveImageCache() {
  try {
    fs.writeFileSync(IMAGE_CACHE_FILE, JSON.stringify(imageCache, null, 2));
    console.log(`üíæ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${Object.keys(imageCache).length} –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
  }
}

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è Steam CDN
const STEAM_CDN_BASES = [
  'https://community.cloudflare.steamstatic.com/economy/image/',
  'https://steamcommunity-a.akamaihd.net/economy/image/',
  'https://cdn.cloudflare.steamstatic.com/economy/image/'
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const WEAPON_PATTERNS = {
  'AK-47': 'ak47',
  'M4A4': 'm4a4',
  'M4A1-S': 'm4a1_silencer',
  'AWP': 'awp',
  'Desert Eagle': 'deagle',
  'Glock-18': 'glock',
  'USP-S': 'usp_silencer',
  'P250': 'p250',
  'Five-SeveN': 'fiveseven',
  'Tec-9': 'tec9',
  'CZ75-Auto': 'cz75a',
  'Dual Berettas': 'elite',
  'P2000': 'hkp2000',
  'R8 Revolver': 'revolver',
  'MP9': 'mp9',
  'MAC-10': 'mac10',
  'MP7': 'mp7',
  'UMP-45': 'ump45',
  'P90': 'p90',
  'PP-Bizon': 'bizon',
  'MP5-SD': 'mp5sd',
  'Nova': 'nova',
  'XM1014': 'xm1014',
  'Sawed-Off': 'sawedoff',
  'MAG-7': 'mag7',
  'Negev': 'negev',
  'M249': 'm249',
  'FAMAS': 'famas',
  'Galil AR': 'galilar',
  'AUG': 'aug',
  'SG 553': 'sg556',
  'SCAR-20': 'scar20',
  'G3SG1': 'g3sg1',
  'SSG 08': 'ssg08'
};

// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async function getItemImageFast(marketHashName, useCache = true) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (useCache && imageCache[marketHashName]) {
      const cachedUrl = imageCache[marketHashName];
      if (await validateImageUrl(cachedUrl)) {
        console.log(`üìã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: ${marketHashName}`);
        return cachedUrl;
      } else {
        // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â—É—é —Å—Å—ã–ª–∫—É –∏–∑ –∫—ç—à–∞
        delete imageCache[marketHashName];
      }
    }

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${marketHashName}`);

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Steam Market API
    const marketImageUrl = await getImageFromMarketAPI(marketHashName);
    if (marketImageUrl) {
      imageCache[marketHashName] = marketImageUrl;
      saveImageCache();
      return marketImageUrl;
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const generatedImageUrl = generateImageUrl(marketHashName);
    if (generatedImageUrl && await validateImageUrl(generatedImageUrl)) {
      imageCache[marketHashName] = generatedImageUrl;
      saveImageCache();
      return generatedImageUrl;
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –≤ Steam Inventory API
    const inventoryImageUrl = await getImageFromInventoryAPI(marketHashName);
    if (inventoryImageUrl) {
      imageCache[marketHashName] = inventoryImageUrl;
      saveImageCache();
      return inventoryImageUrl;
    }

    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${marketHashName}`);
    return null;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${marketHashName}:`, error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Steam Market API
async function getImageFromMarketAPI(marketHashName) {
  try {
    const encodedName = encodeURIComponent(marketHashName);
    const apiUrl = `https://steamcommunity.com/market/search/render/?appid=730&search_descriptions=0&sort_column=popular&sort_dir=desc&count=1&query=${encodedName}`;

    const response = await axios.get(apiUrl, {
      timeout: 5000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
      }
    });

    if (response.data && response.data.results_html) {
      // –ü–∞—Ä—Å–∏–º HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
      const htmlMatch = response.data.results_html.match(/src="([^"]+)"/);
      if (htmlMatch && htmlMatch[1]) {
        const imageUrl = htmlMatch[1].replace(/\/62fx62f/, '/360fx360f'); // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Market API: ${imageUrl}`);
        return imageUrl;
      }
    }

    return null;
  } catch (error) {
    console.log(`‚ö†Ô∏è Market API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
    return null;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
function generateImageUrl(marketHashName) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    const parts = marketHashName.split(' | ');
    if (parts.length < 2) return null;

    const weaponName = parts[0].trim();
    const skinNameWithExterior = parts[1].trim();

    // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–∏–Ω–∞
    const skinName = skinNameWithExterior.replace(/\s*\([^)]*\)\s*$/, '').trim();

    // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è –æ—Ä—É–∂–∏—è
    const weaponKey = WEAPON_PATTERNS[weaponName];
    if (!weaponKey) return null;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const skinKey = skinName.toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '_')
      .replace(/-/g, '_');

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
    const possibleIds = [
      `${weaponKey}_${skinKey}`,
      `weapon_${weaponKey}_${skinKey}`,
      `${weaponKey}_${skinKey}_light_large`,
      `${weaponKey}_${skinKey}_medium`
    ];

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL
    for (const baseUrl of STEAM_CDN_BASES) {
      for (const id of possibleIds) {
        const imageUrl = `${baseUrl}${id}/360fx360f.jpg`;
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return imageUrl;
      }
    }

    return null;
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: ${error.message}`);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Inventory API
async function getImageFromInventoryAPI(marketHashName) {
  try {
    const encodedName = encodeURIComponent(marketHashName);
    const inventoryUrl = `https://steamcommunity.com/market/listings/730/${encodedName}`;

    const response = await axios.get(inventoryUrl, {
      timeout: 8000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html'
      }
    });

    if (response.data) {
      // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const imageMatches = response.data.match(/https:\/\/[^"]*economy\/image\/[^"]*\/360fx360f[^"]*/g);

      if (imageMatches && imageMatches.length > 0) {
        const imageUrl = imageMatches[0];
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Inventory API: ${imageUrl}`);
        return imageUrl;
      }
    }

    return null;
  } catch (error) {
    console.log(`‚ö†Ô∏è Inventory API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
    return null;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function validateImageUrl(url) {
  try {
    const response = await axios.head(url, { timeout: 3000 });
    return response.status === 200 && response.headers['content-type']?.startsWith('image/');
  } catch (error) {
    return false;
  }
}

// –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function batchGetImages(marketHashNames, batchSize = 10) {
  console.log(`üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ${marketHashNames.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

  loadImageCache();

  const results = {};

  for (let i = 0; i < marketHashNames.length; i += batchSize) {
    const batch = marketHashNames.slice(i, i + batchSize);
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}/${Math.ceil(marketHashNames.length/batchSize)}`);

    const batchPromises = batch.map(async (name) => {
      const imageUrl = await getItemImageFast(name, true);
      return { name, imageUrl };
    });

    const batchResults = await Promise.allSettled(batchPromises);

    batchResults.forEach((result) => {
      if (result.status === 'fulfilled') {
        const { name, imageUrl } = result.value;
        results[name] = imageUrl;
      }
    });

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + batchSize < marketHashNames.length) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  saveImageCache();

  const successCount = Object.values(results).filter(url => url !== null).length;
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${successCount}/${marketHashNames.length}`);

  return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  getItemImageFast,
  batchGetImages,
  loadImageCache,
  saveImageCache,
  validateImageUrl
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

  const testItems = [
    'AK-47 | Redline (Field-Tested)',
    'M4A4 | Howl (Factory New)',
    'AWP | Dragon Lore (Factory New)'
  ];

  (async () => {
    const results = await batchGetImages(testItems);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(JSON.stringify(results, null, 2));
  })();
}
