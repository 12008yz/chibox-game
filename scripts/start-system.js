#!/usr/bin/env node

/**
 * üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ CHIBOX
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã
 * 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É cron-–∑–∞–¥–∞—á
 * 4. –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ],
});

/**
 * üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
 */
async function checkPrerequisites() {
  logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...');

  const checks = [
    {
      name: 'Node.js',
      check: () => process.version,
      required: true
    },
    {
      name: 'PM2',
      check: () => {
        try {
          execSync('pm2 --version', { stdio: 'pipe' });
          return true;
        } catch {
          return false;
        }
      },
      required: true,
      install: 'npm install -g pm2'
    },
    {
      name: '.env —Ñ–∞–π–ª',
      check: () => fs.existsSync('.env'),
      required: true
    },
    {
      name: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs',
      check: () => {
        const logsDir = path.join(__dirname, '../logs');
        if (!fs.existsSync(logsDir)) {
          fs.mkdirSync(logsDir, { recursive: true });
          return '—Å–æ–∑–¥–∞–Ω–∞';
        }
        return true;
      },
      required: false
    },
    {
      name: 'ecosystem.config.js',
      check: () => fs.existsSync('ecosystem.config.js'),
      required: true
    }
  ];

  let allPassed = true;

  for (const check of checks) {
    try {
      const result = check.check();
      if (result) {
        logger.info(`‚úÖ ${check.name}: ${result === true ? 'OK' : result}`);
      } else {
        if (check.required) {
          logger.error(`‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù${check.install ? ` (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ${check.install})` : ''}`);
          allPassed = false;
        } else {
          logger.warn(`‚ö†Ô∏è ${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)`);
        }
      }
    } catch (error) {
      if (check.required) {
        logger.error(`‚ùå ${check.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
        allPassed = false;
      } else {
        logger.warn(`‚ö†Ô∏è ${check.name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      }
    }
  }

  if (!allPassed) {
    logger.error('üí• –ù–µ –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    process.exit(1);
  }

  logger.info('‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
  return true;
}

/**
 * üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabase() {
  logger.info('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  try {
    const { sequelize } = require('../config/database');
    await sequelize.authenticate();
    logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 */
async function startPM2Processes() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      execSync('pm2 delete all', { stdio: 'pipe' });
      logger.info('üõë –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch {
      // –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    execSync('pm2 start ecosystem.config.js', { stdio: 'inherit' });

    // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const status = execSync('pm2 jlist', { encoding: 'utf8' });
    const processes = JSON.parse(status);

    logger.info('üìä –°—Ç–∞—Ç—É—Å PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:');
    for (const proc of processes) {
      const status = proc.pm2_env.status;
      const emoji = status === 'online' ? '‚úÖ' : '‚ùå';
      logger.info(`  ${emoji} ${proc.name}: ${status}`);
    }

    const onlineCount = processes.filter(p => p.pm2_env.status === 'online').length;
    if (onlineCount === processes.length) {
      logger.info('‚úÖ –í—Å–µ PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      logger.error(`‚ùå –ó–∞–ø—É—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${onlineCount} –∏–∑ ${processes.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
      return false;
    }

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error.message);
    return false;
  }
}

/**
 * üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã cron-–∑–∞–¥–∞—á
 */
async function checkCronTasks() {
  logger.info('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ cron-–∑–∞–¥–∞—á...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª healthcheck —Å–æ–∑–¥–∞–µ—Ç—Å—è
    const healthPath = path.join(__dirname, '../logs/cron-health.json');

    // –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è healthcheck —Ñ–∞–π–ª–∞
    for (let i = 0; i < 30; i++) {
      if (fs.existsSync(healthPath)) {
        const health = JSON.parse(fs.readFileSync(healthPath, 'utf8'));
        logger.info(`‚úÖ Cron-–∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç. –°—Ç–∞—Ç—É—Å: ${health.status}`);
        return true;
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    logger.warn('‚ö†Ô∏è –§–∞–π–ª healthcheck –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞');
    return true;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cron-–∑–∞–¥–∞—á:', error.message);
    return false;
  }
}

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
 */
async function testSubscriptionSystem() {
  logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...');

  try {
    const { generateSubscriptionReport } = require('./subscription-manager');
    const report = await generateSubscriptionReport();

    logger.info('üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:');
    logger.info(`  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${report.activeSubscriptions}`);
    logger.info(`  - –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞: ${report.expiringTomorrow}`);
    logger.info(`  - –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è: ${report.expiringThreeDays}`);

    logger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫:', error.message);
    return false;
  }
}

/**
 * üìã –í—ã–≤–æ–¥–∏–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
function showSystemInfo() {
  logger.info('');
  logger.info('üéâ –°–ò–°–¢–ï–ú–ê CHIBOX –ó–ê–ü–£–©–ï–ù–ê –£–°–ü–ï–®–ù–û!');
  logger.info('');
  logger.info('üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  logger.info('  pm2 status                     - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
  logger.info('  pm2 logs                       - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤');
  logger.info('  pm2 monit                      - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  logger.info('  pm2 restart all                - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
  logger.info('  pm2 stop all                   - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
  logger.info('');
  logger.info('üìÇ –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:');
  logger.info('  logs/cron-tasks.log           - –ª–æ–≥–∏ cron-–∑–∞–¥–∞—á');
  logger.info('  logs/subscription-manager.log - –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫');
  logger.info('  logs/cron-health.json         - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã');
  logger.info('');
  logger.info('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:');
  logger.info('  00:01 UTC - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏');
  logger.info('  02:00 UTC (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
  logger.info('  09:00 UTC - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç');
  logger.info('  –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ Steam');
  logger.info('  –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã');
  logger.info('');
  logger.info('üÜò –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:');
  logger.info('  npm run system:restart');
  logger.info('');
}

/**
 * üé¨ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
 */
async function main() {
  logger.info('');
  logger.info('üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ CHIBOX');
  logger.info('========================');
  logger.info('');

  const steps = [
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', fn: checkPrerequisites },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', fn: checkDatabase },
    { name: '–ó–∞–ø—É—Å–∫ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', fn: startPM2Processes },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ cron-–∑–∞–¥–∞—á', fn: checkCronTasks },
    { name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫', fn: testSubscriptionSystem }
  ];

  for (const step of steps) {
    logger.info(`\n‚ñ∂Ô∏è ${step.name}...`);
    const success = await step.fn();

    if (!success) {
      logger.error(`üí• –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: ${step.name}`);
      logger.error('üõë –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Ä–≤–∞–Ω');
      process.exit(1);
    }
  }

  showSystemInfo();
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  checkPrerequisites,
  checkDatabase,
  startPM2Processes,
  checkCronTasks,
  testSubscriptionSystem
};
