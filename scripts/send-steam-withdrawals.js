#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ withdrawal –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ Steam –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±–æ—Ç–∞
 * –ù–ï –ø–æ–∫—É–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const { Withdrawal, User, UserInventory, Item } = require('../models');
const SteamBot = require('../services/steamBotService');
const steamBotConfig = require('../config/steam_bot.js');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam –±–æ—Ç–∞
const steamBot = new SteamBot(
  steamBotConfig.accountName,
  steamBotConfig.password,
  steamBotConfig.sharedSecret,
  steamBotConfig.identitySecret,
  steamBotConfig.steamApiKey
);

async function processPendingWithdrawals() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal –±–µ–∑ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –±–æ—Ç–∞
    logger.info('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Steam –±–æ—Ç–∞...');
    await steamBot.login();
    logger.info('‚úÖ Steam –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ—Ç–∞...');
    const botProfile = await steamBot.getProfileInfo();
    logger.info(`üìä –ë–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å: ${JSON.stringify(botProfile, null, 2)}`);

    const botRestrictions = await steamBot.getTradeRestrictions();
    logger.info(`üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–æ—Ç–∞: ${JSON.stringify(botRestrictions, null, 2)}`);

    if (botRestrictions.error || !botRestrictions.canTrade) {
      logger.error('‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ—Ç–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é!');
      logger.error('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      logger.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Steam Guard –∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 7 –¥–Ω–µ–π');
      logger.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç trade hold');
      logger.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω Steam');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending –∏ direct_trade_sent withdrawal
    const withdrawals = await Withdrawal.findAll({
      where: {
        status: ['pending', 'direct_trade_sent']
      },
      attributes: ['id', 'user_id', 'status', 'steam_trade_url', 'tracking_data', 'created_at', 'updated_at'],
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'username', 'steam_trade_url']
        },
        {
          model: UserInventory,
          as: 'items',
          include: [
            {
              model: Item,
              as: 'item',
              attributes: ['id', 'name', 'steam_market_hash_name', 'exterior']
            }
          ]
        }
      ]
    });

    if (withdrawals.length === 0) {
      logger.info('üìù –ù–µ—Ç pending withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${withdrawals.length} withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
    logger.info('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞...');
    let botInventory = null;
    try {
      botInventory = await steamBot.getInventory(730, 2, true);
      logger.info(`üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞ ${botInventory.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
    } catch (inventoryError) {
      if (inventoryError.message.includes('duplicate')) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏...');
        botInventory = null; // –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
      } else {
        throw inventoryError;
      }
    }

    let successCount = 0;
    let errorCount = 0;

    for (const withdrawal of withdrawals) {
      try {
        logger.info(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal #${withdrawal.id} (—Å—Ç–∞—Ç—É—Å: ${withdrawal.status})`);

        // –ï—Å–ª–∏ withdrawal —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–∞
        if (withdrawal.status === 'direct_trade_sent') {
          if (withdrawal.tracking_data?.trade_offer_id) {
            logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞ #${withdrawal.tracking_data.trade_offer_id}`);

            try {
              const confirmResult = await steamBot.confirmTradeOffer(withdrawal.tracking_data.trade_offer_id);
              if (confirmResult.success) {
                logger.info(`‚úÖ –¢—Ä–µ–π–¥ #${withdrawal.tracking_data.trade_offer_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`);
                await updateWithdrawalStatus(withdrawal, 'completed', '–¢—Ä–µ–π–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
                successCount++;
              } else {
                logger.info(`‚è≥ –¢—Ä–µ–π–¥ #${withdrawal.tracking_data.trade_offer_id} –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);
              }
            } catch (error) {
              logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–π–¥–∞: ${error.message}`);
            }
          }
          continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É withdrawal
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º trade URL (–±–µ—Ä–µ–º –∏–∑ withdrawal, –∞ –Ω–µ –∏–∑ user)
        const tradeUrl = withdrawal.steam_trade_url || withdrawal.user.steam_trade_url;
        if (!tradeUrl) {
          logger.error(`‚ùå –£ withdrawal #${withdrawal.id} –Ω–µ—Ç trade URL`);
          await updateWithdrawalStatus(withdrawal, 'failed', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trade URL');
          errorCount++;
          continue;
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º Trade URL
        const tradeUrlPattern = /^https:\/\/steamcommunity\.com\/tradeoffer\/new\/\?partner=\d+&token=[a-zA-Z0-9_-]+$/;
        if (!tradeUrlPattern.test(tradeUrl)) {
          logger.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Trade URL –¥–ª—è withdrawal #${withdrawal.id}: ${tradeUrl}`);
          await updateWithdrawalStatus(withdrawal, 'failed', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Trade URL');
          errorCount++;
          continue;
        }

        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
        const itemsToSend = [];
        const missingItems = [];

        for (const userItem of withdrawal.items) {
          const item = userItem.item;
          const marketHashName = item.steam_market_hash_name || item.name;

          let botItem = null;

          // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
          if (botInventory) {
            // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—â–µ–º –≤ –Ω–µ–º
            botItem = botInventory.find(botInvItem => {
              return botInvItem.market_hash_name === marketHashName;
            });
          } else {
            // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—â–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            try {
              logger.info(`üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${marketHashName}`);
              botItem = await steamBot.findItemInInventory(marketHashName, item.exterior);
            } catch (findError) {
              logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ${marketHashName}: ${findError.message}`);
            }
          }

          if (botItem) {
            itemsToSend.push(botItem);
            logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${marketHashName} (${botItem.assetid || botItem.id})`);
          } else {
            missingItems.push(marketHashName);
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${marketHashName}`);
          }
        }

        if (missingItems.length > 0) {
          const message = `–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${missingItems.join(', ')}`;
          logger.error(`‚ùå ${message}`);
          await updateWithdrawalStatus(withdrawal, 'failed', message);
          errorCount++;
          continue;
        }

        if (itemsToSend.length === 0) {
          logger.error(`‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ withdrawal #${withdrawal.id}`);
          await updateWithdrawalStatus(withdrawal, 'failed', '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
          errorCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
        await updateWithdrawalStatus(withdrawal, 'processing', '–û—Ç–ø—Ä–∞–≤–∫–∞ trade offer');

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º Trade URL —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        logger.info(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è Trade URL...`);
        const urlValidation = await steamBot.validateTradeUrl(tradeUrl);

        if (!urlValidation.valid) {
          logger.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Trade URL: ${urlValidation.error}`);
          await updateWithdrawalStatus(withdrawal, 'failed', `Trade URL –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${urlValidation.error}`);
          errorCount++;
          continue;
        }

        const { partnerId, token, partnerSteamId } = urlValidation;
        logger.info(`üîç Partner ID: ${partnerId}, Token: ${token.substring(0, 8)}..., SteamID64: ${partnerSteamId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        logger.info(`üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è...`);
        const profileCheck = await steamBot.checkPartnerProfile(partnerSteamId);

        if (!profileCheck.accessible) {
          logger.warn(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è API: ${profileCheck.error}`);
          logger.info(`üîÑ –ù–æ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–π–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ (–∏–Ω–æ–≥–¥–∞ API –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ)...`);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–π–¥–∞
        } else {
          if (!profileCheck.canTrade) {
            logger.error(`‚ùå –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é`);
            await updateWithdrawalStatus(withdrawal, 'failed', '–£ –≤–∞—à–µ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π –∏ —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞');
            errorCount++;
            continue;
          }

          if (profileCheck.vacBanned || profileCheck.communityBanned) {
            logger.error(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –±–∞–Ω—ã: VAC: ${profileCheck.vacBanned}, Community: ${profileCheck.communityBanned}`);
            await updateWithdrawalStatus(withdrawal, 'failed', '–í–∞—à Steam –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã');
            errorCount++;
            continue;
          }

          logger.info(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${profileCheck.profileName || 'Unknown'}`);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.user.username}...`);
        logger.info(`üì§ Trade URL: ${tradeUrl}`);

        const tradeResult = await steamBot.sendTrade(tradeUrl, itemsToSend.map(item => item.assetid || item.id), botInventory);

        if (tradeResult.success) {
          logger.info(`‚úÖ Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: ${tradeResult.tradeOfferId}`);

          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥
          logger.info(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ #${tradeResult.tradeOfferId}...`);
          await delay(3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã

          try {
            const confirmResult = await steamBot.confirmTradeOffer(tradeResult.tradeOfferId);
            if (confirmResult.success) {
              logger.info(`‚úÖ –¢—Ä–µ–π–¥ #${tradeResult.tradeOfferId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`);
            } else {
              logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${confirmResult.message}`);
            }
          } catch (confirmError) {
            logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${confirmError.message}`);
          }

          await updateWithdrawalStatus(withdrawal, 'direct_trade_sent', `Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, {
            trade_offer_id: tradeResult.tradeOfferId,
            sent_items: itemsToSend.map(item => ({
              assetid: item.assetid,
              market_hash_name: item.market_hash_name
            }))
          });
          successCount++;
        } else {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer: ${tradeResult.message}`);

          // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let userMessage = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${tradeResult.message}`;

          if (tradeResult.eresult === 15 || tradeResult.message.includes('15')) {
            userMessage = '‚ùå Trade URL —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n\n' +
                         'üîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n' +
                         '1. –û—Ç–∫—Ä–æ–π—Ç–µ Steam ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n' +
                         '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"\n' +
                         '3. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é URL –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"\n' +
                         '4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π Trade URL –Ω–∞ —Å–∞–π—Ç\n' +
                         '5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–Ω–æ–≤–∞';
          } else if (tradeResult.eresult === 20 || tradeResult.message.includes('20')) {
            userMessage = '‚ùå –ü—Ä–æ—Ñ–∏–ª—å Steam –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n' +
                         'üîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n' +
                         '1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Steam –ø—É–±–ª–∏—á–Ω—ã–π\n' +
                         '2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ Steam\n' +
                         '3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n' +
                         '4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Trade URL';
          } else if (tradeResult.eresult === 25 || tradeResult.message.includes('25')) {
            userMessage = '‚ùå –£ –≤–∞—à–µ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é.\n\n' +
                         'üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                         '1. Steam Guard –∞–∫—Ç–∏–≤–µ–Ω –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π\n' +
                         '2. –ù–µ–¥–∞–≤–Ω—è—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∏–ª–∏ email\n' +
                         '3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Steam –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç\n' +
                         '4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
          } else if (tradeResult.message.includes('There was an error sending')) {
            userMessage = '‚ùå –û—à–∏–±–∫–∞ Steam API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n' +
                         'üîß –†–µ—à–µ–Ω–∏–µ:\n' +
                         '1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç\n' +
                         '2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Trade URL –≤ Steam\n' +
                         '3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å Steam –ø—É–±–ª–∏—á–Ω—ã–π\n' +
                         '4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–Ω–æ–≤–∞';
          } else if (tradeResult.message.includes('partner')) {
            userMessage = '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Trade URL.\n\n' +
                         'üîß –†–µ—à–µ–Ω–∏–µ:\n' +
                         '1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å Trade URL\n' +
                         '2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Trade URL –≤ Steam\n' +
                         '3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é';
          }

          await updateWithdrawalStatus(withdrawal, 'failed', userMessage);
          errorCount++;
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É withdrawal (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting)
        await delay(10000);

      } catch (error) {
        logger.error(`üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal #${withdrawal.id}:`, error);
        await updateWithdrawalStatus(withdrawal, 'failed', `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        errorCount++;
      }
    }

    logger.info(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);

  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }

  process.exit(0);
}

async function updateWithdrawalStatus(withdrawal, status, message, additionalData = {}) {
  await withdrawal.update({
    status,
    tracking_data: {
      ...withdrawal.tracking_data,
      last_update: new Date().toISOString(),
      message,
      ...additionalData
    }
  });
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  processPendingWithdrawals();
}

module.exports = processPendingWithdrawals;
