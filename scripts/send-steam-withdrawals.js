#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ withdrawal –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ Steam –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±–æ—Ç–∞
 * –ù–ï –ø–æ–∫—É–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
 */

const { Withdrawal, User, UserInventory, Item } = require('../models');
const SteamBot = require('../services/steamBotService');
const steamBotConfig = require('../config/steam_bot.js');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Steam –±–æ—Ç–∞
const steamBot = new SteamBot(
  steamBotConfig.accountName,
  steamBotConfig.password,
  steamBotConfig.sharedSecret,
  steamBotConfig.identitySecret,
  steamBotConfig.steamApiKey
);

async function processPendingWithdrawals() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal –±–µ–∑ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –±–æ—Ç–∞
    logger.info('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Steam –±–æ—Ç–∞...');
    await steamBot.login();
    logger.info('‚úÖ Steam –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending withdrawal
    const withdrawals = await Withdrawal.findAll({
      where: { status: 'pending' },
      attributes: ['id', 'user_id', 'status', 'steam_trade_url', 'tracking_data', 'created_at', 'updated_at'],
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'username', 'steam_trade_url']
        },
        {
          model: UserInventory,
          as: 'items',
          include: [
            {
              model: Item,
              as: 'item',
              attributes: ['id', 'name', 'steam_market_hash_name', 'exterior']
            }
          ]
        }
      ]
    });

    if (withdrawals.length === 0) {
      logger.info('üìù –ù–µ—Ç pending withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${withdrawals.length} withdrawal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
    logger.info('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –±–æ—Ç–∞...');
    const botInventory = await steamBot.getInventory(730, 2, true);
    logger.info(`üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞ ${botInventory.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

    let successCount = 0;
    let errorCount = 0;

    for (const withdrawal of withdrawals) {
      try {
        logger.info(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal #${withdrawal.id}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º trade URL (–±–µ—Ä–µ–º –∏–∑ withdrawal, –∞ –Ω–µ –∏–∑ user)
        const tradeUrl = withdrawal.steam_trade_url || withdrawal.user.steam_trade_url;
        if (!tradeUrl) {
          logger.error(`‚ùå –£ withdrawal #${withdrawal.id} –Ω–µ—Ç trade URL`);
          await updateWithdrawalStatus(withdrawal, 'failed', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trade URL');
          errorCount++;
          continue;
        }

        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
        const itemsToSend = [];
        const missingItems = [];

        for (const userItem of withdrawal.items) {
          const item = userItem.item;
          const marketHashName = item.steam_market_hash_name || item.name;

          // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ—Ç–∞
          const botItem = botInventory.find(botInvItem => {
            return botInvItem.market_hash_name === marketHashName;
          });

          if (botItem) {
            itemsToSend.push(botItem);
            logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${marketHashName} (${botItem.assetid})`);
          } else {
            missingItems.push(marketHashName);
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${marketHashName}`);
          }
        }

        if (missingItems.length > 0) {
          const message = `–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${missingItems.join(', ')}`;
          logger.error(`‚ùå ${message}`);
          await updateWithdrawalStatus(withdrawal, 'failed', message);
          errorCount++;
          continue;
        }

        if (itemsToSend.length === 0) {
          logger.error(`‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ withdrawal #${withdrawal.id}`);
          await updateWithdrawalStatus(withdrawal, 'failed', '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
          errorCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
        await updateWithdrawalStatus(withdrawal, 'processing', '–û—Ç–ø—Ä–∞–≤–∫–∞ trade offer');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade offer
        logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ trade offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.user.username}...`);
        logger.info(`üì§ Trade URL: ${tradeUrl.substring(0, 50)}...`);
        const tradeResult = await steamBot.sendTrade(tradeUrl, itemsToSend.map(item => item.assetid));

        if (tradeResult.success) {
          logger.info(`‚úÖ Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: ${tradeResult.tradeOfferId}`);
          await updateWithdrawalStatus(withdrawal, 'trade_sent', `Trade offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, {
            trade_offer_id: tradeResult.tradeOfferId,
            sent_items: itemsToSend.map(item => ({
              assetid: item.assetid,
              market_hash_name: item.market_hash_name
            }))
          });
          successCount++;
        } else {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trade offer: ${tradeResult.message}`);
          await updateWithdrawalStatus(withdrawal, 'failed', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${tradeResult.message}`);
          errorCount++;
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É withdrawal
        await delay(5000);

      } catch (error) {
        logger.error(`üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal #${withdrawal.id}:`, error);
        await updateWithdrawalStatus(withdrawal, 'failed', `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        errorCount++;
      }
    }

    logger.info(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);

  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }

  process.exit(0);
}

async function updateWithdrawalStatus(withdrawal, status, message, additionalData = {}) {
  await withdrawal.update({
    status,
    tracking_data: {
      ...withdrawal.tracking_data,
      last_update: new Date().toISOString(),
      message,
      ...additionalData
    }
  });
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  processPendingWithdrawals();
}

module.exports = processPendingWithdrawals;
