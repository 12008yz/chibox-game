#!/usr/bin/env node

/**
 * üïí –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê CRON-–ó–ê–î–ê–ß CHIBOX
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (00:01)
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ Steam (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ healthcheck
 */

const cron = require('node-cron');
const processSteamWithdrawals = require('./send-steam-withdrawals');
const {
  decreaseSubscriptionDays,
  validateSubscriptionData,
  generateSubscriptionReport,
  logger
} = require('./subscription-manager');
const winston = require('winston');
const path = require('path');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è cron-–∑–∞–¥–∞—á
const cronLogger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message, ...meta }) => {
      return `${timestamp} [CRON-${level.toUpperCase()}] ${message} ${Object.keys(meta).length ? JSON.stringify(meta) : ''}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({
      filename: path.join(logsDir, 'cron-tasks.log'),
      maxsize: 10 * 1024 * 1024, // 10MB
      maxFiles: 5
    })
  ],
});

cronLogger.info('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã cron-–∑–∞–¥–∞—á...');

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
const taskStats = {
  subscriptionUpdates: { success: 0, errors: 0, lastRun: null },
  validationChecks: { success: 0, errors: 0, lastRun: null },
  withdrawalProcessing: { success: 0, errors: 0, lastRun: null }
};

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
 * –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01 UTC
 */
cron.schedule('1 0 * * *', async () => {
  cronLogger.info('üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...');

  try {
    const startTime = Date.now();
    const result = await decreaseSubscriptionDays();

    taskStats.subscriptionUpdates.success++;
    taskStats.subscriptionUpdates.lastRun = new Date();

    cronLogger.info('‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', {
      duration: Date.now() - startTime,
      processed: result.processed,
      deactivated: result.deactivated,
      warnings: result.warnings
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (result.errors && result.errors.length > 0) {
      cronLogger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', {
        errorCount: result.errors.length,
        errors: result.errors.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
      });
    }

  } catch (error) {
    taskStats.subscriptionUpdates.errors++;
    cronLogger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    // await sendAdminAlert('–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–ø–∏—Å–æ–∫', error.message);
  }
}, {
  timezone: "UTC"
});

/**
 * üîç –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00 UTC
 */
cron.schedule('0 2 * * 0', async () => {
  cronLogger.info('üîç –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫...');

  try {
    const result = await validateSubscriptionData();

    taskStats.validationChecks.success++;
    taskStats.validationChecks.lastRun = new Date();

    cronLogger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      fixedRecords: result.fixed
    });

    if (result.fixed > 0) {
      cronLogger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', {
        count: result.fixed
      });
    }

  } catch (error) {
    taskStats.validationChecks.errors++;
    cronLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
  }
}, {
  timezone: "UTC"
});

/**
 * üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ Steam –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 * –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */
cron.schedule('*/5 * * * *', async () => {
  cronLogger.debug('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ Steam –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');

  try {
    await processSteamWithdrawals();

    taskStats.withdrawalProcessing.success++;
    taskStats.withdrawalProcessing.lastRun = new Date();

    cronLogger.debug('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    taskStats.withdrawalProcessing.errors++;
    cronLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–æ–≤:', error);
  }
});

/**
 * üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–ø–∏—Å–æ–∫
 * –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC (12:00 –ú–°–ö)
 */
cron.schedule('0 9 * * *', async () => {
  cronLogger.info('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º...');

  try {
    const report = await generateSubscriptionReport();

    cronLogger.info('üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', {
      activeSubscriptions: report.activeSubscriptions,
      expiringTomorrow: report.expiringTomorrow,
      expiringThreeDays: report.expiringThreeDays
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportPath = path.join(logsDir, `subscription-report-${new Date().toISOString().split('T')[0]}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

  } catch (error) {
    cronLogger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
  }
}, {
  timezone: "UTC"
});

/**
 * üè• Healthcheck –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
 * –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
 */
cron.schedule('*/30 * * * *', async () => {
  const now = new Date();
  const healthData = {
    timestamp: now.toISOString(),
    uptime: process.uptime(),
    memoryUsage: process.memoryUsage(),
    taskStats: taskStats,
    status: 'healthy'
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  const totalErrors = Object.values(taskStats).reduce((sum, stat) => sum + stat.errors, 0);

  if (totalErrors > 10) {
    healthData.status = 'warning';
    cronLogger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ cron-–∑–∞–¥–∞—á–∞—Ö:', { totalErrors });
  }

  cronLogger.debug('üè• Healthcheck –≤—ã–ø–æ–ª–Ω–µ–Ω:', {
    status: healthData.status,
    uptime: Math.round(healthData.uptime / 60) + 'min',
    memoryMB: Math.round(healthData.memoryUsage.rss / 1024 / 1024)
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º healthcheck –≤ —Ñ–∞–π–ª
  const healthPath = path.join(logsDir, 'cron-health.json');
  fs.writeFileSync(healthPath, JSON.stringify(healthData, null, 2));
});

/**
 * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
 * –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00 UTC
 */
cron.schedule('0 3 * * *', async () => {
  cronLogger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤...');

  try {
    const logFiles = fs.readdirSync(logsDir);
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    let deletedCount = 0;

    for (const file of logFiles) {
      const filePath = path.join(logsDir, file);
      const stats = fs.statSync(filePath);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      if (stats.mtime < thirtyDaysAgo && file.includes('report')) {
        fs.unlinkSync(filePath);
        deletedCount++;
      }
    }

    cronLogger.info(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`);

  } catch (error) {
    cronLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  cronLogger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ cron-–∑–∞–¥–∞—á...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  cronLogger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ cron-–∑–∞–¥–∞—á...');
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  cronLogger.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', {
    reason: reason,
    promise: promise
  });
});

process.on('uncaughtException', (error) => {
  cronLogger.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

cronLogger.info('‚úÖ –í—Å–µ cron-–∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
cronLogger.info('üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á:');
cronLogger.info('  - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:01 UTC');
cronLogger.info('  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 02:00 UTC');
cronLogger.info('  - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
cronLogger.info('  - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00 UTC');
cronLogger.info('  - Healthcheck: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
cronLogger.info('  - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00 UTC');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
module.exports = {
  taskStats,
  cronLogger
};
