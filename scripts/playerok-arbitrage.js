#!/usr/bin/env node

/**
 * PlayerOk –ê—Ä–±–∏—Ç—Ä–∞–∂ –ë–æ—Ç
 *
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç pending withdrawals ‚Üí –ò—â–µ—Ç –Ω–∞ PlayerOk ‚Üí –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã ‚Üí –ü–æ–∫—É–ø–∞–µ—Ç –µ—Å–ª–∏ –≤—ã–≥–æ–¥–Ω–æ
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const { Withdrawal, User, UserInventory, Item } = require('../models');
const PlayerOkBot = require('../services/playerokBotService');
const steamPriceService = require('../services/steamPriceService');
const winston = require('winston');
const { Op } = require('sequelize');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'playerok-arbitrage.log' })
  ],
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  CHECK_INTERVAL: 30000, // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  MIN_MARGIN_PERCENT: 0, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ 0% (–≥–ª–∞–≤–Ω–æ–µ - –Ω–µ –¥–æ—Ä–æ–∂–µ Steam/ChiBox)
  MAX_ATTEMPTS: 3, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞
};

class PlayerOkArbitrageBot {
  constructor() {
    this.playerokBot = new PlayerOkBot();
    this.isRunning = false;
    this.processedWithdrawals = new Set(); // –ß—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ PlayerOk Arbitrage Bot...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PlayerOk –±–æ—Ç–∞
      const isLoggedIn = await this.playerokBot.init();

      if (!isLoggedIn) {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ PlayerOk. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies!');
        process.exit(1);
      }

      this.isRunning = true;
      logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.monitorWithdrawals();

    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
      await this.stop();
      process.exit(1);
    }
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ pending withdrawals
   */
  async monitorWithdrawals() {
    while (this.isRunning) {
      try {
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ pending withdrawals...');

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending –∑–∞—è–≤–∫–∏
        const pendingWithdrawals = await Withdrawal.findAll({
          where: {
            status: 'pending'
          },
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'username', 'steam_trade_url']
            },
            {
              model: UserInventory,
              as: 'items',
              include: [
                {
                  model: Item,
                  as: 'item',
                  attributes: ['id', 'name', 'price', 'steam_market_hash_name', 'image_url']
                }
              ]
            }
          ],
          order: [['request_date', 'ASC']],
          limit: 10 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∑–∞ —Ä–∞–∑
        });

        if (pendingWithdrawals.length === 0) {
          logger.info('‚ÑπÔ∏è –ù–µ—Ç pending withdrawals –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        } else {
          logger.info(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${pendingWithdrawals.length} –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É`);

          for (const withdrawal of pendingWithdrawals) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if (this.processedWithdrawals.has(withdrawal.id)) {
              continue;
            }

            await this.processWithdrawal(withdrawal);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            this.processedWithdrawals.add(withdrawal.id);

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞—è–≤–æ–∫
            await this.sleep(5000);
          }
        }

        // –û—á–∏—â–∞–µ–º Set –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
        if (this.processedWithdrawals.size > 1000) {
          this.processedWithdrawals.clear();
        }

        // –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await this.sleep(CONFIG.CHECK_INTERVAL);

      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await this.sleep(10000); // –ñ–¥—ë–º 10 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
   */
  async processWithdrawal(withdrawal) {
    try {
      logger.info(`\n${'='.repeat(60)}`);
      logger.info(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ withdrawal ID: ${withdrawal.id}`);
      logger.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.user.username}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing"
      await withdrawal.update({
        status: 'processing',
        processing_date: new Date()
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞—è–≤–∫–µ
      for (const inventoryItem of withdrawal.items) {
        const item = inventoryItem.item;

        if (!item) {
          logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è inventory item ${inventoryItem.id}`);
          continue;
        }

        logger.info(`\nüéÆ –ü—Ä–µ–¥–º–µ—Ç: ${item.name}`);
        logger.info(`üí∞ –¶–µ–Ω–∞ ChiBox: ${item.price}‚ÇΩ`);

        // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É Steam
        const steamPrice = await this.getSteamPrice(item);
        logger.info(`üíµ –¶–µ–Ω–∞ Steam: ${steamPrice}‚ÇΩ`);

        // 2. –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ PlayerOk
        const playerokOffers = await this.playerokBot.searchItem(
          item.name,
          Math.max(steamPrice, item.price) // –ò—â–µ–º –Ω–µ –¥–æ—Ä–æ–∂–µ –º–∞–∫—Å–∏–º—É–º–∞ –∏–∑ Steam/ChiBox
        );

        if (playerokOffers.length === 0) {
          logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ PlayerOk –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π`);

          // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
          await this.findAlternative(withdrawal, item, steamPrice);
          continue;
        }

        // 3. –ë–µ—Ä—ë–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const bestOffer = playerokOffers[0];
        logger.info(`üèÜ –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${bestOffer.price}‚ÇΩ –æ—Ç ${bestOffer.seller}`);

        // 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
        const comparison = this.playerokBot.comparePrices(
          bestOffer.price,
          steamPrice,
          item.price
        );

        logger.info(`üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:`);
        logger.info(`   PlayerOk (—Å –∫–æ–º–∏—Å—Å–∏–µ–π): ${comparison.total_cost.toFixed(2)}‚ÇΩ`);
        logger.info(`   –†–µ—à–µ–Ω–∏–µ: ${comparison.decision}`);
        logger.info(`   –ü—Ä–∏—á–∏–Ω–∞: ${comparison.reason}`);

        // 5. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        if (comparison.decision === 'buy') {
          logger.info(`‚úÖ –ü–û–ö–£–ü–ê–ï–ú! Profit: ${comparison.profit_vs_chibox.toFixed(2)}‚ÇΩ`);

          // –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
          const purchaseResult = await this.playerokBot.purchaseItem(
            bestOffer.url,
            withdrawal.steam_trade_url || withdrawal.user.steam_trade_url
          );

          if (purchaseResult.success) {
            logger.info(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ó–∞–∫–∞–∑: ${purchaseResult.order_number}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Trade URL –≤ —á–∞—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
            if (purchaseResult.order_number) {
              await this.playerokBot.sendTradeUrlToSeller(
                purchaseResult.order_number,
                withdrawal.steam_trade_url || withdrawal.user.steam_trade_url
              );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º withdrawal
            await withdrawal.update({
              status: 'processing', // –ñ–¥—ë–º –ø–æ–∫–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç—Ä–µ–π–¥
              admin_notes: `PlayerOk –∑–∞–∫–∞–∑: ${purchaseResult.order_number}. –¶–µ–Ω–∞: ${bestOffer.price}‚ÇΩ. –ü—Ä–∏–±—ã–ª—å: ${comparison.profit_vs_chibox.toFixed(2)}‚ÇΩ`
            });

            logger.info(`‚úÖ Withdrawal –æ–±–Ω–æ–≤–ª—ë–Ω, –æ–∂–∏–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–π–¥–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞`);

          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${purchaseResult.error}`);
            await withdrawal.update({
              status: 'failed',
              failed_reason: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ PlayerOk: ${purchaseResult.error}`
            });
          }

        } else {
          logger.warn(`‚ùå –ù–ï –ü–û–ö–£–ü–ê–ï–ú: ${comparison.reason}`);

          // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
          await this.findAlternative(withdrawal, item, steamPrice);
        }
      }

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ withdrawal ${withdrawal.id}:`, error);

      await withdrawal.update({
        status: 'failed',
        failed_reason: `–û—à–∏–±–∫–∞: ${error.message}`,
        processing_attempts: (withdrawal.processing_attempts || 0) + 1
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã Steam
   */
  async getSteamPrice(item) {
    try {
      if (!item.steam_market_hash_name) {
        logger.warn(`‚ö†Ô∏è –ù–µ—Ç steam_market_hash_name –¥–ª—è ${item.name}`);
        return item.price; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É ChiBox –∫–∞–∫ fallback
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã Steam
      const priceData = await steamPriceService.getItemPrice(item.steam_market_hash_name);

      if (priceData && priceData.median_price) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const priceInRub = this.convertToRubles(priceData.median_price);
        return priceInRub;
      }

      return item.price;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã Steam –¥–ª—è ${item.name}:`, error);
      return item.price;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã –≤ —Ä—É–±–ª–∏
   */
  convertToRubles(priceString) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const numericValue = parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.'));

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 90‚ÇΩ/$)
      if (priceString.includes('$')) {
        return numericValue * 90;
      }

      return numericValue;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —Ä–∞–≤–Ω–æ–π –∏–ª–∏ –º–µ–Ω—å—à–µ–π —Ü–µ–Ω–µ
   */
  async findAlternative(withdrawal, originalItem, maxPrice) {
    try {
      logger.info(`üîÑ –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è ${originalItem.name}...`);

      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Ç–æ–π –∂–µ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const alternatives = await Item.findAll({
        where: {
          price: {
            [Op.lte]: maxPrice,
            [Op.gte]: maxPrice * 0.8 // –í –ø—Ä–µ–¥–µ–ª–∞—Ö 80-100% –æ—Ç —Ü–µ–Ω—ã
          },
          rarity: originalItem.rarity,
          id: {
            [Op.ne]: originalItem.id
          }
        },
        order: [['price', 'DESC']],
        limit: 5
      });

      if (alternatives.length > 0) {
        logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${alternatives.length} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:`);

        alternatives.forEach((alt, idx) => {
          logger.info(`   ${idx + 1}. ${alt.name} - ${alt.price}‚ÇΩ`);
        });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await withdrawal.update({
          status: 'waiting_confirmation',
          admin_notes: `–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ${alternatives.map(a => a.name).join(', ')}`
        });

      } else {
        logger.warn(`‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);

        await withdrawal.update({
          status: 'failed',
          failed_reason: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ PlayerOk –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
        });
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    this.isRunning = false;
    await this.playerokBot.close();
    logger.info('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new PlayerOkArbitrageBot();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  logger.info('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  await bot.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  await bot.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
bot.start().catch(async (error) => {
  logger.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  await bot.stop();
  process.exit(1);
});
