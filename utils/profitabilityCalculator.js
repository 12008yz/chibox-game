const { logger } = require('./logger');

class ProfitabilityCalculator {
  constructor(targetProfitMargin = 0.2) {
    this.targetProfitMargin = targetProfitMargin; // 20% –ø—Ä–∏–±—ã–ª—å —Å–∞–π—Ç–∞
    this.userReturnRate = 1 - targetProfitMargin; // 80% –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –∫–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
   */
  calculateOptimalWeights(itemsByCategory, casePrice) {
    const targetExpectedValue = casePrice * this.userReturnRate;

    logger.info(`–†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ –¥–ª—è –∫–µ–π—Å–∞ ‚ÇΩ${casePrice}:`);
    logger.info(`–¶–µ–ª–µ–≤–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${targetExpectedValue.toFixed(2)}`);

    // –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ (–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    const baseWeights = {
      consumer: 600,    // 60%
      industrial: 250,  // 25%
      milspec: 100,     // 10%
      restricted: 35,   // 3.5%
      classified: 12,   // 1.2%
      covert: 2.5,      // 0.25%
      contraband: 0.4,  // 0.04%
      exotic: 0.1       // 0.01%
    };

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const avgPrices = this.calculateAveragePrices(itemsByCategory);

    // –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
    const optimizedWeights = this.optimizeWeights(baseWeights, avgPrices, targetExpectedValue);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const actualEV = this.calculateExpectedValue(optimizedWeights, avgPrices);
    const actualProfit = casePrice - actualEV;
    const actualProfitMargin = actualProfit / casePrice;

    logger.info(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`);
    logger.info(`- –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ${actualEV.toFixed(2)}`);
    logger.info(`- –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${actualProfit.toFixed(2)}`);
    logger.info(`- –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${(actualProfitMargin * 100).toFixed(1)}%`);

    return {
      weights: optimizedWeights,
      expectedValue: actualEV,
      profitMargin: actualProfitMargin,
      profit: actualProfit,
      isOptimal: Math.abs(actualProfitMargin - this.targetProfitMargin) < 0.02
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  calculateAveragePrices(itemsByCategory) {
    const avgPrices = {};

    for (const [category, items] of Object.entries(itemsByCategory)) {
      if (items.length === 0) {
        avgPrices[category] = 0;
        continue;
      }

      const validPrices = items
        .map(item => item.price_rub || 0)
        .filter(price => price > 0);

      if (validPrices.length === 0) {
        avgPrices[category] = this.getFallbackPrice(category);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        avgPrices[category] = this.calculateMedian(validPrices);
      }

      logger.info(`${category}: ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ‚ÇΩ${avgPrices[category].toFixed(2)}`);
    }

    return avgPrices;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É
   */
  calculateMedian(prices) {
    const sorted = prices.sort((a, b) => a - b);
    const mid = Math.floor(sorted.length / 2);

    if (sorted.length % 2 === 0) {
      return (sorted[mid - 1] + sorted[mid]) / 2;
    } else {
      return sorted[mid];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å fallback —Ü–µ–Ω—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getFallbackPrice(category) {
    const fallbackPrices = {
      consumer: 8,
      industrial: 20,
      milspec: 90,
      restricted: 500,
      classified: 1500,
      covert: 10000,
      contraband: 30000,
      exotic: 100000
    };

    return fallbackPrices[category] || 10;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –º–µ—Ç–æ–¥–æ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞
   */
  optimizeWeights(baseWeights, avgPrices, targetEV) {
    let weights = { ...baseWeights };
    const learningRate = 0.1;
    const maxIterations = 100;
    const tolerance = 1; // ‚ÇΩ1 —Ç–æ—á–Ω–æ—Å—Ç—å

    for (let i = 0; i < maxIterations; i++) {
      const currentEV = this.calculateExpectedValue(weights, avgPrices);
      const error = currentEV - targetEV;

      if (Math.abs(error) < tolerance) {
        logger.info(`–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${i + 1} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
        break;
      }

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∫–ª–∞–¥—É –≤ –æ—à–∏–±–∫—É
      const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);

      for (const [category, price] of Object.entries(avgPrices)) {
        if (weights[category] && price > 0) {
          const contribution = (weights[category] / totalWeight) * price;
          const adjustment = (error / currentEV) * contribution * learningRate;

          // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å –µ—Å–ª–∏ EV —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∏–∑–∫–∞—è
          weights[category] = Math.max(0.01, weights[category] - adjustment);
        }
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
      weights = this.normalizeWeights(weights);
    }

    return weights;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
   */
  normalizeWeights(weights) {
    const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);
    const normalized = {};

    for (const [category, weight] of Object.entries(weights)) {
      normalized[category] = Math.round((weight / totalWeight * 1000) * 100) / 100;
    }

    return normalized;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
   */
  calculateExpectedValue(weights, avgPrices) {
    const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);
    let expectedValue = 0;

    for (const [category, weight] of Object.entries(weights)) {
      const probability = weight / totalWeight;
      const price = avgPrices[category] || 0;
      expectedValue += probability * price;
    }

    return expectedValue;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ–π—Å–∞
   */
  validateCaseProfitability(caseConfig, itemsByCategory) {
    const avgPrices = this.calculateAveragePrices(itemsByCategory);
    const actualEV = this.calculateExpectedValue(caseConfig.drop_weights, avgPrices);
    const actualProfit = caseConfig.price - actualEV;
    const actualProfitMargin = actualProfit / caseConfig.price;

    const status = this.getProfitabilityStatus(actualProfitMargin);

    return {
      caseName: caseConfig.name,
      casePrice: caseConfig.price,
      expectedValue: actualEV,
      profit: actualProfit,
      profitMargin: actualProfitMargin,
      targetMargin: this.targetProfitMargin,
      status: status,
      recommendation: this.getRecommendation(actualProfitMargin),
      breakdown: this.calculateCategoryBreakdown(caseConfig.drop_weights, avgPrices)
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getProfitabilityStatus(actualMargin) {
    const target = this.targetProfitMargin;
    const tolerance = 0.02; // ¬±2%

    if (Math.abs(actualMargin - target) <= tolerance) {
      return '‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–û';
    } else if (actualMargin >= target - 0.05 && actualMargin <= target + 0.05) {
      return '‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–û';
    } else if (actualMargin < target - 0.05) {
      return '‚ùå –£–ë–´–¢–û–ß–ù–û';
    } else {
      return 'üìà –°–õ–ò–®–ö–û–ú –ü–†–ò–ë–´–õ–¨–ù–û';
    }
  }

  /**
   * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ
   */
  getRecommendation(actualMargin) {
    const target = this.targetProfitMargin;
    const diff = actualMargin - target;

    if (Math.abs(diff) <= 0.02) {
      return '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ';
    } else if (diff < -0.05) {
      return '–£–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Å–∞ –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—É –∫–µ–π—Å–∞';
    } else if (diff > 0.05) {
      return '–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å–∞ –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ü–µ–Ω—É –∫–µ–π—Å–∞';
    } else {
      return '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤';
    }
  }

  /**
   * –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  calculateCategoryBreakdown(weights, avgPrices) {
    const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);
    const breakdown = [];

    for (const [category, weight] of Object.entries(weights)) {
      const probability = weight / totalWeight;
      const price = avgPrices[category] || 0;
      const contribution = probability * price;

      breakdown.push({
        category,
        weight,
        probability: probability * 100, // –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        avgPrice: price,
        contribution
      });
    }

    return breakdown.sort((a, b) => b.contribution - a.contribution);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤
   */
  async autoAdjustAllCases(caseConfigs, itemsByCategory) {
    const results = [];

    for (const caseConfig of caseConfigs) {
      if (!caseConfig.price) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã

      logger.info(`\n–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–µ–π—Å–∞: ${caseConfig.name}`);

      const optimization = this.calculateOptimalWeights(
        itemsByCategory,
        caseConfig.price
      );

      results.push({
        caseConfig,
        optimization,
        oldWeights: { ...caseConfig.drop_weights },
        newWeights: optimization.weights
      });
    }

    return results;
  }
}

module.exports = ProfitabilityCalculator;
