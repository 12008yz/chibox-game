const { TicTacToeGame, User, CaseTemplate, UserInventory } = require('../../models');
const { Op } = require('sequelize');
const ticTacToeService = require('../../services/ticTacToeService');
const { logger } = require('../../utils/logger');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
const createGame = async (req, res) => {
  try {
    const userId = req.user.id;
    logger.info(`–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞
    const existingGame = await TicTacToeGame.findOne({
      where: {
        user_id: userId,
        result: 'ongoing'
      }
    });

    logger.info(`–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–≥—Ä–∞: ${existingGame ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);

    if (existingGame && existingGame.attempts_left > 0) {
      logger.info(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É`);
      return res.json({
        success: true,
        game: existingGame,
        message: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recentGame = await TicTacToeGame.findOne({
      where: {
        user_id: userId
      },
      order: [['created_at', 'DESC']]
    });

    logger.info(`–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: ${recentGame ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
    if (recentGame) {
      logger.info(`–ü–æ–ø—ã—Ç–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ: ${recentGame.attempts_left}, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${recentGame.created_at}`);
    }

    let attemptsLeft = 20;
    if (recentGame && recentGame.attempts_left <= 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      logger.info(`–ü—Ä–æ–≤–µ—Ä—è–µ–º 24 —á–∞—Å–∞: –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞ ${recentGame.created_at}, 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ ${twentyFourHoursAgo}`);

      if (recentGame.created_at > twentyFourHoursAgo) {
        logger.info(`–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É`);
        return res.status(400).json({
          success: false,
          error: '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!'
        });
      }
      attemptsLeft = 20; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
      logger.info(`–°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞`);
    } else if (recentGame) {
      attemptsLeft = recentGame.attempts_left;
      logger.info(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: ${attemptsLeft}`);
    }

    logger.info(`–ü–æ–ø—ã—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã: ${attemptsLeft}`);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    logger.info(`–°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã`);
    const gameState = ticTacToeService.createNewGame();
    logger.info(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω–æ:`, gameState);

    // –ï—Å–ª–∏ –±–æ—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥
    if (gameState.botGoesFirst) {
      logger.info(`–ë–æ—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥`);
      const updatedGameState = ticTacToeService.makeBotFirstMove(gameState);
      gameState.board = updatedGameState.board;
      gameState.currentPlayer = updatedGameState.currentPlayer;
      logger.info(`–•–æ–¥ –±–æ—Ç–∞ —Å–¥–µ–ª–∞–Ω, –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, gameState);
    }

    logger.info(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
    const newGame = await TicTacToeGame.create({
      user_id: userId,
      game_state: gameState,
      attempts_left: attemptsLeft,
      bot_goes_first: gameState.botGoesFirst
    });

    logger.info(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, ID –∏–≥—Ä—ã: ${newGame.id}`);

    logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É`);
    res.json({
      success: true,
      game: newGame
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
const getCurrentGame = async (req, res) => {
  try {
    const userId = req.user.id;

    // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    const game = await TicTacToeGame.findOne({
      where: {
        user_id: userId,
        result: 'ongoing'
      },
      order: [['created_at', 'DESC']]
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å (–æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏)
    const recentGame = await TicTacToeGame.findOne({
      where: {
        user_id: userId
      },
      order: [['created_at', 'DESC']]
    });

    let canPlay = true;
    if (recentGame && recentGame.attempts_left <= 0) {
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      canPlay = recentGame.created_at <= twentyFourHoursAgo;
    }

    res.json({
      success: true,
      game,
      canPlay
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
const makeMove = async (req, res) => {
  try {
    const userId = req.user.id;
    const { position } = req.body;

    if (position < 0 || position > 8) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è'
      });
    }

    // –ù–∞–π–¥–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    const game = await TicTacToeGame.findOne({
      where: {
        user_id: userId,
        result: 'ongoing'
      }
    });

    if (!game) {
      return res.status(400).json({
        success: false,
        error: '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –î–µ–ª–∞–µ–º —Ö–æ–¥
    const newGameState = ticTacToeService.makePlayerMove(game.game_state, position);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    let result = 'ongoing';
    let rewardGiven = false;

    if (newGameState.status === 'finished') {
      if (newGameState.winner === 'player') {
        result = 'win';
        logger.info(`–ò–≥—Ä–æ–∫ ${userId} –≤—ã–∏–≥—Ä–∞–ª! –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å...`);
        // –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å
        rewardGiven = await giveReward(userId);
        logger.info(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–µ–π—Å–∞: ${rewardGiven}`);
      } else if (newGameState.winner === 'bot') {
        result = 'lose';
        logger.info(`–ò–≥—Ä–æ–∫ ${userId} –ø—Ä–æ–∏–≥—Ä–∞–ª. –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏.`);
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        game.attempts_left = Math.max(0, game.attempts_left - 1);
      } else {
        result = 'draw';
        logger.info(`–ù–∏—á—å—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${userId}. –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏.`);
        // –ü—Ä–∏ –Ω–∏—á—å–µ–π —Ç–æ–∂–µ —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        game.attempts_left = Math.max(0, game.attempts_left - 1);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await game.update({
      game_state: newGameState,
      result,
      reward_given: rewardGiven,
      attempts_left: game.attempts_left
    });

    let message = '';
    if (result === 'win') {
      message = rewardGiven ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å!' : '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, –Ω–æ –∫–µ–π—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ.';
    } else if (result === 'lose') {
      message = `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${game.attempts_left}`;
    } else if (result === 'draw') {
      message = `–ù–∏—á—å—è! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${game.attempts_left}`;
    }

    res.json({
      success: true,
      game: {
        ...game.toJSON(),
        game_state: newGameState,
        result,
        reward_given: rewardGiven
      },
      message
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ —Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã (–±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–µ–π—Å–∞)
const giveReward = async (userId) => {
  try {
    logger.info(`üéØ [REWARD] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    const oneMinuteAgo = new Date(Date.now() - 1 * 60 * 1000);
    logger.info(`üéØ [REWARD] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å ${oneMinuteAgo} –¥–æ —Å–µ–π—á–∞—Å`);

    const existingReward = await TicTacToeGame.findOne({
      where: {
        user_id: userId,
        result: 'win',
        reward_given: true,
        updated_at: {
          [Op.gte]: oneMinuteAgo
        }
      },
      order: [['updated_at', 'DESC']]
    });

    logger.info(`üéØ [REWARD] –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É: ${existingReward ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
    if (existingReward) {
      logger.info(`üéØ [REWARD] –î–µ—Ç–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã:`, {
        id: existingReward.id,
        updated_at: existingReward.updated_at,
        reward_given: existingReward.reward_given
      });
    }

    if (existingReward) {
      logger.info(`üéØ [REWARD] ‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ: ${existingReward.updated_at}`);
      return false; // –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ
    }

    // –ù–∞–π–¥–µ–º –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å
    logger.info(`üéØ [REWARD] –ò—â–µ–º —à–∞–±–ª–æ–Ω "–ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);
    const bonusCaseTemplate = await CaseTemplate.findOne({
      where: {
        name: '–ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å',
        is_active: true
      }
    });

    logger.info(`üéØ [REWARD] –ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å —à–∞–±–ª–æ–Ω: ${bonusCaseTemplate ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    if (bonusCaseTemplate) {
      logger.info(`üéØ [REWARD] –î–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞:`, {
        id: bonusCaseTemplate.id,
        name: bonusCaseTemplate.name,
        is_active: bonusCaseTemplate.is_active
      });
    }

    if (!bonusCaseTemplate) {
      logger.error('üéØ [REWARD] ‚ùå –ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    logger.info(`üéØ [REWARD] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    const newCase = await UserInventory.create({
      user_id: userId,
      item_id: null, // –î–ª—è –∫–µ–π—Å–æ–≤ item_id –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      item_type: 'case',
      case_template_id: bonusCaseTemplate.id,
      source: 'bonus',
      status: 'inventory',
      acquisition_date: new Date(),
      expires_at: bonusCaseTemplate.availability_end || null
    });

    logger.info(`üéØ [REWARD] ‚úÖ –í—ã–¥–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ –ø–æ–±–µ–¥—É –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. ID –∫–µ–π—Å–∞: ${newCase.id}`);
    logger.info(`üéØ [REWARD] –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞:`, {
      id: newCase.id,
      user_id: newCase.user_id,
      case_template_id: newCase.case_template_id,
      status: newCase.status,
      created_at: newCase.created_at
    });

    return true;

  } catch (error) {
    logger.error('üéØ [REWARD] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã:', error);
    logger.error('üéØ [REWARD] Stack trace:', error.stack);
    return false;
  }
};

module.exports = {
  createGame,
  getCurrentGame,
  makeMove
};
