const db = require('../../models');
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
  ],
});

async function resetBonusCooldown(req, res) {
  try {
    logger.info('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞ –±–æ–Ω—É—Å–∞ –ø–æ–ª—É—á–µ–Ω');

    if (!req.user || !req.user.id) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    const userId = req.user.id;
    logger.info(`üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);

    const user = await db.User.findByPk(userId);

    if (!user) {
      logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const previousTime = user.next_bonus_available_time;
    logger.info(`üìÖ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–Ω—É—Å–∞: ${previousTime}`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    user.next_bonus_available_time = null;
    await user.save();

    logger.info(`‚úÖ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    return res.json({
      message: '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user_id: userId,
      previous_next_bonus_time: previousTime,
      current_next_bonus_time: null
    });
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫—É–ª–¥–∞—É–Ω–∞ –±–æ–Ω—É—Å–∞:', error);
    return res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
}

module.exports = {
  resetBonusCooldown
};
