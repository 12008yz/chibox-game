const db = require('../models');
const { Op } = require('sequelize');
const { updateUserAchievementProgress, updateInventoryRelatedAchievements } = require('../services/achievementService');
const { updateUserBonuses } = require('../utils/userBonusCalculator');

async function recalculateUserAchievements(userId = null) {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

    let users;
    if (userId) {
      users = await db.User.findAll({ where: { id: userId } });
      console.log(`üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } else {
      users = await db.User.findAll();
      console.log(`üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    for (const user of users) {
      console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (${user.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'})`);

      try {
        // 1. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–æ–≤–∏—á–æ–∫" - –∫–µ–π—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã
        const totalCasesOpened = user.total_cases_opened || 0;
        if (totalCasesOpened > 0) {
          await updateUserAchievementProgress(user.id, 'cases_opened', totalCasesOpened);
          console.log(`  ‚úÖ cases_opened: ${totalCasesOpened}`);
        }

        // 2. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–≠–∫—Å–ø–µ—Ä—Ç –∏ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä)
        await updateInventoryRelatedAchievements(user.id);
        console.log(`  ‚úÖ inventory achievements updated`);

        // 3. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        const rareItems = await db.UserInventory.count({
          where: {
            user_id: user.id,
            item_type: 'item',
            status: 'inventory'
          },
          include: [{
            model: db.Item,
            as: 'item',
            where: {
              rarity: ['restricted', 'classified', 'covert', 'contraband']
            }
          }]
        });

        if (rareItems > 0) {
          await updateUserAchievementProgress(user.id, 'rare_items_found', rareItems);
          console.log(`  ‚úÖ rare_items_found: ${rareItems}`);
        }

        // 4. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø—Ä–µ–¥–º–µ—Ç—ã (–æ—Ç 100 —Ä—É–±)
        const premiumItems = await db.UserInventory.count({
          where: {
            user_id: user.id,
            item_type: 'item',
            status: 'inventory'
          },
          include: [{
            model: db.Item,
            as: 'item',
            where: {
              price: { [Op.gte]: 100 }
            }
          }]
        });

        if (premiumItems > 0) {
          await updateUserAchievementProgress(user.id, 'premium_items_found', premiumItems);
          console.log(`  ‚úÖ premium_items_found: ${premiumItems}`);
        }

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        if (user.subscription_tier && user.subscription_tier > 0) {
          await updateUserAchievementProgress(user.id, 'subscription_purchased', 1);
          console.log(`  ‚úÖ subscription_purchased: 1`);
        }

        // 6. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUserBonuses(user.id);
        console.log(`  ‚úÖ bonuses recalculated`);

        console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);

      } catch (userError) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, userError);
      }
    }

    console.log('\nüéâ –ü–µ—Ä–µ—Å—á–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const userId = process.argv[2]; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

  recalculateUserAchievements(userId)
    .then(() => {
      console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = {
  recalculateUserAchievements
};
