const { User, BonusMiniGameHistory } = require('../../models');
const { logger } = require('../../utils/logger');

const playRoulette = async (req, res) => {
  try {
    const userId = req.user.id;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É
    const now = new Date();
    const nextBonusTime = user.next_bonus_time ? new Date(user.next_bonus_time) : null;

    if (nextBonusTime && now < nextBonusTime) {
      const timeLeft = Math.ceil((nextBonusTime - now) / 1000);
      return res.status(400).json({
        success: false,
        message: '–†—É–ª–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        time_until_next_seconds: timeLeft
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ (9 –ø–æ–∑–∏—Ü–∏–π, 2 —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏)
    const rouletteItems = [
      { index: 0, type: 'empty', prize_value: 0, weight: 7 },
      { index: 1, type: 'sub_1_day', prize_value: 1, weight: 2 }, // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
      { index: 2, type: 'empty', prize_value: 0, weight: 7 },
      { index: 3, type: 'empty', prize_value: 0, weight: 7 },
      { index: 4, type: 'sub_3_days', prize_value: 3, weight: 1 }, // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
      { index: 5, type: 'empty', prize_value: 0, weight: 7 },
      { index: 6, type: 'empty', prize_value: 0, weight: 7 },
      { index: 7, type: 'empty', prize_value: 0, weight: 7 },
      { index: 8, type: 'empty', prize_value: 0, weight: 7 }
    ];

    // üé∞ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –†–£–õ–ï–¢–ö–ò (–∫–∞–∫ –≤ wheelofnames.com):
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (—á–µ—Å—Ç–Ω–æ)
    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∞
    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞ —á–µ—Ä–µ–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É

    const sectorAngle = 360 / rouletteItems.length; // 40 –≥—Ä–∞–¥—É—Å–æ–≤ –Ω–∞ —Å–µ–∫—Ç–æ—Ä

    // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    const weightedSectors = [];
    for (let i = 0; i < rouletteItems.length; i++) {
      const weight = rouletteItems[i].weight;
      for (let j = 0; j < weight; j++) {
        weightedSectors.push(i);
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—á–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    const winnerIndex = weightedSectors[Math.floor(Math.random() * weightedSectors.length)];

    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –£–ì–õ–û–í
    // –í–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ —Å–µ–∫—Ç–æ—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã —Ç–∞–∫:
    // –°–µ–∫—Ç–æ—Ä 0: —Ü–µ–Ω—Ç—Ä –Ω–∞ 0¬∞ (—Å–≤–µ—Ä—Ö—É)
    // –°–µ–∫—Ç–æ—Ä 1: —Ü–µ–Ω—Ç—Ä –Ω–∞ 40¬∞ (–ø–æ —á–∞—Å–æ–≤–æ–π)
    // –°–µ–∫—Ç–æ—Ä 2: —Ü–µ–Ω—Ç—Ä –Ω–∞ 80¬∞, –∏ —Ç.–¥.

    const winnerSectorCenter = winnerIndex * sectorAngle;

    // –°—Ç—Ä–µ–ª–æ—á–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 0¬∞ (–≤–≤–µ—Ä—Ö)
    // –ß—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–ø–∞–ª –ø–æ–¥ —Å—Ç—Ä–µ–ª–æ—á–∫—É,
    // –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–µ—Å–æ –ü–†–û–¢–ò–í —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ —É–≥–æ–ª —Ü–µ–Ω—Ç—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞
    // CSS rotate: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —É–≥–æ–ª = –ø–æ —á–∞—Å–æ–≤–æ–π, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π
    let targetRotation = -winnerSectorCenter;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω [0, 360)
    if (targetRotation < 0) {
      targetRotation += 360;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const maxOffset = sectorAngle * 0.3; // 30% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞
    const randomOffset = (Math.random() - 0.5) * maxOffset;

    // –î–æ–±–∞–≤–ª—è–µ–º 5-8 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏
    const fullRotations = (5 + Math.random() * 3) * 360;

    // –ò—Ç–æ–≥–æ–≤—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
    const finalAngle = fullRotations + targetRotation + randomOffset;

    const winnerItem = rouletteItems[winnerIndex];
    let message = '';
    let prizeValue = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    if (winnerItem.type === 'sub_1_day') {
      user.subscription_days_left = (user.subscription_days_left || 0) + 1;
      message = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!';
      prizeValue = 1;
    } else if (winnerItem.type === 'sub_3_days') {
      user.subscription_days_left = (user.subscription_days_left || 0) + 3;
      message = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏!';
      prizeValue = 3;
    } else {
      message = '–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!';
      prizeValue = 0;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—É–ª–µ—Ç–∫–∏ (24 —á–∞—Å–∞)
    const nextTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    user.next_bonus_time = nextTime;

    await user.save();

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await BonusMiniGameHistory.create({
      user_id: userId,
      game_grid: JSON.stringify(rouletteItems),
      chosen_cells: JSON.stringify([winnerIndex]),
      won: winnerItem.type !== 'empty',
      prize_type: winnerItem.type,
      prize_value: prizeValue.toString(),
      played_at: now
    });

    logger.info(`üé∞ User ${userId} played roulette (FIXED ALGORITHM):`, {
      winnerIndex,
      winnerItem: {
        type: winnerItem.type,
        prizeValue: winnerItem.prize_value,
        weight: winnerItem.weight
      },
      calculations: {
        sectorAngle: sectorAngle.toFixed(1),
        winnerSectorCenter: winnerSectorCenter.toFixed(1),
        targetRotation: targetRotation.toFixed(1),
        randomOffset: randomOffset.toFixed(1),
        maxOffset: maxOffset.toFixed(1),
        fullRotations: fullRotations.toFixed(1),
        finalAngle: finalAngle.toFixed(1)
      },
      result: {
        won: winnerItem.type !== 'empty',
        message,
        prizeValue
      },
      stats: {
        rouletteItemsCount: rouletteItems.length,
        weightedSectorsCount: weightedSectors.length,
        winProbability: ((winnerItem.weight / weightedSectors.length) * 100).toFixed(1) + '%'
      }
    });

    res.json({
      success: true,
      message,
      winner_index: winnerIndex,
      prize_type: winnerItem.type,
      prize_value: prizeValue,
      rotation_angle: finalAngle,
      next_time: nextTime.toISOString()
    });

  } catch (error) {
    logger.error('Error in playRoulette:', error);
    res.status(500).json({
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Ä—É–ª–µ—Ç–∫—É'
    });
  }
};

module.exports = playRoulette;
